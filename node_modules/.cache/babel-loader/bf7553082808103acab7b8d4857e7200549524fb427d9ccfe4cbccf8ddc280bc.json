{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nvar InteractionHandler = /** @class */function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n        return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            // Acquire token with retrieved code.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n    return null;\n  };\n  return InteractionHandler;\n}();\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","logger","performanceClient","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","addQueueMeasurement","PerformanceEvents","HandleCodeResponseFromHash","correlationId","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","e","ServerError","subError","BrowserAuthErrorMessage","userCancelledError","code","createUserCancelledError","setPreQueueTime","HandleCodeResponseFromServer","handleCodeResponseFromServer","validateNonce","trace","nonceKey","generateNonceKey","cachedNonce","cloud_instance_host_name","UpdateTokenEndpointAuthority","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","AuthClientAcquireToken","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\interaction_handler\\InteractionHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorizationCodePayload, StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger, ServerError, IPerformanceClient, PerformanceEvents } from \"@azure/msal-common\";\r\n\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError, BrowserAuthErrorMessage } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected logger: Logger;\r\n    protected performanceClient: IPerformanceClient;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, logger: Logger, performanceClient: IPerformanceClient) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponseFromHash(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\r\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        let authCodeResponse;\r\n        try {\r\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n        } catch (e) {\r\n            if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                throw BrowserAuthError.createUserCancelledError();\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        return this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule);\r\n    }\r\n\r\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse \r\n     * @param state \r\n     * @param authority \r\n     * @param networkModule \r\n     * @returns \r\n     */\r\n    async handleCodeResponseFromServer(authCodeResponse: AuthorizationCodePayload, state: string, authority: Authority, networkModule: INetworkModule, validateNonce: boolean = true): Promise<AuthenticationResult> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\r\n        if (validateNonce) {\r\n            authCodeResponse.nonce = cachedNonce || undefined;\r\n        }\r\n\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}