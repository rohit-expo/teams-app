{"ast":null,"code":"import { Avatar } from '../Avatar/Avatar';\nimport { AvatarGroupContext, useAvatarGroupContext_unstable } from '../../contexts/AvatarGroupContext';\nimport { defaultAvatarGroupSize } from '../AvatarGroup/useAvatarGroup';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\n/**\n * Create the state required to render AvatarGroupItem.\n *\n * The returned state can be modified with hooks such as useAvatarGroupItemStyles_unstable,\n * before being passed to renderAvatarGroupItem_unstable.\n *\n * @param props - props from this instance of AvatarGroupItem\n * @param ref - reference to root HTMLElement of AvatarGroupItem\n */\n\nexport const useAvatarGroupItem_unstable = (props, ref) => {\n  const groupIsOverflow = useAvatarGroupContext_unstable(ctx => ctx.isOverflow);\n  const groupSize = useAvatarGroupContext_unstable(ctx => ctx.size);\n  const layout = useAvatarGroupContext_unstable(ctx => ctx.layout); // Since the primary slot is not an intrinsic element, getPartitionedNativeProps cannot be used here.\n\n  const {\n    style,\n    className,\n    ...avatarSlotProps\n  } = props;\n  const size = groupSize !== null && groupSize !== void 0 ? groupSize : defaultAvatarGroupSize;\n  const hasAvatarGroupContext = useHasParentContext(AvatarGroupContext);\n  if (process.env.NODE_ENV !== 'production' && !hasAvatarGroupContext) {\n    // eslint-disable-next-line no-console\n    console.warn('AvatarGroupItem must only be used inside an AvatarGroup component.');\n  }\n  return {\n    isOverflowItem: groupIsOverflow,\n    layout,\n    size,\n    components: {\n      root: groupIsOverflow ? 'li' : 'div',\n      avatar: Avatar,\n      overflowLabel: 'span'\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        style,\n        className\n      }\n    }),\n    avatar: resolveShorthand(props.avatar, {\n      required: true,\n      defaultProps: {\n        ref,\n        size,\n        color: 'colorful',\n        ...avatarSlotProps\n      }\n    }),\n    overflowLabel: resolveShorthand(props.overflowLabel, {\n      required: true,\n      defaultProps: {\n        // Avatar already has its aria-label set to the name, this will prevent the name to be read twice.\n        'aria-hidden': true,\n        children: props.name\n      }\n    })\n  };\n};","map":{"version":3,"mappings":"AACA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,kBAAT,EAA6BC,8BAA7B,QAAmE,mCAAnE;AACA,SAASC,sBAAT,QAAuC,+BAAvC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AAGA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,2BAA2B,GAAG,CACzCC,KADyC,EAEzCC,GAFyC,KAGjB;EACxB,MAAMC,eAAe,GAAGP,8BAA8B,CAACQ,GAAG,IAAIA,GAAG,CAACC,UAAZ,CAAtD;EACA,MAAMC,SAAS,GAAGV,8BAA8B,CAACQ,GAAG,IAAIA,GAAG,CAACG,IAAZ,CAAhD;EACA,MAAMC,MAAM,GAAGZ,8BAA8B,CAACQ,GAAG,IAAIA,GAAG,CAACI,MAAZ,CAA7C,CAHwB,CAIxB;;EACA,MAAM;IAAEC,KAAF;IAASC,SAAT;IAAoB,GAAGC;EAAvB,IAA2CV,KAAjD;EACA,MAAMM,IAAI,GAAGD,SAAS,SAAT,aAAS,WAAT,eAAaT,sBAA1B;EACA,MAAMe,qBAAqB,GAAGb,mBAAmB,CAACJ,kBAAD,CAAjD;EAEA,IAAIkB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACH,qBAA9C,EAAqE;IACnE;IACAI,OAAO,CAACC,IAAR,CAAa,oEAAb;EACD;EAED,OAAO;IACLC,cAAc,EAAEf,eADX;IAELK,MAFK;IAGLD,IAHK;IAILY,UAAU,EAAE;MACVC,IAAI,EAAEjB,eAAe,GAAG,IAAH,GAAU,KADrB;MAEVkB,MAAM,EAAE3B,MAFE;MAGV4B,aAAa,EAAE;IAHL,CAJP;IASLF,IAAI,EAAEtB,gBAAgB,CAACG,KAAK,CAACmB,IAAP,EAAa;MACjCG,QAAQ,EAAE,IADuB;MAEjCC,YAAY,EAAE;QACZf,KADY;QAEZC;MAFY;IAFmB,CAAb,CATjB;IAgBLW,MAAM,EAAEvB,gBAAgB,CAACG,KAAK,CAACoB,MAAP,EAAe;MACrCE,QAAQ,EAAE,IAD2B;MAErCC,YAAY,EAAE;QACZtB,GADY;QAEZK,IAFY;QAGZkB,KAAK,EAAE,UAHK;QAIZ,GAAGd;MAJS;IAFuB,CAAf,CAhBnB;IAyBLW,aAAa,EAAExB,gBAAgB,CAACG,KAAK,CAACqB,aAAP,EAAsB;MACnDC,QAAQ,EAAE,IADyC;MAEnDC,YAAY,EAAE;QACZ;QACA,eAAe,IAFH;QAGZE,QAAQ,EAAEzB,KAAK,CAAC0B;MAHJ;IAFqC,CAAtB;EAzB1B,CAAP;AAkCD,CAnDM","names":["Avatar","AvatarGroupContext","useAvatarGroupContext_unstable","defaultAvatarGroupSize","resolveShorthand","useHasParentContext","useAvatarGroupItem_unstable","props","ref","groupIsOverflow","ctx","isOverflow","groupSize","size","layout","style","className","avatarSlotProps","hasAvatarGroupContext","process","env","NODE_ENV","console","warn","isOverflowItem","components","root","avatar","overflowLabel","required","defaultProps","color","children","name"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-avatar\\lib\\components\\src\\packages\\react-components\\react-avatar\\src\\components\\AvatarGroupItem\\useAvatarGroupItem.ts"],"sourcesContent":["import * as React from 'react';\nimport { Avatar } from '../Avatar/Avatar';\nimport { AvatarGroupContext, useAvatarGroupContext_unstable } from '../../contexts/AvatarGroupContext';\nimport { defaultAvatarGroupSize } from '../AvatarGroup/useAvatarGroup';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport type { AvatarGroupItemProps, AvatarGroupItemState } from './AvatarGroupItem.types';\n\n/**\n * Create the state required to render AvatarGroupItem.\n *\n * The returned state can be modified with hooks such as useAvatarGroupItemStyles_unstable,\n * before being passed to renderAvatarGroupItem_unstable.\n *\n * @param props - props from this instance of AvatarGroupItem\n * @param ref - reference to root HTMLElement of AvatarGroupItem\n */\nexport const useAvatarGroupItem_unstable = (\n  props: AvatarGroupItemProps,\n  ref: React.Ref<HTMLElement>,\n): AvatarGroupItemState => {\n  const groupIsOverflow = useAvatarGroupContext_unstable(ctx => ctx.isOverflow);\n  const groupSize = useAvatarGroupContext_unstable(ctx => ctx.size);\n  const layout = useAvatarGroupContext_unstable(ctx => ctx.layout);\n  // Since the primary slot is not an intrinsic element, getPartitionedNativeProps cannot be used here.\n  const { style, className, ...avatarSlotProps } = props;\n  const size = groupSize ?? defaultAvatarGroupSize;\n  const hasAvatarGroupContext = useHasParentContext(AvatarGroupContext);\n\n  if (process.env.NODE_ENV !== 'production' && !hasAvatarGroupContext) {\n    // eslint-disable-next-line no-console\n    console.warn('AvatarGroupItem must only be used inside an AvatarGroup component.');\n  }\n\n  return {\n    isOverflowItem: groupIsOverflow,\n    layout,\n    size,\n    components: {\n      root: groupIsOverflow ? 'li' : 'div',\n      avatar: Avatar,\n      overflowLabel: 'span',\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        style,\n        className,\n      },\n    }),\n    avatar: resolveShorthand(props.avatar, {\n      required: true,\n      defaultProps: {\n        ref,\n        size,\n        color: 'colorful',\n        ...avatarSlotProps,\n      },\n    }),\n    overflowLabel: resolveShorthand(props.overflowLabel, {\n      required: true,\n      defaultProps: {\n        // Avatar already has its aria-label set to the name, this will prevent the name to be read twice.\n        'aria-hidden': true,\n        children: props.name,\n      },\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}