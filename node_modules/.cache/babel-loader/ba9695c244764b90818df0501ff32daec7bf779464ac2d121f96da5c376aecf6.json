{"ast":null,"code":"import { Types, getMover } from 'tabster';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { useTabster } from './useTabster';\n/**\n * A hook that returns the necessary tabster attributes to support arrow key navigation\n * @param options - Options to configure keyboard navigation\n */\n\nexport const useArrowNavigationGroup = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    circular,\n    axis,\n    memorizeCurrent,\n    tabbable,\n    ignoreDefaultKeydown\n  } = options;\n  const tabster = useTabster();\n  if (tabster) {\n    getMover(tabster);\n  }\n  return useTabsterAttributes({\n    mover: {\n      cyclic: !!circular,\n      direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : 'vertical'),\n      memorizeCurrent: memorizeCurrent,\n      tabbable: tabbable\n    },\n    ...(ignoreDefaultKeydown && {\n      focusable: {\n        ignoreKeydown: ignoreDefaultKeydown\n      }\n    })\n  });\n};\nfunction axisToMoverDirection(axis) {\n  switch (axis) {\n    case 'horizontal':\n      return Types.MoverDirections.Horizontal;\n    case 'grid':\n      return Types.MoverDirections.Grid;\n    case 'both':\n      return Types.MoverDirections.Both;\n    case 'vertical':\n    default:\n      return Types.MoverDirections.Vertical;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,SAAhC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,UAAT,QAA2B,cAA3B;AA2BA;;;AAGG;;AACH,OAAO,MAAMC,uBAAuB,GAAG,YAA4E;EAAA,IAA3EC,8EAA0C,EAA3C;EACrC,MAAM;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC,eAAlB;IAAmCC,QAAnC;IAA6CC;EAA7C,IAAsEL,OAA5E;EACA,MAAMM,OAAO,GAAGR,UAAU,EAA1B;EAEA,IAAIQ,OAAJ,EAAa;IACXV,QAAQ,CAACU,OAAD,CAAR;EACD;EAED,OAAOT,oBAAoB,CAAC;IAC1BU,KAAK,EAAE;MACLC,MAAM,EAAE,CAAC,CAACP,QADL;MAELQ,SAAS,EAAEC,oBAAoB,CAACR,IAAI,SAAJ,QAAI,WAAJ,UAAQ,UAAT,CAF1B;MAGLC,eAAe,EAAEA,eAHZ;MAILC,QAAQ,EAAEA;IAJL,CADmB;IAO1B,IAAIC,oBAAoB,IAAI;MAC1BM,SAAS,EAAE;QACTC,aAAa,EAAEP;MADN;IADe,CAA5B;EAP0B,CAAD,CAA3B;AAaD,CArBM;AAuBP,SAASK,oBAAT,CAA8BR,IAA9B,EAA0E;EACxE,QAAQA,IAAR;IACE,KAAK,YAAL;MACE,OAAOP,KAAK,CAACkB,eAAN,CAAsBC,UAA7B;IACF,KAAK,MAAL;MACE,OAAOnB,KAAK,CAACkB,eAAN,CAAsBE,IAA7B;IACF,KAAK,MAAL;MACE,OAAOpB,KAAK,CAACkB,eAAN,CAAsBG,IAA7B;IAEF,KAAK,UAAL;IACA;MACE,OAAOrB,KAAK,CAACkB,eAAN,CAAsBI,QAA7B;EAAA;AAEL","names":["Types","getMover","useTabsterAttributes","useTabster","useArrowNavigationGroup","options","circular","axis","memorizeCurrent","tabbable","ignoreDefaultKeydown","tabster","mover","cyclic","direction","axisToMoverDirection","focusable","ignoreKeydown","MoverDirections","Horizontal","Grid","Both","Vertical"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\hooks\\useArrowNavigationGroup.ts"],"sourcesContent":["import { Types, getMover } from 'tabster';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { useTabster } from './useTabster';\n\nexport interface UseArrowNavigationGroupOptions {\n  /**\n   * Focus will navigate vertically, horizontally or in both directions (grid), defaults to horizontally\n   * @defaultValue vertical\n   */\n  axis?: 'vertical' | 'horizontal' | 'grid' | 'both';\n  /**\n   * Focus will cycle to the first/last elements of the group without stopping\n   */\n  circular?: boolean;\n  /**\n   * Last focused element in the group will be remembered and focused (if still\n   * available) when tabbing from outside of the group\n   */\n  memorizeCurrent?: boolean;\n  /**\n   * Allow tabbing within the arrow navigation group items.\n   */\n  tabbable?: boolean;\n  /**\n   * Tabster should ignore default handling of keydown events\n   */\n  ignoreDefaultKeydown?: Types.FocusableProps['ignoreKeydown'];\n}\n\n/**\n * A hook that returns the necessary tabster attributes to support arrow key navigation\n * @param options - Options to configure keyboard navigation\n */\nexport const useArrowNavigationGroup = (options: UseArrowNavigationGroupOptions = {}): Types.TabsterDOMAttribute => {\n  const { circular, axis, memorizeCurrent, tabbable, ignoreDefaultKeydown } = options;\n  const tabster = useTabster();\n\n  if (tabster) {\n    getMover(tabster);\n  }\n\n  return useTabsterAttributes({\n    mover: {\n      cyclic: !!circular,\n      direction: axisToMoverDirection(axis ?? 'vertical'),\n      memorizeCurrent: memorizeCurrent,\n      tabbable: tabbable,\n    },\n    ...(ignoreDefaultKeydown && {\n      focusable: {\n        ignoreKeydown: ignoreDefaultKeydown,\n      },\n    }),\n  });\n};\n\nfunction axisToMoverDirection(axis: UseArrowNavigationGroupOptions['axis']): Types.MoverDirection {\n  switch (axis) {\n    case 'horizontal':\n      return Types.MoverDirections.Horizontal;\n    case 'grid':\n      return Types.MoverDirections.Grid;\n    case 'both':\n      return Types.MoverDirections.Both;\n\n    case 'vertical':\n    default:\n      return Types.MoverDirections.Vertical;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}