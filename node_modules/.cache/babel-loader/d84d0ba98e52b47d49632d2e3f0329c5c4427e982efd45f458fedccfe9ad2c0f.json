{"ast":null,"code":"import * as React from 'react';\nimport { getPartitionedNativeProps, resolveShorthand, useControllableState, useEventCallback, useId, useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-utilities';\nimport { Checkmark12Filled, Checkmark16Filled, Square12Filled, Square16Filled, CircleFilled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n/**\n * Create the state required to render Checkbox.\n *\n * The returned state can be modified with hooks such as useCheckboxStyles_unstable,\n * before being passed to renderCheckbox_unstable.\n *\n * @param props - props from this instance of Checkbox\n * @param ref - reference to `<input>` element of Checkbox\n */\n\nexport const useCheckbox_unstable = (props, ref) => {\n  const {\n    disabled,\n    required,\n    shape = 'square',\n    size = 'medium',\n    labelPosition = 'after',\n    onChange\n  } = props;\n  const [checked, setChecked] = useControllableState({\n    defaultState: props.defaultChecked,\n    state: props.checked,\n    initialState: false\n  });\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'size', 'onChange']\n  });\n  const mixed = checked === 'mixed';\n  const id = useId('checkbox-', nativeProps.primary.id);\n  let checkmarkIcon;\n  if (mixed) {\n    if (shape === 'circular') {\n      checkmarkIcon = /*#__PURE__*/React.createElement(CircleFilled, null);\n    } else {\n      checkmarkIcon = size === 'large' ? /*#__PURE__*/React.createElement(Square16Filled, null) : /*#__PURE__*/React.createElement(Square12Filled, null);\n    }\n  } else {\n    checkmarkIcon = size === 'large' ? /*#__PURE__*/React.createElement(Checkmark16Filled, null) : /*#__PURE__*/React.createElement(Checkmark12Filled, null);\n  }\n  const state = {\n    shape,\n    checked,\n    size,\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      indicator: 'div',\n      label: Label\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        ref: useFocusWithin(),\n        ...nativeProps.root\n      }\n    }),\n    input: resolveShorthand(props.input, {\n      required: true,\n      defaultProps: {\n        type: 'checkbox',\n        id,\n        ref,\n        checked: checked === true,\n        ...nativeProps.primary\n      }\n    }),\n    label: resolveShorthand(props.label, {\n      required: false,\n      defaultProps: {\n        htmlFor: id,\n        disabled,\n        required,\n        size: 'medium' // Even if the checkbox itself is large\n      }\n    }),\n\n    indicator: resolveShorthand(props.indicator, {\n      required: true,\n      defaultProps: {\n        'aria-hidden': true,\n        children: checkmarkIcon\n      }\n    })\n  };\n  state.input.onChange = useEventCallback(ev => {\n    const val = ev.currentTarget.indeterminate ? 'mixed' : ev.currentTarget.checked;\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, {\n      checked: val\n    });\n    setChecked(val);\n  }); // Create a ref object for the input element so we can use it to set the indeterminate prop.\n  // Use useMergedRefs, since the ref might be undefined or a function-ref (no .current)\n\n  const inputRef = useMergedRefs(state.input.ref);\n  state.input.ref = inputRef; // Set the <input> element's checked and indeterminate properties based on our tri-state property.\n  // Since indeterminate can only be set via javascript, it has to be done in a layout effect.\n\n  useIsomorphicLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = mixed;\n    }\n  }, [inputRef, mixed]);\n  return state;\n};","map":{"version":3,"mappings":"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","names":["React","getPartitionedNativeProps","resolveShorthand","useControllableState","useEventCallback","useId","useIsomorphicLayoutEffect","useMergedRefs","Checkmark12Filled","Checkmark16Filled","Square12Filled","Square16Filled","CircleFilled","Label","useFocusWithin","useCheckbox_unstable","props","ref","disabled","required","shape","size","labelPosition","onChange","checked","setChecked","defaultState","defaultChecked","state","initialState","nativeProps","primarySlotTagName","excludedPropNames","mixed","id","primary","checkmarkIcon","components","root","input","indicator","label","defaultProps","type","htmlFor","children","ev","val","currentTarget","indeterminate","inputRef","current"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-checkbox\\lib\\components\\src\\packages\\react-components\\react-checkbox\\src\\components\\Checkbox\\useCheckbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getPartitionedNativeProps,\n  resolveShorthand,\n  useControllableState,\n  useEventCallback,\n  useId,\n  useIsomorphicLayoutEffect,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport { CheckboxProps, CheckboxState } from './Checkbox.types';\nimport {\n  Checkmark12Filled,\n  Checkmark16Filled,\n  Square12Filled,\n  Square16Filled,\n  CircleFilled,\n} from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n\n/**\n * Create the state required to render Checkbox.\n *\n * The returned state can be modified with hooks such as useCheckboxStyles_unstable,\n * before being passed to renderCheckbox_unstable.\n *\n * @param props - props from this instance of Checkbox\n * @param ref - reference to `<input>` element of Checkbox\n */\nexport const useCheckbox_unstable = (props: CheckboxProps, ref: React.Ref<HTMLInputElement>): CheckboxState => {\n  const { disabled, required, shape = 'square', size = 'medium', labelPosition = 'after', onChange } = props;\n\n  const [checked, setChecked] = useControllableState({\n    defaultState: props.defaultChecked,\n    state: props.checked,\n    initialState: false,\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'size', 'onChange'],\n  });\n\n  const mixed = checked === 'mixed';\n  const id = useId('checkbox-', nativeProps.primary.id);\n\n  let checkmarkIcon;\n  if (mixed) {\n    if (shape === 'circular') {\n      checkmarkIcon = <CircleFilled />;\n    } else {\n      checkmarkIcon = size === 'large' ? <Square16Filled /> : <Square12Filled />;\n    }\n  } else {\n    checkmarkIcon = size === 'large' ? <Checkmark16Filled /> : <Checkmark12Filled />;\n  }\n\n  const state: CheckboxState = {\n    shape,\n    checked,\n    size,\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      indicator: 'div',\n      label: Label,\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        ref: useFocusWithin<HTMLSpanElement>(),\n        ...nativeProps.root,\n      },\n    }),\n    input: resolveShorthand(props.input, {\n      required: true,\n      defaultProps: {\n        type: 'checkbox',\n        id,\n        ref,\n        checked: checked === true,\n        ...nativeProps.primary,\n      },\n    }),\n    label: resolveShorthand(props.label, {\n      required: false,\n      defaultProps: {\n        htmlFor: id,\n        disabled,\n        required,\n        size: 'medium', // Even if the checkbox itself is large\n      },\n    }),\n    indicator: resolveShorthand(props.indicator, {\n      required: true,\n      defaultProps: {\n        'aria-hidden': true,\n        children: checkmarkIcon,\n      },\n    }),\n  };\n\n  state.input.onChange = useEventCallback(ev => {\n    const val = ev.currentTarget.indeterminate ? 'mixed' : ev.currentTarget.checked;\n    onChange?.(ev, { checked: val });\n    setChecked(val);\n  });\n\n  // Create a ref object for the input element so we can use it to set the indeterminate prop.\n  // Use useMergedRefs, since the ref might be undefined or a function-ref (no .current)\n  const inputRef = useMergedRefs(state.input.ref);\n  state.input.ref = inputRef;\n\n  // Set the <input> element's checked and indeterminate properties based on our tri-state property.\n  // Since indeterminate can only be set via javascript, it has to be done in a layout effect.\n  useIsomorphicLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = mixed;\n    }\n  }, [inputRef, mixed]);\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}