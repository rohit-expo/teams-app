{"ast":null,"code":"import { getPartitionedNativeProps, resolveShorthand, useControllableState, useEventCallback } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Textarea.\n *\n * The returned state can be modified with hooks such as useTextareaStyles_unstable,\n * before being passed to renderTextarea_unstable.\n *\n * @param props - props from this instance of Textarea\n * @param ref - reference to root HTMLElement of Textarea\n */\n\nexport const useTextarea_unstable = (props, ref) => {\n  const {\n    size = 'medium',\n    appearance = 'outline',\n    resize = 'none',\n    onChange\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')) {\n    // eslint-disable-next-line no-console\n    console.error(\"The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the\" + ' future.');\n  }\n  const [value, setValue] = useControllableState({\n    state: props.value,\n    defaultState: props.defaultValue,\n    initialState: undefined\n  });\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'textarea',\n    excludedPropNames: ['onChange', 'value', 'defaultValue']\n  });\n  const state = {\n    size,\n    appearance,\n    resize,\n    components: {\n      root: 'span',\n      textarea: 'textarea'\n    },\n    textarea: resolveShorthand(props.textarea, {\n      required: true,\n      defaultProps: {\n        ref,\n        ...nativeProps.primary\n      }\n    }),\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: nativeProps.root\n    })\n  };\n  state.textarea.value = value;\n  state.textarea.onChange = useEventCallback(ev => {\n    const newValue = ev.target.value;\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, {\n      value: newValue\n    });\n    setValue(newValue);\n  });\n  return state;\n};","map":{"version":3,"mappings":"AACA,SACEA,yBADF,EAEEC,gBAFF,EAGEC,oBAHF,EAIEC,gBAJF,QAKO,2BALP;AAQA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAA6E;EAC/G,MAAM;IAAEC,IAAI,GAAG,QAAT;IAAmBC,UAAU,GAAG,SAAhC;IAA2CC,MAAM,GAAG,MAApD;IAA4DC;EAA5D,IAAyEL,KAA/E;EAEA,IACEM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,KACCL,UAAU,KAAK,sBAAf,IAAyCA,UAAU,KAAK,uBADzD,CADF,EAGE;IACA;IACAM,OAAO,CAACC,KAAR,CACE,iHACE,UAFJ;EAID;EAED,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,oBAAoB,CAAC;IAC7CgB,KAAK,EAAEb,KAAK,CAACW,KADgC;IAE7CG,YAAY,EAAEd,KAAK,CAACe,YAFyB;IAG7CC,YAAY,EAAEC;EAH+B,CAAD,CAA9C;EAMA,MAAMC,WAAW,GAAGvB,yBAAyB,CAAC;IAC5CK,KAD4C;IAE5CmB,kBAAkB,EAAE,UAFwB;IAG5CC,iBAAiB,EAAE,CAAC,UAAD,EAAa,OAAb,EAAsB,cAAtB;EAHyB,CAAD,CAA7C;EAMA,MAAMP,KAAK,GAAkB;IAC3BX,IAD2B;IAE3BC,UAF2B;IAG3BC,MAH2B;IAI3BiB,UAAU,EAAE;MACVC,IAAI,EAAE,MADI;MAEVC,QAAQ,EAAE;IAFA,CAJe;IAQ3BA,QAAQ,EAAE3B,gBAAgB,CAACI,KAAK,CAACuB,QAAP,EAAiB;MACzCC,QAAQ,EAAE,IAD+B;MAEzCC,YAAY,EAAE;QACZxB,GADY;QAEZ,GAAGiB,WAAW,CAACQ;MAFH;IAF2B,CAAjB,CARC;IAe3BJ,IAAI,EAAE1B,gBAAgB,CAACI,KAAK,CAACsB,IAAP,EAAa;MACjCE,QAAQ,EAAE,IADuB;MAEjCC,YAAY,EAAEP,WAAW,CAACI;IAFO,CAAb;EAfK,CAA7B;EAqBAT,KAAK,CAACU,QAAN,CAAeZ,KAAf,GAAuBA,KAAvB;EACAE,KAAK,CAACU,QAAN,CAAelB,QAAf,GAA0BP,gBAAgB,CAAC6B,EAAE,IAAG;IAC9C,MAAMC,QAAQ,GAAGD,EAAE,CAACE,MAAH,CAAUlB,KAA3B;IACAN,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGsB,EAAH,EAAO;MAAEhB,KAAK,EAAEiB;IAAT,CAAP,CAAR;IACAhB,QAAQ,CAACgB,QAAD,CAAR;EACD,CAJyC,CAA1C;EAMA,OAAOf,KAAP;AACD,CAvDM","names":["getPartitionedNativeProps","resolveShorthand","useControllableState","useEventCallback","useTextarea_unstable","props","ref","size","appearance","resize","onChange","process","env","NODE_ENV","console","error","value","setValue","state","defaultState","defaultValue","initialState","undefined","nativeProps","primarySlotTagName","excludedPropNames","components","root","textarea","required","defaultProps","primary","ev","newValue","target"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-textarea\\lib\\components\\src\\packages\\react-components\\react-textarea\\src\\components\\Textarea\\useTextarea.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  getPartitionedNativeProps,\n  resolveShorthand,\n  useControllableState,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport type { TextareaProps, TextareaState } from './Textarea.types';\n\n/**\n * Create the state required to render Textarea.\n *\n * The returned state can be modified with hooks such as useTextareaStyles_unstable,\n * before being passed to renderTextarea_unstable.\n *\n * @param props - props from this instance of Textarea\n * @param ref - reference to root HTMLElement of Textarea\n */\nexport const useTextarea_unstable = (props: TextareaProps, ref: React.Ref<HTMLTextAreaElement>): TextareaState => {\n  const { size = 'medium', appearance = 'outline', resize = 'none', onChange } = props;\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      \"The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the\" +\n        ' future.',\n    );\n  }\n\n  const [value, setValue] = useControllableState({\n    state: props.value,\n    defaultState: props.defaultValue,\n    initialState: undefined,\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'textarea',\n    excludedPropNames: ['onChange', 'value', 'defaultValue'],\n  });\n\n  const state: TextareaState = {\n    size,\n    appearance,\n    resize,\n    components: {\n      root: 'span',\n      textarea: 'textarea',\n    },\n    textarea: resolveShorthand(props.textarea, {\n      required: true,\n      defaultProps: {\n        ref,\n        ...nativeProps.primary,\n      },\n    }),\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: nativeProps.root,\n    }),\n  };\n\n  state.textarea.value = value;\n  state.textarea.onChange = useEventCallback(ev => {\n    const newValue = ev.target.value;\n    onChange?.(ev, { value: newValue });\n    setValue(newValue);\n  });\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}