{"ast":null,"code":"import { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { useCallback } from 'react';\nconst disableScrollElementProp = '__fluentDisableScrollElement';\n/**\n * hook that disables body scrolling through `overflow: hidden` CSS property\n */\n\nexport function useDisableBodyScroll() {\n  const {\n    targetDocument\n  } = useFluent_unstable();\n  return useCallback(() => {\n    if (targetDocument) {\n      return disableScroll(targetDocument.body);\n    }\n  }, [targetDocument]);\n}\n/**\n * disables scrolling from a given element through `overflow: hidden` CSS property\n * @param target - element to disable scrolling from\n * @returns a method for enabling scrolling again\n */\n\nexport function disableScroll(target) {\n  var _a, _b;\n  const {\n    clientWidth\n  } = target.ownerDocument.documentElement;\n  const innerWidth = (_b = (_a = target.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.innerWidth) !== null && _b !== void 0 ? _b : 0;\n  assertIsDisableScrollElement(target);\n  if (target[disableScrollElementProp].count === 0) {\n    target.style.overflow = 'hidden';\n    target.style.paddingRight = `${innerWidth - clientWidth}px`;\n  }\n  target[disableScrollElementProp].count++;\n  return () => {\n    target[disableScrollElementProp].count--;\n    if (target[disableScrollElementProp].count === 0) {\n      target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;\n      target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;\n    }\n  };\n}\nfunction assertIsDisableScrollElement(element) {\n  var _a;\n  var _b;\n  (_a = (_b = element)[disableScrollElementProp]) !== null && _a !== void 0 ? _a : _b[disableScrollElementProp] = {\n    count: 0,\n    previousOverflowStyle: element.style.overflow,\n    previousPaddingRightStyle: element.style.paddingRight\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,iCAAnC;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,wBAAwB,GAAG,8BAAjC;AAUA;;AAEG;;AACH,OAAM,SAAUC,oBAAV,GAA8B;EAClC,MAAM;IAAEC;EAAF,IAAqBJ,kBAAkB,EAA7C;EACA,OAAOC,WAAW,CAAC,MAAK;IACtB,IAAIG,cAAJ,EAAoB;MAClB,OAAOC,aAAa,CAACD,cAAc,CAACE,IAAhB,CAApB;IACD;EACF,CAJiB,EAIf,CAACF,cAAD,CAJe,CAAlB;AAKD;AAED;;;;AAIG;;AACH,OAAM,SAAUC,aAAV,CAAwBE,MAAxB,EAA2C;;EAC/C,MAAM;IAAEC;EAAF,IAAkBD,MAAM,CAACE,aAAP,CAAqBC,eAA7C;EACA,MAAMC,UAAU,GAAG,kBAAM,CAACF,aAAP,CAAqBG,WAArB,MAAgC,IAAhC,IAAgCC,aAAhC,GAAgC,MAAhC,GAAgCA,GAAEF,UAAlC,MAA4C,IAA5C,IAA4CG,aAA5C,GAA4CA,EAA5C,GAAgD,CAAnE;EACAC,4BAA4B,CAACR,MAAD,CAA5B;EACA,IAAIA,MAAM,CAACL,wBAAD,CAAN,CAAiCc,KAAjC,KAA2C,CAA/C,EAAkD;IAChDT,MAAM,CAACU,KAAP,CAAaC,QAAb,GAAwB,QAAxB;IACAX,MAAM,CAACU,KAAP,CAAaE,YAAb,GAA4B,GAAGR,UAAU,GAAGH,WAAW,IAAvD;EACD;EACDD,MAAM,CAACL,wBAAD,CAAN,CAAiCc,KAAjC;EACA,OAAO,MAAK;IACVT,MAAM,CAACL,wBAAD,CAAN,CAAiCc,KAAjC;IACA,IAAIT,MAAM,CAACL,wBAAD,CAAN,CAAiCc,KAAjC,KAA2C,CAA/C,EAAkD;MAChDT,MAAM,CAACU,KAAP,CAAaC,QAAb,GAAwBX,MAAM,CAACL,wBAAD,CAAN,CAAiCkB,qBAAzD;MACAb,MAAM,CAACU,KAAP,CAAaE,YAAb,GAA4BZ,MAAM,CAACL,wBAAD,CAAN,CAAiCmB,yBAA7D;IACD;EACF,CAND;AAOD;AAED,SAASN,4BAAT,CAAsCO,OAAtC,EAA0D;;;EACxD,YAACA,OAAD,EAAwCpB,wBAAxC,OAAgE,IAAhE,IAAgEW,aAAhE,GAAgEA,EAAhE,GAAgEC,GAAxBZ,wBAAwB,IAAM;IACpEc,KAAK,EAAE,CAD6D;IAEpEI,qBAAqB,EAAEE,OAAO,CAACL,KAAR,CAAcC,QAF+B;IAGpEG,yBAAyB,EAAEC,OAAO,CAACL,KAAR,CAAcE;EAH2B,CAAtE;AAKD","names":["useFluent_unstable","useCallback","disableScrollElementProp","useDisableBodyScroll","targetDocument","disableScroll","body","target","clientWidth","ownerDocument","documentElement","innerWidth","defaultView","_a","_b","assertIsDisableScrollElement","count","style","overflow","paddingRight","previousOverflowStyle","previousPaddingRightStyle","element"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-dialog\\lib\\src\\packages\\react-components\\react-dialog\\src\\utils\\useDisableBodyScroll.ts"],"sourcesContent":["import { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { useCallback } from 'react';\n\nconst disableScrollElementProp = '__fluentDisableScrollElement' as const;\n\ntype FluentDisableScrollElement = HTMLElement & {\n  [disableScrollElementProp]: {\n    count: number;\n    previousOverflowStyle: string;\n    previousPaddingRightStyle: string;\n  };\n};\n\n/**\n * hook that disables body scrolling through `overflow: hidden` CSS property\n */\nexport function useDisableBodyScroll() {\n  const { targetDocument } = useFluent_unstable();\n  return useCallback(() => {\n    if (targetDocument) {\n      return disableScroll(targetDocument.body);\n    }\n  }, [targetDocument]);\n}\n\n/**\n * disables scrolling from a given element through `overflow: hidden` CSS property\n * @param target - element to disable scrolling from\n * @returns a method for enabling scrolling again\n */\nexport function disableScroll(target: HTMLElement) {\n  const { clientWidth } = target.ownerDocument.documentElement;\n  const innerWidth = target.ownerDocument.defaultView?.innerWidth ?? 0;\n  assertIsDisableScrollElement(target);\n  if (target[disableScrollElementProp].count === 0) {\n    target.style.overflow = 'hidden';\n    target.style.paddingRight = `${innerWidth - clientWidth}px`;\n  }\n  target[disableScrollElementProp].count++;\n  return () => {\n    target[disableScrollElementProp].count--;\n    if (target[disableScrollElementProp].count === 0) {\n      target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;\n      target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;\n    }\n  };\n}\n\nfunction assertIsDisableScrollElement(element: HTMLElement): asserts element is FluentDisableScrollElement {\n  (element as FluentDisableScrollElement)[disableScrollElementProp] ??= {\n    count: 0,\n    previousOverflowStyle: element.style.overflow,\n    previousPaddingRightStyle: element.style.paddingRight,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}