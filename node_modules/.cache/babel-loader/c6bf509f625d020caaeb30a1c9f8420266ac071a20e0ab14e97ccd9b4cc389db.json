{"ast":null,"code":"import { getNativeElementProps, resolveShorthand, useEventCallback, useMergedRefs, isResolvedShorthand } from '@fluentui/react-utilities';\nimport { useDialogContext_unstable } from '../../contexts';\nimport { isEscapeKeyDismiss } from '../../utils';\nimport { useModalAttributes } from '@fluentui/react-tabster';\n/**\n * Create the state required to render DialogSurface.\n *\n * The returned state can be modified with hooks such as useDialogSurfaceStyles_unstable,\n * before being passed to renderDialogSurface_unstable.\n *\n * @param props - props from this instance of DialogSurface\n * @param ref - reference to root HTMLElement of DialogSurface\n */\n\nexport const useDialogSurface_unstable = (props, ref) => {\n  const {\n    backdrop,\n    as\n  } = props;\n  const modalType = useDialogContext_unstable(ctx => ctx.modalType);\n  const dialogRef = useDialogContext_unstable(ctx => ctx.dialogRef);\n  const open = useDialogContext_unstable(ctx => ctx.open);\n  const requestOpenChange = useDialogContext_unstable(ctx => ctx.requestOpenChange);\n  const dialogTitleID = useDialogContext_unstable(ctx => ctx.dialogTitleId);\n  const handledBackdropClick = useEventCallback(event => {\n    var _a, _b;\n    if (isResolvedShorthand(props.backdrop)) {\n      (_b = (_a = props.backdrop).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n    }\n    if (modalType === 'modal' && !event.isDefaultPrevented()) {\n      requestOpenChange({\n        event,\n        open: false,\n        type: 'backdropClick'\n      });\n    }\n  });\n  const handleKeyDown = useEventCallback(event => {\n    var _a;\n    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, event);\n    if (isEscapeKeyDismiss(event, modalType)) {\n      requestOpenChange({\n        event,\n        open: false,\n        type: 'escapeKeyDown'\n      }); // stop propagation to avoid conflicting with other elements that listen for `Escape`\n      // e,g: nested Dialog, Popover, Menu and Tooltip\n\n      event.stopPropagation();\n    }\n  });\n  const {\n    modalAttributes\n  } = useModalAttributes({\n    trapFocus: modalType !== 'non-modal'\n  });\n  return {\n    components: {\n      backdrop: 'div',\n      root: 'div'\n    },\n    backdrop: resolveShorthand(backdrop, {\n      required: open && modalType !== 'non-modal',\n      defaultProps: {\n        'aria-hidden': 'true',\n        onClick: handledBackdropClick\n      }\n    }),\n    root: getNativeElementProps(as !== null && as !== void 0 ? as : 'div', {\n      tabIndex: -1,\n      'aria-modal': modalType !== 'non-modal',\n      role: modalType === 'alert' ? 'alertdialog' : 'dialog',\n      'aria-labelledby': props['aria-label'] ? undefined : dialogTitleID,\n      ...props,\n      ...modalAttributes,\n      onKeyDown: handleKeyDown,\n      ref: useMergedRefs(ref, dialogRef)\n    })\n  };\n};","map":{"version":3,"mappings":"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","names":["getNativeElementProps","resolveShorthand","useEventCallback","useMergedRefs","isResolvedShorthand","useDialogContext_unstable","isEscapeKeyDismiss","useModalAttributes","useDialogSurface_unstable","props","ref","backdrop","as","modalType","ctx","dialogRef","open","requestOpenChange","dialogTitleID","dialogTitleId","handledBackdropClick","event","onClick","_b","isDefaultPrevented","type","handleKeyDown","onKeyDown","_a","stopPropagation","modalAttributes","trapFocus","components","root","required","defaultProps","tabIndex","role","undefined"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-dialog\\lib\\components\\src\\packages\\react-components\\react-dialog\\src\\components\\DialogSurface\\useDialogSurface.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  getNativeElementProps,\n  resolveShorthand,\n  useEventCallback,\n  useMergedRefs,\n  isResolvedShorthand,\n} from '@fluentui/react-utilities';\nimport type {\n  DialogSurfaceElement,\n  DialogSurfaceElementIntersection,\n  DialogSurfaceProps,\n  DialogSurfaceState,\n} from './DialogSurface.types';\nimport { useDialogContext_unstable } from '../../contexts';\nimport { isEscapeKeyDismiss } from '../../utils';\nimport { useModalAttributes } from '@fluentui/react-tabster';\n\n/**\n * Create the state required to render DialogSurface.\n *\n * The returned state can be modified with hooks such as useDialogSurfaceStyles_unstable,\n * before being passed to renderDialogSurface_unstable.\n *\n * @param props - props from this instance of DialogSurface\n * @param ref - reference to root HTMLElement of DialogSurface\n */\nexport const useDialogSurface_unstable = (\n  props: DialogSurfaceProps,\n  ref: React.Ref<DialogSurfaceElement>,\n): DialogSurfaceState => {\n  const { backdrop, as } = props;\n  const modalType = useDialogContext_unstable(ctx => ctx.modalType);\n  const dialogRef = useDialogContext_unstable(ctx => ctx.dialogRef);\n  const open = useDialogContext_unstable(ctx => ctx.open);\n  const requestOpenChange = useDialogContext_unstable(ctx => ctx.requestOpenChange);\n  const dialogTitleID = useDialogContext_unstable(ctx => ctx.dialogTitleId);\n\n  const handledBackdropClick = useEventCallback((event: React.MouseEvent<HTMLDivElement>) => {\n    if (isResolvedShorthand(props.backdrop)) {\n      props.backdrop.onClick?.(event);\n    }\n    if (modalType === 'modal' && !event.isDefaultPrevented()) {\n      requestOpenChange({\n        event,\n        open: false,\n        type: 'backdropClick',\n      });\n    }\n  });\n\n  const handleKeyDown = useEventCallback((event: React.KeyboardEvent<DialogSurfaceElementIntersection>) => {\n    props.onKeyDown?.(event);\n\n    if (isEscapeKeyDismiss(event, modalType)) {\n      requestOpenChange({\n        event,\n        open: false,\n        type: 'escapeKeyDown',\n      });\n      // stop propagation to avoid conflicting with other elements that listen for `Escape`\n      // e,g: nested Dialog, Popover, Menu and Tooltip\n      event.stopPropagation();\n    }\n  });\n\n  const { modalAttributes } = useModalAttributes({ trapFocus: modalType !== 'non-modal' });\n\n  return {\n    components: {\n      backdrop: 'div',\n      root: 'div',\n    },\n    backdrop: resolveShorthand(backdrop, {\n      required: open && modalType !== 'non-modal',\n      defaultProps: {\n        'aria-hidden': 'true',\n        onClick: handledBackdropClick,\n      },\n    }),\n    root: getNativeElementProps(as ?? 'div', {\n      tabIndex: -1, // https://github.com/microsoft/fluentui/issues/25150\n      'aria-modal': modalType !== 'non-modal',\n      role: modalType === 'alert' ? 'alertdialog' : 'dialog',\n      'aria-labelledby': props['aria-label'] ? undefined : dialogTitleID,\n      ...props,\n      ...modalAttributes,\n      onKeyDown: handleKeyDown,\n      ref: useMergedRefs(ref, dialogRef),\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}