{"ast":null,"code":"import { createContext, useContextSelector } from '@fluentui/react-context-selector';\nexport const AccordionContext = /*#__PURE__*/createContext(undefined);\nconst accordionContextDefaultValue = {\n  openItems: [],\n  collapsible: false,\n  requestToggle() {\n    /* noop */\n  }\n};\nexport const AccordionProvider = AccordionContext.Provider;\nexport const useAccordionContext_unstable = selector => useContextSelector(AccordionContext, function () {\n  let ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : accordionContextDefaultValue;\n  return selector(ctx);\n});","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAyCC,kBAAzC,QAAmE,kCAAnE;AAIA,OAAO,MAAMC,gBAAgB,gBAAmCF,aAAa,CAC3EG,SAD2E,CAAtE;AAIP,MAAMC,4BAA4B,GAA0B;EAC1DC,SAAS,EAAE,EAD+C;EAE1DC,WAAW,EAAE,KAF6C;EAG1DC,aAAa;IACX;EAAA;AAJwD,CAA5D;AAQA,OAAO,MAAMC,iBAAiB,GAAGN,gBAAgB,CAACO,QAA3C;AACP,OAAO,MAAMC,4BAA4B,GAAOC,QAAJ,IAC1CV,kBAAkB,CAACC,gBAAD,EAAmB;EAAA,IAACU,GAAG,uEAAGR,4BAAP;EAAA,OAAwCO,QAAQ,CAACC,GAAD,CAAnE;AAAA,EADb","names":["createContext","useContextSelector","AccordionContext","undefined","accordionContextDefaultValue","openItems","collapsible","requestToggle","AccordionProvider","Provider","useAccordionContext_unstable","selector","ctx"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-accordion\\lib\\components\\src\\packages\\react-components\\react-accordion\\src\\components\\Accordion\\AccordionContext.ts"],"sourcesContent":["import { createContext, ContextSelector, useContextSelector } from '@fluentui/react-context-selector';\nimport type { Context } from '@fluentui/react-context-selector';\nimport type { AccordionContextValue } from './Accordion.types';\n\nexport const AccordionContext: Context<AccordionContextValue> = createContext<AccordionContextValue | undefined>(\n  undefined,\n) as Context<AccordionContextValue>;\n\nconst accordionContextDefaultValue: AccordionContextValue = {\n  openItems: [],\n  collapsible: false,\n  requestToggle() {\n    /* noop */\n  },\n};\n\nexport const AccordionProvider = AccordionContext.Provider;\nexport const useAccordionContext_unstable = <T>(selector: ContextSelector<AccordionContextValue, T>): T =>\n  useContextSelector(AccordionContext, (ctx = accordionContextDefaultValue) => selector(ctx));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}