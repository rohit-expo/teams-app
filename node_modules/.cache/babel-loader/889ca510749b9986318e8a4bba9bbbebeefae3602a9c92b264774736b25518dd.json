{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar KeyLocation;\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\nvar PopTokenGenerator = /** @class */function () {\n  function PopTokenGenerator(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var reqCnf, reqCnfString, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4 /*yield*/, this.generateKid(request)];\n          case 1:\n            reqCnf = _d.sent();\n            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n            _c = {\n              kid: reqCnf.kid,\n              reqCnfString: reqCnfString\n            };\n            return [4 /*yield*/, this.cryptoUtils.hashString(reqCnfString)];\n          case 2:\n            return [2 /*return*/, (_c.reqCnfHash = _d.sent(), _c)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates key_id for a SHR token request\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.generateKid = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n            return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];\n          case 1:\n            kidThumbprint = _b.sent();\n            return [2 /*return*/, {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the POP access_token with the local generated key-pair\r\n   * @param accessToken\r\n   * @param request\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.signPayload(accessToken, keyId, request)];\n      });\n    });\n  };\n  /**\r\n   * Utility function to generate the signed JWT for an access_token\r\n   * @param payload\r\n   * @param kid\r\n   * @param request\r\n   * @param claims\r\n   * @returns\r\n   */\n  PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\n            resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            return [4 /*yield*/, this.cryptoUtils.signJwt(__assign({\n              at: payload,\n              ts: TimeUtils.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, claims), keyId, request.correlationId)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return PopTokenGenerator;\n}();\nexport { PopTokenGenerator };","map":{"version":3,"mappings":"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","names":["KeyLocation","PopTokenGenerator","performanceClient","cryptoUtils","request","addQueueMeasurement","PerformanceEvents","PopTokenGenerateCnf","correlationId","setPreQueueTime","PopTokenGenerateKid","generateKid","reqCnf","_d","reqCnfString","base64Encode","JSON","stringify","kid","hashString","_c","getPublicKeyThumbprint","kidThumbprint","_b","xms_ksl","SW","accessToken","keyId","signPayload","payload","claims","resourceRequestMethod","resourceRequestUri","shrClaims","shrNonce","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","signJwt","__assign","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims","_a"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\crypto\\PopTokenGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\n/**\r\n * See eSTS docs for more info.\r\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\r\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\r\n *      - sw: software storage\r\n *      - uhw: hardware storage\r\n */\r\ntype ReqCnf = {\r\n    kid: string;\r\n    xms_ksl: KeyLocation;\r\n};\r\n\r\nexport type ReqCnfData = {\r\n    kid: string;\r\n    reqCnfString: string;\r\n    reqCnfHash: string;\r\n};\r\n\r\nenum KeyLocation {\r\n    SW = \"sw\",\r\n    UHW = \"uhw\"\r\n}\r\n\r\nexport class PopTokenGenerator {\r\n\r\n    private cryptoUtils: ICrypto;\r\n    private performanceClient?: IPerformanceClient;\r\n\r\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(request: SignedHttpRequestParameters): Promise<ReqCnfData> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n\r\n        this.performanceClient?.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n        const reqCnf = await this.generateKid(request);\r\n        const reqCnfString: string = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\r\n\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString, \r\n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString) \r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(accessToken: string, keyId: string, request: SignedHttpRequestParameters): Promise<string> {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(payload: string, keyId: string, request: SignedHttpRequestParameters, claims?: object): Promise<string> {\r\n\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce } = request;\r\n\r\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return await this.cryptoUtils.signJwt({\r\n            at: payload,\r\n            ts: TimeUtils.nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\r\n            client_claims: shrClaims || undefined,\r\n            ...claims\r\n        }, keyId, request.correlationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}