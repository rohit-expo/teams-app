{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\nvar PublicClientApplication = /** @class */function (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    _this.astsAsyncMeasurement = undefined;\n    _this.activeSilentTokenRequests = new Map();\n    // Register listener functions\n    _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2 /*return*/, this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n      var _this = this;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.addStaticFields({\n          cacheLookupPolicy: request.cacheLookupPolicy\n        });\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.addStaticFields({\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length\n            });\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2 /*return*/, response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n          atsMeasurement.discardMeasurement();\n          return [2 /*return*/, cachedResponse];\n        }\n      });\n    });\n  };\n  PublicClientApplication.prototype.trackPageVisibility = function () {\n    if (!this.astsAsyncMeasurement) {\n      return;\n    }\n    this.logger.info(\"Perf: Visibility change detected\");\n    this.astsAsyncMeasurement.increment({\n      visibilityChangeCount: 1\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\n              visibilityChangeCount: 0\n            });\n            document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2 /*return*/, silentIframeClient.acquireToken(request)];\n                  }\n                  throw e;\n                });\n              });\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n            return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\n          case 2:\n            silentRequest_1 = _b.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              }\n              // block the reload if it occurred inside a hidden iframe\n              BrowserUtils.blockReloadInHiddenIframes();\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n              _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                  throw refreshTokenError;\n                }\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/, result.then(function (response) {\n              var _a;\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              var _a;\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            }).finally(function () {\n              document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\n            })];\n        }\n      });\n    });\n  };\n  return PublicClientApplication;\n}(ClientApplication);\nexport { PublicClientApplication };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","_this","undefined","activeSilentTokenRequests","Map","trackPageVisibility","bind","PublicClientApplication","request","correlationId","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","DEFAULT_REQUEST","acquireTokenPopup","atsMeasurement","performanceClient","startMeasurement","PerformanceEvents","AcquireTokenSilent","addStaticFields","cacheLookupPolicy","preflightBrowserEnvironmentCheck","InteractionType","Silent","account","getActiveAccount","BrowserAuthError","createNoAccountError","thumbprint","clientId","config","auth","authority","Constants","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","silentRequestKey","JSON","stringify","cachedResponse","get","setPreQueueTime","AcquireTokenSilentAsync","response","acquireTokenSilentAsync","then","result","delete","accessTokenSize","accessToken","length","idTokenSize","idToken","endMeasurement","success","fromCache","isNativeBroker","fromNativeBroker","requestId","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","astsAsyncMeasurement","info","increment","visibilityChangeCount","addQueueMeasurement","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_START","document","addEventListener","NativeMessageHandler","isNativeAvailable","nativeExtensionProvider","nativeAccountId","silentRequest","acquireTokenNative","ApiId","acquireTokenSilent_silentFlow","e","NativeAuthError","isFatal","silentIframeClient","createSilentIframeClient","acquireToken","silentCacheClient","createSilentCacheClient","InitializeSilentRequest","initializeSilentRequest","silentRequest_1","_b","requestWithCLP_1","CacheLookupPolicy","Default","AcquireTokenFromCache","acquireTokenFromCache","cacheError","AccessToken","BrowserUtils","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","AcquireTokenByRefreshToken","acquireTokenByRefreshToken","refreshTokenError","isServerError","ServerError","isInteractionRequiredError","InteractionRequiredAuthError","isInvalidGrantError","BrowserConstants","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","AcquireTokenBySilentIframe","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","finally","removeEventListener","ClientApplication"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\app\\PublicClientApplication.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountInfo, AuthenticationResult, Constants, RequestThumbprint, AuthError, PerformanceEvents, ServerError, InteractionRequiredAuthError, InProgressPerformanceEvent } from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { DEFAULT_REQUEST, InteractionType, ApiId, CacheLookupPolicy, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { NativeAuthError } from \"../error/NativeAuthError\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\r\n\r\n    // Active requests\r\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\r\n    private astsAsyncMeasurement?: InProgressPerformanceEvent = undefined;\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n\r\n        this.activeSilentTokenRequests = new Map();\r\n        // Register listener functions\r\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginRedirect called\", correlationId);\r\n        return this.acquireTokenRedirect({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\r\n        const correlationId: string = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup({\r\n            correlationId,\r\n            ...(request || DEFAULT_REQUEST)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\r\n        const correlationId = this.getRequestCorrelationId(request);\r\n        const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n        atsMeasurement.addStaticFields({\r\n            cacheLookupPolicy: request.cacheLookupPolicy\r\n        });\r\n\r\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n\r\n        const account = request.account || this.getActiveAccount();\r\n        if (!account) {\r\n            throw BrowserAuthError.createNoAccountError();\r\n        }\r\n\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.auth.clientId,\r\n            authority: request.authority || Constants.EMPTY_STRING,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: account.homeAccountId,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        const silentRequestKey = JSON.stringify(thumbprint);\r\n\r\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n        if (typeof cachedResponse === \"undefined\") {\r\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\r\n            const response = this.acquireTokenSilentAsync({\r\n                ...request,\r\n                correlationId\r\n            }, account)\r\n                .then((result) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.addStaticFields({\r\n                        accessTokenSize: result.accessToken.length,\r\n                        idTokenSize: result.idToken.length\r\n                    });\r\n                    atsMeasurement.endMeasurement({\r\n                        success: true,\r\n                        fromCache: result.fromCache,\r\n                        isNativeBroker: result.fromNativeBroker,\r\n                        cacheLookupPolicy: request.cacheLookupPolicy,\r\n                        requestId: result.requestId,\r\n                    });\r\n                    return result;\r\n                })\r\n                .catch((error: AuthError) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    atsMeasurement.endMeasurement({\r\n                        errorCode: error.errorCode,\r\n                        subErrorCode: error.subError,\r\n                        success: false\r\n                    });\r\n                    throw error;\r\n                });\r\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n            return response;\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n            atsMeasurement.discardMeasurement();\r\n            return cachedResponse;\r\n        }\r\n    }\r\n\r\n    private trackPageVisibility():void {\r\n        if (!this.astsAsyncMeasurement) {\r\n            return;\r\n        }\r\n        this.logger.info(\"Perf: Visibility change detected\");\r\n        this.astsAsyncMeasurement.increment({\r\n            visibilityChangeCount: 1,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\r\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n\r\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n        this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n        this.astsAsyncMeasurement?.increment({\r\n            visibilityChangeCount: 0\r\n        });\r\n        document.addEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        let result: Promise<AuthenticationResult>;\r\n        if (NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId) {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\r\n            const silentRequest: SilentRequest = {\r\n                ...request,\r\n                account\r\n            };\r\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(async (e: AuthError) => {\r\n                // If native token acquisition fails for availability reasons fallback to web flow\r\n                if (e instanceof NativeAuthError && e.isFatal()) {\r\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\r\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\r\n\r\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\r\n                    const silentIframeClient = this.createSilentIframeClient(request.correlationId);\r\n                    return silentIframeClient.acquireToken(request);\r\n                }\r\n                throw e;\r\n            });\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\r\n\r\n            const silentCacheClient = this.createSilentCacheClient(request.correlationId);\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\r\n            const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\r\n\r\n            const requestWithCLP = {\r\n                ...request,\r\n                // set the request's CacheLookupPolicy to Default if it was not optionally passed in\r\n                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\r\n            };\r\n\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest.correlationId);\r\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest, requestWithCLP).catch((cacheError: AuthError) => {\r\n                if (requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\r\n                    throw cacheError;\r\n                }\r\n\r\n                // block the reload if it occurred inside a hidden iframe\r\n                BrowserUtils.blockReloadInHiddenIframes();\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest);\r\n\r\n                this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest.correlationId);\r\n                return this.acquireTokenByRefreshToken(silentRequest, requestWithCLP).catch((refreshTokenError: AuthError) => {\r\n                    const isServerError = refreshTokenError instanceof ServerError;\r\n                    const isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\r\n                    const isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\r\n\r\n                    if ((!isServerError ||\r\n                            !isInvalidGrantError ||\r\n                            isInteractionRequiredError ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\r\n                            requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\r\n                        && (requestWithCLP.cacheLookupPolicy !== CacheLookupPolicy.Skip)\r\n                    ) {\r\n                        throw refreshTokenError;\r\n                    }\r\n\r\n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\r\n                    this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest.correlationId);\r\n                    return this.acquireTokenBySilentIframe(silentRequest);\r\n                });\r\n            });\r\n        }\r\n\r\n        return result.then((response) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                success: true,\r\n                fromCache: response.fromCache,\r\n                isNativeBroker: response.fromNativeBroker,\r\n                requestId: response.requestId\r\n            });\r\n            return response;\r\n        }).catch((tokenRenewalError: AuthError) => {\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n            this.astsAsyncMeasurement?.endMeasurement({\r\n                errorCode: tokenRenewalError.errorCode,\r\n                subErrorCode: tokenRenewalError.subError,\r\n                success: false\r\n            });\r\n            throw tokenRenewalError;\r\n        }).finally(() => {\r\n            document.removeEventListener(\"visibilitychange\",this.trackPageVisibility);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}