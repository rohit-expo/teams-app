{"ast":null,"code":"import * as React from 'react';\nimport { usePortalMountNode } from './usePortalMountNode';\nimport { setVirtualParent } from '../../virtualParent/index';\n/**\n * Create the state required to render Portal.\n *\n * The returned state can be modified with hooks such as usePortalStyles, before being passed to renderPortal_unstable.\n *\n * @param props - props from this instance of Portal\n */\n\nexport const usePortal_unstable = props => {\n  const {\n    children,\n    mountNode\n  } = props;\n  const virtualParentRootRef = React.useRef(null);\n  const fallbackMountNode = usePortalMountNode({\n    disabled: !!mountNode\n  });\n  const state = {\n    children,\n    mountNode: mountNode !== null && mountNode !== void 0 ? mountNode : fallbackMountNode,\n    virtualParentRootRef\n  };\n  React.useEffect(() => {\n    if (state.virtualParentRootRef.current && state.mountNode) {\n      setVirtualParent(state.mountNode, state.virtualParentRootRef.current);\n    }\n  }, [state.virtualParentRootRef, state.mountNode]);\n  return state;\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAGA;;;;;;AAMG;;AACH,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAoC;EACpE,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAA0BF,KAAhC;EAEA,MAAMG,oBAAoB,GAAGP,KAAK,CAACQ,MAAN,CAA8B,IAA9B,CAA7B;EACA,MAAMC,iBAAiB,GAAGR,kBAAkB,CAAC;IAAES,QAAQ,EAAE,CAAC,CAACJ;EAAd,CAAD,CAA5C;EAEA,MAAMK,KAAK,GAAgB;IACzBN,QADyB;IAEzBC,SAAS,EAAEA,SAAS,SAAT,aAAS,WAAT,eAAaG,iBAFC;IAGzBF;EAHyB,CAA3B;EAMAP,KAAK,CAACY,SAAN,CAAgB,MAAK;IACnB,IAAID,KAAK,CAACJ,oBAAN,CAA2BM,OAA3B,IAAsCF,KAAK,CAACL,SAAhD,EAA2D;MACzDJ,gBAAgB,CAACS,KAAK,CAACL,SAAP,EAAkBK,KAAK,CAACJ,oBAAN,CAA2BM,OAA7C,CAAhB;IACD;EACF,CAJD,EAIG,CAACF,KAAK,CAACJ,oBAAP,EAA6BI,KAAK,CAACL,SAAnC,CAJH;EAMA,OAAOK,KAAP;AACD,CAnBM","names":["React","usePortalMountNode","setVirtualParent","usePortal_unstable","props","children","mountNode","virtualParentRootRef","useRef","fallbackMountNode","disabled","state","useEffect","current"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-portal\\lib\\components\\src\\packages\\react-components\\react-portal\\src\\components\\Portal\\usePortal.ts"],"sourcesContent":["import * as React from 'react';\nimport { usePortalMountNode } from './usePortalMountNode';\nimport { setVirtualParent } from '../../virtualParent/index';\nimport type { PortalProps, PortalState } from './Portal.types';\n\n/**\n * Create the state required to render Portal.\n *\n * The returned state can be modified with hooks such as usePortalStyles, before being passed to renderPortal_unstable.\n *\n * @param props - props from this instance of Portal\n */\nexport const usePortal_unstable = (props: PortalProps): PortalState => {\n  const { children, mountNode } = props;\n\n  const virtualParentRootRef = React.useRef<HTMLSpanElement>(null);\n  const fallbackMountNode = usePortalMountNode({ disabled: !!mountNode });\n\n  const state: PortalState = {\n    children,\n    mountNode: mountNode ?? fallbackMountNode,\n    virtualParentRootRef,\n  };\n\n  React.useEffect(() => {\n    if (state.virtualParentRootRef.current && state.mountNode) {\n      setVirtualParent(state.mountNode, state.virtualParentRootRef.current);\n    }\n  }, [state.virtualParentRootRef, state.mountNode]);\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}