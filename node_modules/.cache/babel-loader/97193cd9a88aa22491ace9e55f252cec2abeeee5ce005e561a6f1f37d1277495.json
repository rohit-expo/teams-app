{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { TabListContext } from '../TabList/TabListContext';\nimport { useContextSelector } from '@fluentui/react-context-selector';\n/**\n * Create the state required to render Tab.\n *\n * The returned state can be modified with hooks such as useTabStyles_unstable,\n * before being passed to renderTab_unstable.\n *\n * @param props - props from this instance of Tab\n * @param ref - reference to root HTMLElement of Tab\n */\n\nexport const useTab_unstable = (props, ref) => {\n  const {\n    content,\n    disabled: tabDisabled = false,\n    icon,\n    value\n  } = props;\n  const appearance = useContextSelector(TabListContext, ctx => ctx.appearance);\n  const reserveSelectedTabSpace = useContextSelector(TabListContext, ctx => ctx.reserveSelectedTabSpace);\n  const listDisabled = useContextSelector(TabListContext, ctx => ctx.disabled);\n  const selected = useContextSelector(TabListContext, ctx => ctx.selectedValue === value);\n  const onRegister = useContextSelector(TabListContext, ctx => ctx.onRegister);\n  const onUnregister = useContextSelector(TabListContext, ctx => ctx.onUnregister);\n  const onSelect = useContextSelector(TabListContext, ctx => ctx.onSelect);\n  const size = useContextSelector(TabListContext, ctx => ctx.size);\n  const vertical = useContextSelector(TabListContext, ctx => !!ctx.vertical);\n  const disabled = listDisabled || tabDisabled;\n  const innerRef = React.useRef(null);\n  const onClick = useEventCallback(event => onSelect(event, {\n    value\n  }));\n  React.useEffect(() => {\n    onRegister({\n      value,\n      ref: innerRef\n    });\n    return () => {\n      onUnregister({\n        value,\n        ref: innerRef\n      });\n    };\n  }, [onRegister, onUnregister, innerRef, value]);\n  const iconShorthand = resolveShorthand(icon);\n  const contentShorthand = resolveShorthand(content, {\n    required: true,\n    defaultProps: {\n      children: props.children\n    }\n  });\n  return {\n    components: {\n      root: 'button',\n      icon: 'span',\n      content: 'span'\n    },\n    root: getNativeElementProps('button', {\n      ref: useMergedRefs(ref, innerRef),\n      role: 'tab',\n      type: 'button',\n      // aria-selected undefined indicates it is not selectable\n      // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected\n      'aria-selected': disabled ? undefined : `${selected}`,\n      ...props,\n      disabled,\n      onClick\n    }),\n    icon: iconShorthand,\n    iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !contentShorthand.children),\n    content: contentShorthand,\n    appearance,\n    contentReservedSpaceClassName: reserveSelectedTabSpace ? '' : undefined,\n    disabled,\n    selected,\n    size,\n    value,\n    vertical\n  };\n};","map":{"version":3,"mappings":"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","names":["React","getNativeElementProps","resolveShorthand","useEventCallback","useMergedRefs","TabListContext","useContextSelector","useTab_unstable","props","ref","content","disabled","tabDisabled","icon","value","appearance","ctx","reserveSelectedTabSpace","listDisabled","selected","selectedValue","onRegister","onUnregister","onSelect","size","vertical","innerRef","useRef","onClick","event","useEffect","iconShorthand","contentShorthand","required","defaultProps","children","components","root","role","type","undefined","iconOnly","Boolean","contentReservedSpaceClassName"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabs\\lib\\components\\src\\packages\\react-components\\react-tabs\\src\\components\\Tab\\useTab.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport type { TabProps, TabState } from './Tab.types';\nimport { TabListContext } from '../TabList/TabListContext';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { SelectTabEvent } from '../TabList/TabList.types';\n\n/**\n * Create the state required to render Tab.\n *\n * The returned state can be modified with hooks such as useTabStyles_unstable,\n * before being passed to renderTab_unstable.\n *\n * @param props - props from this instance of Tab\n * @param ref - reference to root HTMLElement of Tab\n */\nexport const useTab_unstable = (props: TabProps, ref: React.Ref<HTMLElement>): TabState => {\n  const { content, disabled: tabDisabled = false, icon, value } = props;\n\n  const appearance = useContextSelector(TabListContext, ctx => ctx.appearance);\n  const reserveSelectedTabSpace = useContextSelector(TabListContext, ctx => ctx.reserveSelectedTabSpace);\n  const listDisabled = useContextSelector(TabListContext, ctx => ctx.disabled);\n  const selected = useContextSelector(TabListContext, ctx => ctx.selectedValue === value);\n  const onRegister = useContextSelector(TabListContext, ctx => ctx.onRegister);\n  const onUnregister = useContextSelector(TabListContext, ctx => ctx.onUnregister);\n  const onSelect = useContextSelector(TabListContext, ctx => ctx.onSelect);\n  const size = useContextSelector(TabListContext, ctx => ctx.size);\n  const vertical = useContextSelector(TabListContext, ctx => !!ctx.vertical);\n  const disabled = listDisabled || tabDisabled;\n\n  const innerRef = React.useRef<HTMLElement>(null);\n  const onClick = useEventCallback((event: SelectTabEvent) => onSelect(event, { value }));\n\n  React.useEffect(() => {\n    onRegister({\n      value,\n      ref: innerRef,\n    });\n\n    return () => {\n      onUnregister({ value, ref: innerRef });\n    };\n  }, [onRegister, onUnregister, innerRef, value]);\n\n  const iconShorthand = resolveShorthand(icon);\n  const contentShorthand = resolveShorthand(content, { required: true, defaultProps: { children: props.children } });\n  return {\n    components: {\n      root: 'button',\n      icon: 'span',\n      content: 'span',\n    },\n    root: getNativeElementProps('button', {\n      ref: useMergedRefs(ref, innerRef),\n      role: 'tab',\n      type: 'button',\n      // aria-selected undefined indicates it is not selectable\n      // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected\n      'aria-selected': disabled ? undefined : `${selected}`,\n      ...props,\n      disabled,\n      onClick,\n    }),\n    icon: iconShorthand,\n    iconOnly: Boolean(iconShorthand?.children && !contentShorthand.children),\n    content: contentShorthand,\n    appearance,\n    contentReservedSpaceClassName: reserveSelectedTabSpace ? '' : undefined,\n    disabled,\n    selected,\n    size,\n    value,\n    vertical,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}