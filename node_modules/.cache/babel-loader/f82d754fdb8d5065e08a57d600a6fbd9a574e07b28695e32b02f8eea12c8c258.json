{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\nvar BrowserStringUtils = /** @class */function () {\n  function BrowserStringUtils() {}\n  /**\r\n   * Converts string to Uint8Array\r\n   * @param sDOMStr\r\n   */\n  BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {\n    var nChr;\n    var nArrLen = 0;\n    var nStrLen = sDOMStr.length;\n    /* mapping... */\n    for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n      nChr = sDOMStr.charCodeAt(nMapIdx);\n      nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\n    }\n    var aBytes = new Uint8Array(nArrLen);\n    /* transcription... */\n    for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n      nChr = sDOMStr.charCodeAt(nChrIdx);\n      if (nChr < 128) {\n        /* one byte */\n        aBytes[nIdx++] = nChr;\n      } else if (nChr < 0x800) {\n        /* two bytes */\n        aBytes[nIdx++] = 192 + (nChr >>> 6);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x10000) {\n        /* three bytes */\n        aBytes[nIdx++] = 224 + (nChr >>> 12);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x200000) {\n        /* four bytes */\n        aBytes[nIdx++] = 240 + (nChr >>> 18);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x4000000) {\n        /* five bytes */\n        aBytes[nIdx++] = 248 + (nChr >>> 24);\n        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else /* if (nChr <= 0x7fffffff) */{\n          /* six bytes */\n          aBytes[nIdx++] = 252 + (nChr >>> 30);\n          aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n          aBytes[nIdx++] = 128 + (nChr & 63);\n        }\n    }\n    return aBytes;\n  };\n  /**\r\n   * Converst string to ArrayBuffer\r\n   * @param dataString\r\n   */\n  BrowserStringUtils.stringToArrayBuffer = function (dataString) {\n    var data = new ArrayBuffer(dataString.length);\n    var dataView = new Uint8Array(data);\n    for (var i = 0; i < dataString.length; i++) {\n      dataView[i] = dataString.charCodeAt(i);\n    }\n    return data;\n  };\n  /**\r\n   * Converts Uint8Array to a string\r\n   * @param aBytes\r\n   */\n  BrowserStringUtils.utf8ArrToString = function (aBytes) {\n    var sView = Constants.EMPTY_STRING;\n    for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      nPart = aBytes[nIdx];\n      sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\n      /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n      (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\n      (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\n      (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\n      (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\n      (nPart - 192 << 6) + aBytes[++nIdx] - 128 : /* nPart < 127 ? */ /* one byte */\n      nPart);\n    }\n    return sView;\n  };\n  /**\r\n   * Returns stringified jwk.\r\n   * @param jwk\r\n   */\n  BrowserStringUtils.getSortedObjectString = function (obj) {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n  };\n  return BrowserStringUtils;\n}();\nexport { BrowserStringUtils };","map":{"version":3,"mappings":"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","names":["BrowserStringUtils","sDOMStr","nChr","nArrLen","nStrLen","length","nMapIdx","charCodeAt","aBytes","Uint8Array","nIdx","nChrIdx","dataString","data","ArrayBuffer","dataView","i","sView","Constants","EMPTY_STRING","nPart","nLen","String","fromCharCode","obj","JSON","stringify","Object","keys","sort"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserStringUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants } from \"@azure/msal-common\";\r\n\r\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class BrowserStringUtils {\r\n\r\n    /**\r\n     * Converts string to Uint8Array\r\n     * @param sDOMStr \r\n     */\r\n    static stringToUtf8Arr (sDOMStr: string): Uint8Array {\r\n        let nChr;\r\n        let nArrLen = 0;\r\n        const nStrLen = sDOMStr.length;\r\n        /* mapping... */\r\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nMapIdx);\r\n            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\r\n        }\r\n\r\n        const aBytes = new Uint8Array(nArrLen);\r\n\r\n        /* transcription... */\r\n\r\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nChrIdx);\r\n            if (nChr < 128) {\r\n                /* one byte */\r\n                aBytes[nIdx++] = nChr;\r\n            } else if (nChr < 0x800) {\r\n                /* two bytes */\r\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x10000) {\r\n                /* three bytes */\r\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x200000) {\r\n                /* four bytes */\r\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x4000000) {\r\n                /* five bytes */\r\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else /* if (nChr <= 0x7fffffff) */ {\r\n                /* six bytes */\r\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            }\r\n        }\r\n\r\n        return aBytes;      \r\n    }\r\n\r\n    /**\r\n     * Converst string to ArrayBuffer\r\n     * @param dataString \r\n     */\r\n    static stringToArrayBuffer(dataString: string): ArrayBuffer {\r\n        const data = new ArrayBuffer(dataString.length);\r\n        const dataView = new Uint8Array(data);\r\n        for (let i: number = 0; i < dataString.length; i++) {\r\n            dataView[i] = dataString.charCodeAt(i);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Converts Uint8Array to a string\r\n     * @param aBytes \r\n     */\r\n    static utf8ArrToString (aBytes: Uint8Array): string {\r\n        let sView = Constants.EMPTY_STRING;\r\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\r\n            nPart = aBytes[nIdx];\r\n            sView += String.fromCharCode(\r\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\r\n                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\r\n                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\r\n                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\r\n                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\r\n                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\r\n                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128\r\n                                    : /* nPart < 127 ? */ /* one byte */\r\n                                    nPart\r\n            );\r\n        }\r\n        return sView;\r\n    }\r\n\r\n    /**\r\n     * Returns stringified jwk.\r\n     * @param jwk \r\n     */\r\n    static getSortedObjectString(obj: object): string {\r\n        return JSON.stringify(obj, Object.keys(obj).sort());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}