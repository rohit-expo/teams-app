{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RegionDiscovery = /** @class */function () {\n  function RegionDiscovery(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3 /*break*/, 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 6,, 7]);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n          case 2:\n            localIMDSVersionResponse = _e.sent();\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            return [4 /*yield*/, this.getCurrentVersion(options)];\n          case 3:\n            currentIMDSVersion = _e.sent();\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2 /*return*/, null];\n            }\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\n          case 4:\n            currentIMDSVersionResponse = _e.sent();\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            _e.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            _e.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2 /*return*/, null];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _e.label = 9;\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n            return [2 /*return*/, autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n          case 2:\n            response = _b.sent();\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2 /*return*/, response.body[\"newest-versions\"][0]];\n            }\n            return [2 /*return*/, null];\n          case 3:\n            _b.sent();\n            return [2 /*return*/, null];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Options for the IMDS endpoint request\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\nexport { RegionDiscovery };","map":{"version":3,"mappings":"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","names":["networkInterface","performanceClient","correlationId","RegionDiscovery","environmentRegion","regionDiscoveryMetadata","addQueueMeasurement","PerformanceEvents","RegionDiscoveryDetectRegion","autodetectedRegionName","options","IMDS_OPTIONS","setPreQueueTime","RegionDiscoveryGetRegionFromIMDS","getRegionFromIMDS","Constants","IMDS_VERSION","localIMDSVersionResponse","_e","status","ResponseCodes","httpSuccess","body","region_source","RegionDiscoverySources","IMDS","httpBadRequest","RegionDiscoveryGetCurrentVersion","getCurrentVersion","currentIMDSVersion","FAILED_AUTO_DETECTION","currentIMDSVersionResponse","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","_b","length","headers","Metadata"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\authority\\RegionDiscovery.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\r\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\r\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\r\nimport { ImdsOptions } from \"./ImdsOptions\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\n\r\nexport class RegionDiscovery {\r\n    // Network interface to make requests with.\r\n    protected networkInterface: INetworkModule;\r\n    // Performance client\r\n    protected performanceClient: IPerformanceClient | undefined;\r\n    // CorrelationId\r\n    protected correlationId: string | undefined;\r\n    // Options for the IMDS endpoint request\r\n    protected static IMDS_OPTIONS: ImdsOptions = {\r\n        headers: {\r\n            Metadata: \"true\",\r\n        },\r\n    };\r\n\r\n    constructor(networkInterface: INetworkModule, performanceClient?: IPerformanceClient, correlationId?: string) {\r\n        this.networkInterface = networkInterface;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     * \r\n     * @returns Promise<string | null>\r\n     */\r\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata): Promise<string | null> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n        \r\n        // Initialize auto detected region with the region from the envrionment \r\n        let autodetectedRegionName = environmentRegion;\r\n\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \r\n        if (!autodetectedRegionName) {\r\n            const options = RegionDiscovery.IMDS_OPTIONS;\r\n\r\n            try {\r\n                this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION, options);\r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                } \r\n                \r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\r\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                    const currentIMDSVersion = await this.getCurrentVersion(options);\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n\r\n                    this.performanceClient?.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion, options);\r\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            } catch(e) {\r\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            } \r\n        } else {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n\r\n        return autodetectedRegionName || null;\r\n    }\r\n\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     * \r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    private async getRegionFromIMDS(version: string, options: ImdsOptions): Promise<NetworkResponse<string>> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *  \r\n     * @returns Promise<string | null>\r\n     */\r\n    private async getCurrentVersion(options: ImdsOptions): Promise<string | null> {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, options);\r\n\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}