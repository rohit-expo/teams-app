{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */\n\nexport const useAccordion_unstable = (props, ref) => {\n  const {\n    openItems: controlledOpenItems,\n    defaultOpenItems,\n    multiple = false,\n    collapsible = false,\n    onToggle,\n    navigation\n  } = props;\n  const [openItems, setOpenItems] = useControllableState({\n    state: React.useMemo(() => normalizeValues(controlledOpenItems), [controlledOpenItems]),\n    defaultState: () => initializeUncontrolledOpenItems({\n      defaultOpenItems,\n      multiple\n    }),\n    initialState: []\n  });\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: navigation === 'circular',\n    tabbable: true\n  });\n  const requestToggle = useEventCallback((event, data) => {\n    onToggle === null || onToggle === void 0 ? void 0 : onToggle(event, data);\n    setOpenItems(previousOpenItems => updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n  });\n  return {\n    collapsible,\n    navigation,\n    openItems,\n    requestToggle,\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      ...(navigation ? arrowNavigationProps : {}),\n      ref\n    })\n  };\n};\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\n\nfunction initializeUncontrolledOpenItems(_ref) {\n  let {\n    defaultOpenItems,\n    multiple\n  } = _ref;\n  if (defaultOpenItems !== undefined) {\n    if (Array.isArray(defaultOpenItems)) {\n      return multiple ? defaultOpenItems : [defaultOpenItems[0]];\n    }\n    return [defaultOpenItems];\n  }\n  return [];\n}\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */\n\nfunction updateOpenItems(value, previousOpenItems, multiple, collapsible) {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      if (previousOpenItems.length > 1 || collapsible) {\n        return previousOpenItems.filter(i => i !== value);\n      }\n    } else {\n      return [...previousOpenItems, value].sort();\n    }\n  } else {\n    return previousOpenItems[0] === value && collapsible ? [] : [value];\n  }\n  return previousOpenItems;\n}\n/**\n * Normalizes Accordion index into an array of indexes\n */\n\nfunction normalizeValues(index) {\n  if (index === undefined) {\n    return undefined;\n  }\n  return Array.isArray(index) ? index : [index];\n}","map":{"version":3,"mappings":"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","names":["React","getNativeElementProps","useControllableState","useEventCallback","useArrowNavigationGroup","useAccordion_unstable","props","ref","openItems","controlledOpenItems","defaultOpenItems","multiple","collapsible","onToggle","navigation","setOpenItems","state","useMemo","normalizeValues","defaultState","initializeUncontrolledOpenItems","initialState","arrowNavigationProps","circular","tabbable","requestToggle","event","data","previousOpenItems","updateOpenItems","value","components","root","undefined","Array","isArray","includes","length","filter","i","sort","index"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-accordion\\lib\\components\\src\\packages\\react-components\\react-accordion\\src\\components\\Accordion\\useAccordion.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type { AccordionProps, AccordionState, AccordionToggleData, AccordionToggleEvent } from './Accordion.types';\nimport type { AccordionItemValue } from '../AccordionItem/AccordionItem.types';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */\nexport const useAccordion_unstable = (props: AccordionProps, ref: React.Ref<HTMLElement>): AccordionState => {\n  const {\n    openItems: controlledOpenItems,\n    defaultOpenItems,\n    multiple = false,\n    collapsible = false,\n    onToggle,\n    navigation,\n  } = props;\n  const [openItems, setOpenItems] = useControllableState({\n    state: React.useMemo(() => normalizeValues(controlledOpenItems), [controlledOpenItems]),\n    defaultState: () => initializeUncontrolledOpenItems({ defaultOpenItems, multiple }),\n    initialState: [],\n  });\n\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: navigation === 'circular',\n    tabbable: true,\n  });\n\n  const requestToggle = useEventCallback((event: AccordionToggleEvent, data: AccordionToggleData) => {\n    onToggle?.(event, data);\n    setOpenItems(previousOpenItems => updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n  });\n\n  return {\n    collapsible,\n    navigation,\n    openItems,\n    requestToggle,\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      ...(navigation ? arrowNavigationProps : {}),\n      ref,\n    }),\n  };\n};\n\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenItems({\n  defaultOpenItems,\n  multiple,\n}: Pick<AccordionProps, 'defaultOpenItems' | 'multiple'>): AccordionItemValue[] {\n  if (defaultOpenItems !== undefined) {\n    if (Array.isArray(defaultOpenItems)) {\n      return multiple ? defaultOpenItems : [defaultOpenItems[0]];\n    }\n    return [defaultOpenItems];\n  }\n  return [];\n}\n\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */\nfunction updateOpenItems(\n  value: AccordionItemValue,\n  previousOpenItems: AccordionItemValue[],\n  multiple: boolean,\n  collapsible: boolean,\n) {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      if (previousOpenItems.length > 1 || collapsible) {\n        return previousOpenItems.filter(i => i !== value);\n      }\n    } else {\n      return [...previousOpenItems, value].sort();\n    }\n  } else {\n    return previousOpenItems[0] === value && collapsible ? [] : [value];\n  }\n  return previousOpenItems;\n}\n\n/**\n * Normalizes Accordion index into an array of indexes\n */\nfunction normalizeValues(index?: AccordionItemValue | AccordionItemValue[]): AccordionItemValue[] | undefined {\n  if (index === undefined) {\n    return undefined;\n  }\n  return Array.isArray(index) ? index : [index];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}