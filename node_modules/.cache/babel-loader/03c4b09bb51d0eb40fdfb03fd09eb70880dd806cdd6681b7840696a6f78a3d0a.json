{"ast":null,"code":"import { getPartitionedNativeProps, resolveShorthand, useControllableState, useEventCallback } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Input.\n *\n * The returned state can be modified with hooks such as useInputStyles_unstable,\n * before being passed to renderInput_unstable.\n *\n * @param props - props from this instance of Input\n * @param ref - reference to `<input>` element of Input\n */\n\nexport const useInput_unstable = (props, ref) => {\n  const {\n    size = 'medium',\n    appearance = 'outline',\n    onChange\n  } = props;\n  if (process.env.NODE_ENV !== 'production' && (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')) {\n    // eslint-disable-next-line no-console\n    console.error(\"The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the\" + ' future.');\n  }\n  const [value, setValue] = useControllableState({\n    state: props.value,\n    defaultState: props.defaultValue,\n    initialState: ''\n  });\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['size', 'onChange', 'value', 'defaultValue']\n  });\n  const state = {\n    size,\n    appearance,\n    components: {\n      root: 'span',\n      input: 'input',\n      contentBefore: 'span',\n      contentAfter: 'span'\n    },\n    input: resolveShorthand(props.input, {\n      required: true,\n      defaultProps: {\n        type: 'text',\n        ref,\n        ...nativeProps.primary\n      }\n    }),\n    contentAfter: resolveShorthand(props.contentAfter),\n    contentBefore: resolveShorthand(props.contentBefore),\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: nativeProps.root\n    })\n  };\n  state.input.value = value;\n  state.input.onChange = useEventCallback(ev => {\n    const newValue = ev.target.value;\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, {\n      value: newValue\n    });\n    setValue(newValue);\n  });\n  return state;\n};","map":{"version":3,"mappings":"AACA,SACEA,yBADF,EAEEC,gBAFF,EAGEC,oBAHF,EAIEC,gBAJF,QAKO,2BALP;AAQA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAoBC,GAApB,KAAoE;EACnG,MAAM;IAAEC,IAAI,GAAG,QAAT;IAAmBC,UAAU,GAAG,SAAhC;IAA2CC;EAA3C,IAAwDJ,KAA9D;EAEA,IACEK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,KACCJ,UAAU,KAAK,sBAAf,IAAyCA,UAAU,KAAK,uBADzD,CADF,EAGE;IACA;IACAK,OAAO,CAACC,KAAR,CACE,iHACE,UAFJ;EAID;EAED,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,oBAAoB,CAAC;IAC7Ce,KAAK,EAAEZ,KAAK,CAACU,KADgC;IAE7CG,YAAY,EAAEb,KAAK,CAACc,YAFyB;IAG7CC,YAAY,EAAE;EAH+B,CAAD,CAA9C;EAMA,MAAMC,WAAW,GAAGrB,yBAAyB,CAAC;IAC5CK,KAD4C;IAE5CiB,kBAAkB,EAAE,OAFwB;IAG5CC,iBAAiB,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAA8B,cAA9B;EAHyB,CAAD,CAA7C;EAMA,MAAMN,KAAK,GAAe;IACxBV,IADwB;IAExBC,UAFwB;IAGxBgB,UAAU,EAAE;MACVC,IAAI,EAAE,MADI;MAEVC,KAAK,EAAE,OAFG;MAGVC,aAAa,EAAE,MAHL;MAIVC,YAAY,EAAE;IAJJ,CAHY;IASxBF,KAAK,EAAEzB,gBAAgB,CAACI,KAAK,CAACqB,KAAP,EAAc;MACnCG,QAAQ,EAAE,IADyB;MAEnCC,YAAY,EAAE;QACZC,IAAI,EAAE,MADM;QAEZzB,GAFY;QAGZ,GAAGe,WAAW,CAACW;MAHH;IAFqB,CAAd,CATC;IAiBxBJ,YAAY,EAAE3B,gBAAgB,CAACI,KAAK,CAACuB,YAAP,CAjBN;IAkBxBD,aAAa,EAAE1B,gBAAgB,CAACI,KAAK,CAACsB,aAAP,CAlBP;IAmBxBF,IAAI,EAAExB,gBAAgB,CAACI,KAAK,CAACoB,IAAP,EAAa;MACjCI,QAAQ,EAAE,IADuB;MAEjCC,YAAY,EAAET,WAAW,CAACI;IAFO,CAAb;EAnBE,CAA1B;EAyBAR,KAAK,CAACS,KAAN,CAAYX,KAAZ,GAAoBA,KAApB;EACAE,KAAK,CAACS,KAAN,CAAYjB,QAAZ,GAAuBN,gBAAgB,CAAC8B,EAAE,IAAG;IAC3C,MAAMC,QAAQ,GAAGD,EAAE,CAACE,MAAH,CAAUpB,KAA3B;IACAN,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGwB,EAAH,EAAO;MAAElB,KAAK,EAAEmB;IAAT,CAAP,CAAR;IACAlB,QAAQ,CAACkB,QAAD,CAAR;EACD,CAJsC,CAAvC;EAMA,OAAOjB,KAAP;AACD,CA3DM","names":["getPartitionedNativeProps","resolveShorthand","useControllableState","useEventCallback","useInput_unstable","props","ref","size","appearance","onChange","process","env","NODE_ENV","console","error","value","setValue","state","defaultState","defaultValue","initialState","nativeProps","primarySlotTagName","excludedPropNames","components","root","input","contentBefore","contentAfter","required","defaultProps","type","primary","ev","newValue","target"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-input\\lib\\components\\src\\packages\\react-components\\react-input\\src\\components\\Input\\useInput.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  getPartitionedNativeProps,\n  resolveShorthand,\n  useControllableState,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport type { InputProps, InputState } from './Input.types';\n\n/**\n * Create the state required to render Input.\n *\n * The returned state can be modified with hooks such as useInputStyles_unstable,\n * before being passed to renderInput_unstable.\n *\n * @param props - props from this instance of Input\n * @param ref - reference to `<input>` element of Input\n */\nexport const useInput_unstable = (props: InputProps, ref: React.Ref<HTMLInputElement>): InputState => {\n  const { size = 'medium', appearance = 'outline', onChange } = props;\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      \"The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the\" +\n        ' future.',\n    );\n  }\n\n  const [value, setValue] = useControllableState({\n    state: props.value,\n    defaultState: props.defaultValue,\n    initialState: '',\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['size', 'onChange', 'value', 'defaultValue'],\n  });\n\n  const state: InputState = {\n    size,\n    appearance,\n    components: {\n      root: 'span',\n      input: 'input',\n      contentBefore: 'span',\n      contentAfter: 'span',\n    },\n    input: resolveShorthand(props.input, {\n      required: true,\n      defaultProps: {\n        type: 'text',\n        ref,\n        ...nativeProps.primary,\n      },\n    }),\n    contentAfter: resolveShorthand(props.contentAfter),\n    contentBefore: resolveShorthand(props.contentBefore),\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: nativeProps.root,\n    }),\n  };\n\n  state.input.value = value;\n  state.input.onChange = useEventCallback(ev => {\n    const newValue = ev.target.value;\n    onChange?.(ev, { value: newValue });\n    setValue(newValue);\n  });\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}