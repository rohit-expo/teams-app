{"ast":null,"code":"import * as React from 'react';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport { getNativeElementProps, useControllableState, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\n/**\n * Create the state required to render TabList.\n *\n * The returned state can be modified with hooks such as useTabListStyles_unstable,\n * before being passed to renderTabList_unstable.\n *\n * @param props - props from this instance of TabList\n * @param ref - reference to root HTMLElement of TabList\n */\n\nexport const useTabList_unstable = (props, ref) => {\n  const {\n    appearance = 'transparent',\n    reserveSelectedTabSpace = true,\n    disabled = false,\n    onTabSelect,\n    size = 'medium',\n    vertical = false\n  } = props;\n  const innerRef = React.useRef(null);\n  const focusAttributes = useArrowNavigationGroup({\n    circular: true,\n    axis: vertical ? 'vertical' : 'horizontal',\n    memorizeCurrent: true\n  });\n  const [selectedValue, setSelectedValue] = useControllableState({\n    state: props.selectedValue,\n    defaultState: props.defaultSelectedValue,\n    initialState: undefined\n  }); // considered usePrevious, but it is sensitive to re-renders\n  // this could cause the previous to move to current in the case where the tab list re-renders.\n  // these refs avoid getRegisteredTabs changing when selectedValue changes and causing\n  // renders for tabs that have not changed.\n\n  const currentSelectedValue = React.useRef(undefined);\n  const previousSelectedValue = React.useRef(undefined);\n  React.useEffect(() => {\n    previousSelectedValue.current = currentSelectedValue.current;\n    currentSelectedValue.current = selectedValue;\n  }, [selectedValue]);\n  const onSelect = useEventCallback((event, data) => {\n    setSelectedValue(data.value);\n    onTabSelect === null || onTabSelect === void 0 ? void 0 : onTabSelect(event, data);\n  });\n  const registeredTabs = React.useRef({});\n  const onRegister = useEventCallback(data => {\n    registeredTabs.current[JSON.stringify(data.value)] = data;\n  });\n  const onUnregister = useEventCallback(data => {\n    delete registeredTabs.current[JSON.stringify(data.value)];\n  });\n  const getRegisteredTabs = React.useCallback(() => {\n    return {\n      selectedValue: currentSelectedValue.current,\n      previousSelectedValue: previousSelectedValue.current,\n      registeredTabs: registeredTabs.current\n    };\n  }, []);\n  return {\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ref: useMergedRefs(ref, innerRef),\n      role: 'tablist',\n      ...focusAttributes,\n      ...props\n    }),\n    appearance,\n    reserveSelectedTabSpace,\n    disabled,\n    selectedValue,\n    size,\n    vertical,\n    onRegister,\n    onUnregister,\n    onSelect,\n    getRegisteredTabs\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useArrowNavigationGroup","getNativeElementProps","useControllableState","useEventCallback","useMergedRefs","useTabList_unstable","props","ref","appearance","reserveSelectedTabSpace","disabled","onTabSelect","size","vertical","innerRef","useRef","focusAttributes","circular","axis","memorizeCurrent","selectedValue","setSelectedValue","state","defaultState","defaultSelectedValue","initialState","undefined","currentSelectedValue","previousSelectedValue","useEffect","current","onSelect","event","data","value","registeredTabs","onRegister","JSON","stringify","onUnregister","getRegisteredTabs","useCallback","components","root","role"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabs\\lib\\components\\src\\packages\\react-components\\react-tabs\\src\\components\\TabList\\useTabList.ts"],"sourcesContent":["import * as React from 'react';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport {\n  getNativeElementProps,\n  useControllableState,\n  useEventCallback,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport type { TabRegisterData, SelectTabData, SelectTabEvent, TabListProps, TabListState } from './TabList.types';\nimport { TabValue } from '../Tab/Tab.types';\n\n/**\n * Create the state required to render TabList.\n *\n * The returned state can be modified with hooks such as useTabListStyles_unstable,\n * before being passed to renderTabList_unstable.\n *\n * @param props - props from this instance of TabList\n * @param ref - reference to root HTMLElement of TabList\n */\nexport const useTabList_unstable = (props: TabListProps, ref: React.Ref<HTMLElement>): TabListState => {\n  const {\n    appearance = 'transparent',\n    reserveSelectedTabSpace = true,\n    disabled = false,\n    onTabSelect,\n    size = 'medium',\n    vertical = false,\n  } = props;\n\n  const innerRef = React.useRef<HTMLElement>(null);\n\n  const focusAttributes = useArrowNavigationGroup({\n    circular: true,\n    axis: vertical ? 'vertical' : 'horizontal',\n    memorizeCurrent: true,\n  });\n\n  const [selectedValue, setSelectedValue] = useControllableState({\n    state: props.selectedValue,\n    defaultState: props.defaultSelectedValue,\n    initialState: undefined,\n  });\n\n  // considered usePrevious, but it is sensitive to re-renders\n  // this could cause the previous to move to current in the case where the tab list re-renders.\n  // these refs avoid getRegisteredTabs changing when selectedValue changes and causing\n  // renders for tabs that have not changed.\n  const currentSelectedValue = React.useRef<TabValue | undefined>(undefined);\n  const previousSelectedValue = React.useRef<TabValue | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousSelectedValue.current = currentSelectedValue.current;\n    currentSelectedValue.current = selectedValue;\n  }, [selectedValue]);\n\n  const onSelect = useEventCallback((event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedValue(data.value);\n    onTabSelect?.(event, data);\n  });\n\n  const registeredTabs = React.useRef<Record<string, TabRegisterData>>({});\n\n  const onRegister = useEventCallback((data: TabRegisterData) => {\n    registeredTabs.current[JSON.stringify(data.value)] = data;\n  });\n\n  const onUnregister = useEventCallback((data: TabRegisterData) => {\n    delete registeredTabs.current[JSON.stringify(data.value)];\n  });\n\n  const getRegisteredTabs = React.useCallback(() => {\n    return {\n      selectedValue: currentSelectedValue.current,\n      previousSelectedValue: previousSelectedValue.current,\n      registeredTabs: registeredTabs.current,\n    };\n  }, []);\n\n  return {\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ref: useMergedRefs(ref, innerRef),\n      role: 'tablist',\n      ...focusAttributes,\n      ...props,\n    }),\n    appearance,\n    reserveSelectedTabSpace,\n    disabled,\n    selectedValue,\n    size,\n    vertical,\n    onRegister,\n    onUnregister,\n    onSelect,\n    getRegisteredTabs,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}