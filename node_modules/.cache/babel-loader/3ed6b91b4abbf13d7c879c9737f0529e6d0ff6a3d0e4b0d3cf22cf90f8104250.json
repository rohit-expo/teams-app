{"ast":null,"code":"import { Enter, Space } from '@fluentui/keyboard-keys';\n/**\n * The useLinkState_unstable hook processes the Link state.\n * @param state - Link state to mutate.\n */\n\nexport const useLinkState_unstable = state => {\n  const {\n    disabled,\n    disabledFocusable\n  } = state;\n  const {\n    onClick,\n    onKeyDown,\n    role,\n    type\n  } = state.root; // Add href and tabIndex=0 for anchor elements.\n\n  if (state.root.as === 'a') {\n    state.root.href = disabled ? undefined : state.root.href;\n    state.root.tabIndex = disabled && !disabledFocusable ? undefined : 0; // Add role=\"link\" for disabled and disabledFocusable links.\n\n    if (disabled || disabledFocusable) {\n      state.root.role = role || 'link';\n    }\n  } // Add type=\"button\" for button elements.\n  else {\n    state.root.type = type || 'button';\n  } // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.\n\n  state.root.onClick = ev => {\n    if (disabled || disabledFocusable) {\n      ev.preventDefault();\n    } else {\n      onClick === null || onClick === void 0 ? void 0 : onClick(ev);\n    }\n  }; // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.\n\n  state.root.onKeyDown = ev => {\n    if ((disabled || disabledFocusable) && (ev.key === Enter || ev.key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);\n    }\n  }; // Set the aria-disabled and disabled props correctly.\n\n  state.disabled = disabled || disabledFocusable;\n  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;\n  if (state.root.as === 'button') {\n    state.root.disabled = disabled && !disabledFocusable;\n  }\n  return state;\n};","map":{"version":3,"mappings":"AACA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,yBAA7B;AAGA;;;AAGG;;AACH,OAAO,MAAMC,qBAAqB,GAAIC,KAAD,IAAgC;EACnE,MAAM;IAAEC,QAAF;IAAYC;EAAZ,IAAkCF,KAAxC;EACA,MAAM;IAAEG,OAAF;IAAWC,SAAX;IAAsBC,IAAtB;IAA4BC;EAA5B,IAAqCN,KAAK,CAACO,IAAjD,CAFmE,CAInE;;EACA,IAAIP,KAAK,CAACO,IAAN,CAAWC,EAAX,KAAkB,GAAtB,EAA2B;IACzBR,KAAK,CAACO,IAAN,CAAWE,IAAX,GAAkBR,QAAQ,GAAGS,SAAH,GAAeV,KAAK,CAACO,IAAN,CAAWE,IAApD;IACAT,KAAK,CAACO,IAAN,CAAWI,QAAX,GAAsBV,QAAQ,IAAI,CAACC,iBAAb,GAAiCQ,SAAjC,GAA6C,CAAnE,CAFyB,CAIzB;;IACA,IAAIT,QAAQ,IAAIC,iBAAhB,EAAmC;MACjCF,KAAK,CAACO,IAAN,CAAWF,IAAX,GAAkBA,IAAI,IAAI,MAA1B;IACD;EACF,CARD,CASA;EAAA,KACK;IACHL,KAAK,CAACO,IAAN,CAAWD,IAAX,GAAkBA,IAAI,IAAI,QAA1B;EACD,CAjBkE,CAmBnE;;EACAN,KAAK,CAACO,IAAN,CAAWJ,OAAX,GAAsBS,EAAD,IAAgE;IACnF,IAAIX,QAAQ,IAAIC,iBAAhB,EAAmC;MACjCU,EAAE,CAACC,cAAH;IACD,CAFD,MAEO;MACLV,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAGS,EAAH,CAAP;IACD;EACF,CAND,CApBmE,CA4BnE;;EACAZ,KAAK,CAACO,IAAN,CAAWH,SAAX,GAAwBQ,EAAD,IAAmE;IACxF,IAAI,CAACX,QAAQ,IAAIC,iBAAb,MAAoCU,EAAE,CAACE,GAAH,KAAWjB,KAAX,IAAoBe,EAAE,CAACE,GAAH,KAAWhB,KAAnE,CAAJ,EAA+E;MAC7Ec,EAAE,CAACC,cAAH;MACAD,EAAE,CAACG,eAAH;IACD,CAHD,MAGO;MACLX,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAGQ,EAAH,CAAT;IACD;EACF,CAPD,CA7BmE,CAsCnE;;EACAZ,KAAK,CAACC,QAAN,GAAiBA,QAAQ,IAAIC,iBAA7B;EACAF,KAAK,CAACO,IAAN,CAAW,eAAX,IAA8BN,QAAQ,IAAIC,iBAAZ,IAAiCQ,SAA/D;EACA,IAAIV,KAAK,CAACO,IAAN,CAAWC,EAAX,KAAkB,QAAtB,EAAgC;IAC9BR,KAAK,CAACO,IAAN,CAAWN,QAAX,GAAsBA,QAAQ,IAAI,CAACC,iBAAnC;EACD;EAED,OAAOF,KAAP;AACD,CA9CM","names":["Enter","Space","useLinkState_unstable","state","disabled","disabledFocusable","onClick","onKeyDown","role","type","root","as","href","undefined","tabIndex","ev","preventDefault","key","stopPropagation"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-link\\lib\\components\\src\\packages\\react-components\\react-link\\src\\components\\Link\\useLinkState.ts"],"sourcesContent":["import * as React from 'react';\nimport { Enter, Space } from '@fluentui/keyboard-keys';\nimport type { LinkState } from './Link.types';\n\n/**\n * The useLinkState_unstable hook processes the Link state.\n * @param state - Link state to mutate.\n */\nexport const useLinkState_unstable = (state: LinkState): LinkState => {\n  const { disabled, disabledFocusable } = state;\n  const { onClick, onKeyDown, role, type } = state.root;\n\n  // Add href and tabIndex=0 for anchor elements.\n  if (state.root.as === 'a') {\n    state.root.href = disabled ? undefined : state.root.href;\n    state.root.tabIndex = disabled && !disabledFocusable ? undefined : 0;\n\n    // Add role=\"link\" for disabled and disabledFocusable links.\n    if (disabled || disabledFocusable) {\n      state.root.role = role || 'link';\n    }\n  }\n  // Add type=\"button\" for button elements.\n  else {\n    state.root.type = type || 'button';\n  }\n\n  // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onClick = (ev: React.MouseEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if (disabled || disabledFocusable) {\n      ev.preventDefault();\n    } else {\n      onClick?.(ev);\n    }\n  };\n\n  // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onKeyDown = (ev: React.KeyboardEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if ((disabled || disabledFocusable) && (ev.key === Enter || ev.key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onKeyDown?.(ev);\n    }\n  };\n\n  // Set the aria-disabled and disabled props correctly.\n  state.disabled = disabled || disabledFocusable;\n  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;\n  if (state.root.as === 'button') {\n    state.root.disabled = disabled && !disabledFocusable;\n  }\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}