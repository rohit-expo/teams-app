{"ast":null,"code":"import { fromFloatingUIPlacement } from './fromFloatingUIPlacement';\n/**\n * Shim to transform offset values from this library to Floating UI\n * @param rawOffset Offset from this library\n * @returns An offset value compatible with Floating UI\n */\n\nexport function getFloatingUIOffset(rawOffset) {\n  if (!rawOffset) {\n    return rawOffset;\n  }\n  if (typeof rawOffset === 'number' || typeof rawOffset === 'object') {\n    return rawOffset;\n  }\n  return _ref => {\n    let {\n      rects: {\n        floating,\n        reference\n      },\n      placement\n    } = _ref;\n    const {\n      position,\n      alignment\n    } = fromFloatingUIPlacement(placement);\n    return rawOffset({\n      positionedRect: floating,\n      targetRect: reference,\n      position,\n      alignment\n    });\n  };\n}","map":{"version":3,"mappings":"AAEA,SAASA,uBAAT,QAAwC,2BAAxC;AAgCA;;;;AAIG;;AACH,OAAM,SAAUC,mBAAV,CACJC,SADI,EACyB;EAE7B,IAAI,CAACA,SAAL,EAAgB;IACd,OAAOA,SAAP;EACD;EAED,IAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QAA1D,EAAoE;IAClE,OAAOA,SAAP;EACD;EAED,OAAO,QAAkD;IAAA,IAAjD;MAAEC,KAAK,EAAE;QAAEC,QAAF;QAAYC;MAAZ,CAAT;MAAkCC;IAAlC,CAAD;IACL,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAA0BR,uBAAuB,CAACM,SAAD,CAAvD;IACA,OAAOJ,SAAS,CAAC;MAAEO,cAAc,EAAEL,QAAlB;MAA4BM,UAAU,EAAEL,SAAxC;MAAmDE,QAAnD;MAA6DC;IAA7D,CAAD,CAAhB;EACD,CAHD;AAID","names":["fromFloatingUIPlacement","getFloatingUIOffset","rawOffset","rects","floating","reference","placement","position","alignment","positionedRect","targetRect"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-positioning\\lib\\src\\packages\\react-components\\react-positioning\\src\\utils\\getFloatingUIOffset.ts"],"sourcesContent":["import type { Offset } from '../types';\nimport type { MiddlewareArguments } from '@floating-ui/dom';\nimport { fromFloatingUIPlacement } from './fromFloatingUIPlacement';\n/**\n * Type taken from Floating UI since they are not exported\n */\nexport type FloatingUIOffsetValue =\n  | number\n  | {\n      /**\n       * The axis that runs along the side of the floating element.\n       * @default 0\n       */\n      mainAxis?: number;\n      /**\n       * The axis that runs along the alignment of the floating element.\n       * @default 0\n       */\n      crossAxis?: number;\n      /**\n       * When set to a number, overrides the `crossAxis` value for aligned\n       * (non-centered/base) placements and works logically. A positive number\n       * will move the floating element in the direction of the opposite edge\n       * to the one that is aligned, while a negative number the reverse.\n       * @default null\n       */\n      alignmentAxis?: number | null;\n    };\n\n/**\n * Type taken from Floating UI since they are not exported\n */\nexport type FloatingUIOffsetFunction = (args: MiddlewareArguments) => FloatingUIOffsetValue;\n\n/**\n * Shim to transform offset values from this library to Floating UI\n * @param rawOffset Offset from this library\n * @returns An offset value compatible with Floating UI\n */\nexport function getFloatingUIOffset(\n  rawOffset: Offset | undefined,\n): FloatingUIOffsetValue | FloatingUIOffsetFunction | undefined {\n  if (!rawOffset) {\n    return rawOffset;\n  }\n\n  if (typeof rawOffset === 'number' || typeof rawOffset === 'object') {\n    return rawOffset;\n  }\n\n  return ({ rects: { floating, reference }, placement }) => {\n    const { position, alignment } = fromFloatingUIPlacement(placement);\n    return rawOffset({ positionedRect: floating, targetRect: reference, position, alignment });\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}