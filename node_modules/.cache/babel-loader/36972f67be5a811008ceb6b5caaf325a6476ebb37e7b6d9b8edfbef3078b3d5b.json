{"ast":null,"code":"var _jsxFileName = \"D:\\\\teams-app\\\\qlik2\\\\Microsoft-Teams-Samples\\\\samples\\\\tab-personal-sso-quickstart\\\\js\\\\src\\\\components\\\\Tab.js\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport { app, authentication } from \"@microsoft/teams-js\";\nimport { Avatar, Spinner } from '@fluentui/react-components';\n\n/**\r\n * The 'PersonalTab' component renders the main tab content\r\n * of your app.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Tab extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ssoLoginSuccess = async result => {\n      this.setState({\n        ssoToken: result\n      });\n      this.exchangeClientTokenForServerToken(result);\n    };\n    this.exchangeClientTokenForServerToken = async token => {\n      let serverURL = `${process.env.REACT_APP_BASE_URL}/getGraphAccessToken?ssoToken=${token}&upn=${this.state.context.user.userPrincipalName}`;\n      let response = await fetch(serverURL).catch(this.unhandledFetchError); //This calls getGraphAccessToken route in /api-server/app.js\n      let data = await response.json().catch(this.unhandledFetchError);\n      if (!response.ok && data.error === 'consent_required') {\n        //A consent_required error means it's the first time a user is logging into to the app, so they must consent to sharing their Graph data with the app.\n        //They may also see this error if MFA is required.\n        this.setState({\n          consentRequired: true\n        }); //This displays the consent required message.\n        this.showConsentDialog(); //Proceed to show the consent dialogue.\n      } else if (!response.ok) {\n        //Unknown error\n        console.error(data);\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          photo: data //Convert binary data to an image URL and set the url in state\n        });\n      }\n    };\n    this.componentDidUpdate = async (prevProps, prevState) => {\n      //Check to see if a Graph access token is now in state AND that it didn't exist previously\n      if (prevState.graphAccessToken === \"\" && this.state.graphAccessToken !== \"\") {\n        this.callGraphFromClient();\n      }\n    };\n    this.callGraphFromClient = async () => {\n      let upn = this.state.context.user.userPrincipalName;\n      let graphPhotoEndpoint = `https://graph.microsoft.com/v1.0/users/${upn}/photo/$value`;\n      let graphRequestParams = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'image/jpg',\n          \"authorization\": \"bearer \" + this.state.graphAccessToken\n        }\n      };\n      let response = await fetch(graphPhotoEndpoint, graphRequestParams).catch(this.unhandledFetchError);\n      if (!response.ok) {\n        console.error(\"ERROR: \", response);\n        this.setState({\n          error: true\n        });\n      }\n      let imageBlog = await response.blob().catch(this.unhandledFetchError); //Get image data as raw binary data\n\n      this.setState({\n        photo: URL.createObjectURL(imageBlog) //Convert binary data to an image URL and set the url in state\n      });\n    };\n    this.state = {\n      context: {},\n      ssoToken: \"\",\n      consentRequired: false,\n      consentProvided: false,\n      graphAccessToken: \"\",\n      photo: \"\",\n      error: false\n    };\n\n    //Bind any functions that need to be passed as callbacks or used to React components\n    this.ssoLoginSuccess = this.ssoLoginSuccess.bind(this);\n    this.ssoLoginFailure = this.ssoLoginFailure.bind(this);\n    this.consentSuccess = this.consentSuccess.bind(this);\n    this.consentFailure = this.consentFailure.bind(this);\n    this.unhandledFetchError = this.unhandledFetchError.bind(this);\n    this.callGraphFromClient = this.callGraphFromClient.bind(this);\n    this.showConsentDialog = this.showConsentDialog.bind(this);\n  }\n\n  //React lifecycle method that gets called once a component has finished mounting\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidmount\n  componentDidMount() {\n    // Initialize the Microsoft Teams SDK\n    app.initialize().then(() => {\n      // Get the user context from Teams and set it in the state\n      app.getContext().then(context => {\n        this.setState({\n          context: context\n        });\n      });\n      authentication.getAuthToken().then(result => {\n        this.ssoLoginSuccess(result);\n      }).catch(error => {\n        this.ssoLoginFailure(error);\n      });\n    });\n  }\n  ssoLoginFailure(error) {\n    console.error(\"SSO failed: \", error);\n    this.setState({\n      error: true\n    });\n  }\n\n  //Exchange the SSO access token for a Graph access token\n  //Learn more: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow\n\n  //Show a popup dialogue prompting the user to consent to the required API permissions. This opens ConsentPopup.js.\n  //Learn more: https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-tab-aad#initiate-authentication-flow\n  showConsentDialog() {\n    authentication.authenticate({\n      url: window.location.origin + \"/auth-start\",\n      width: 600,\n      height: 535\n    }).then(result => {\n      this.consentSuccess(result);\n    }).catch(error => {\n      this.consentFailure(error);\n    });\n  }\n\n  //Callback function for a successful authorization\n  consentSuccess(result) {\n    //Save the Graph access token in state\n    this.setState({\n      consentProvided: true\n    });\n    authentication.getAuthToken().then(result => {\n      this.ssoLoginSuccess(result);\n    }).catch(error => {\n      this.ssoLoginFailure(error);\n    });\n  }\n  consentFailure(reason) {\n    console.error(\"Consent failed: \", reason);\n    this.setState({\n      error: true\n    });\n  }\n\n  //React lifecycle method that gets called after a component's state or props updates\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidupdate\n\n  //Generic error handler ( avoids having to do async fetch in try/catch block )\n  unhandledFetchError(err) {\n    console.error(\"Unhandled fetch error: \", err);\n    this.setState({\n      error: true\n    });\n  }\n  render() {\n    let title = Object.keys(this.state.context).length > 0 ? 'Congratulations ' + this.state.context.user.userPrincipalName + '! This is your tab' : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 95\n    }, this);\n    let ssoMessage = this.state.ssoToken === \"\" ? /*#__PURE__*/_jsxDEV(Spinner, {\n      label: \"Performing Azure AD single sign-on authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this) : null;\n    let serverExchangeMessage = this.state.ssoToken !== \"\" && !this.state.consentRequired && this.state.photo === \"\" ? /*#__PURE__*/_jsxDEV(Spinner, {\n      label: \"Exchanging SSO access token for Graph access token...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this) : null;\n    let consentMessage = this.state.consentRequired && !this.state.consentProvided ? /*#__PURE__*/_jsxDEV(Spinner, {\n      label: \"Consent required.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this) : null;\n    let content;\n    if (this.state.error) {\n      content = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ERROR: Please ensure pop-ups are allowed for this website and retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this);\n    } else {\n      content = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: ssoMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: serverExchangeMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: consentMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.state.photo,\n          width: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Tab;","map":{"version":3,"names":["React","app","authentication","Avatar","Spinner","Tab","Component","constructor","props","ssoLoginSuccess","result","setState","ssoToken","exchangeClientTokenForServerToken","token","serverURL","process","env","REACT_APP_BASE_URL","state","context","user","userPrincipalName","response","fetch","catch","unhandledFetchError","data","json","ok","error","consentRequired","showConsentDialog","console","photo","componentDidUpdate","prevProps","prevState","graphAccessToken","callGraphFromClient","upn","graphPhotoEndpoint","graphRequestParams","method","headers","imageBlog","blob","URL","createObjectURL","consentProvided","bind","ssoLoginFailure","consentSuccess","consentFailure","componentDidMount","initialize","then","getContext","getAuthToken","authenticate","url","window","location","origin","width","height","reason","err","render","title","Object","keys","length","ssoMessage","serverExchangeMessage","consentMessage","content"],"sources":["D:/teams-app/qlik2/Microsoft-Teams-Samples/samples/tab-personal-sso-quickstart/js/src/components/Tab.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport React from 'react';\r\nimport './App.css';\r\nimport { app, authentication } from \"@microsoft/teams-js\";\r\nimport { Avatar, Spinner } from '@fluentui/react-components'\r\n\r\n/**\r\n * The 'PersonalTab' component renders the main tab content\r\n * of your app.\r\n */\r\nclass Tab extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      context: {},\r\n      ssoToken: \"\",\r\n      consentRequired: false,\r\n      consentProvided: false,\r\n      graphAccessToken: \"\",\r\n      photo: \"\",\r\n      error: false\r\n      }\r\n\r\n    //Bind any functions that need to be passed as callbacks or used to React components\r\n    this.ssoLoginSuccess = this.ssoLoginSuccess.bind(this);\r\n    this.ssoLoginFailure = this.ssoLoginFailure.bind(this);\r\n    this.consentSuccess = this.consentSuccess.bind(this);\r\n    this.consentFailure = this.consentFailure.bind(this);\r\n    this.unhandledFetchError = this.unhandledFetchError.bind(this);\r\n    this.callGraphFromClient = this.callGraphFromClient.bind(this);\r\n    this.showConsentDialog = this.showConsentDialog.bind(this);\r\n  }\r\n\r\n  //React lifecycle method that gets called once a component has finished mounting\r\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidmount\r\n  componentDidMount() {\r\n    // Initialize the Microsoft Teams SDK\r\n    app.initialize().then(() => {\r\n      // Get the user context from Teams and set it in the state\r\n      app.getContext().then((context) => {\r\n        this.setState({ context: context });\r\n      });\r\n\r\n      authentication.getAuthToken().then((result) => {\r\n        this.ssoLoginSuccess(result)\r\n      }).catch((error) => {\r\n        this.ssoLoginFailure(error)\r\n      });\r\n    });\r\n  }\r\n\r\n  ssoLoginSuccess = async (result) => {\r\n    this.setState({ ssoToken: result });\r\n    this.exchangeClientTokenForServerToken(result);\r\n  }\r\n\r\n  ssoLoginFailure(error) {\r\n    console.error(\"SSO failed: \", error);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  //Exchange the SSO access token for a Graph access token\r\n  //Learn more: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow\r\n  exchangeClientTokenForServerToken = async (token) => {\r\n\r\n    let serverURL = `${process.env.REACT_APP_BASE_URL}/getGraphAccessToken?ssoToken=${token}&upn=${this.state.context.user.userPrincipalName}`;\r\n    let response = await fetch(serverURL).catch(this.unhandledFetchError); //This calls getGraphAccessToken route in /api-server/app.js\r\n    let data = await response.json().catch(this.unhandledFetchError);\r\n\r\n    if (!response.ok && data.error === 'consent_required') {\r\n      //A consent_required error means it's the first time a user is logging into to the app, so they must consent to sharing their Graph data with the app.\r\n      //They may also see this error if MFA is required.\r\n      this.setState({ consentRequired: true }); //This displays the consent required message.\r\n      this.showConsentDialog(); //Proceed to show the consent dialogue.\r\n    } else if (!response.ok) {\r\n      //Unknown error\r\n      console.error(data);\r\n      this.setState({ error: true });\r\n    } else {\r\n      this.setState({\r\n        photo: data //Convert binary data to an image URL and set the url in state\r\n      })\r\n    }\r\n  }\r\n\r\n  //Show a popup dialogue prompting the user to consent to the required API permissions. This opens ConsentPopup.js.\r\n  //Learn more: https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-tab-aad#initiate-authentication-flow\r\n  showConsentDialog() {\r\n\r\n    authentication.authenticate({\r\n      url: window.location.origin + \"/auth-start\",\r\n      width: 600,\r\n      height: 535\r\n    }).then((result) => {\r\n      this.consentSuccess(result)\r\n    }).catch((error) => {\r\n      this.consentFailure(error)\r\n    });\r\n  }\r\n\r\n  //Callback function for a successful authorization\r\n  consentSuccess(result) {\r\n    //Save the Graph access token in state\r\n    this.setState({\r\n      consentProvided: true\r\n    });\r\n\r\n    authentication.getAuthToken().then((result) => {\r\n      this.ssoLoginSuccess(result)\r\n    }).catch((error) => {\r\n      this.ssoLoginFailure(error)\r\n    });\r\n  }\r\n\r\n  consentFailure(reason) {\r\n    console.error(\"Consent failed: \", reason);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  //React lifecycle method that gets called after a component's state or props updates\r\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidupdate\r\n  componentDidUpdate = async (prevProps, prevState) => {\r\n\r\n    //Check to see if a Graph access token is now in state AND that it didn't exist previously\r\n    if ((prevState.graphAccessToken === \"\") && (this.state.graphAccessToken !== \"\")) {\r\n      this.callGraphFromClient();\r\n    }\r\n  }\r\n\r\n  // Fetch the user's profile photo from Graph using the access token retrieved either from the server \r\n  // or microsoftTeams.authentication.authenticate\r\n  callGraphFromClient = async () => {\r\n    let upn = this.state.context.user.userPrincipalName;\r\n    let graphPhotoEndpoint = `https://graph.microsoft.com/v1.0/users/${upn}/photo/$value`;\r\n    let graphRequestParams = {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'image/jpg',\r\n        \"authorization\": \"bearer \" + this.state.graphAccessToken\r\n      }\r\n    }\r\n\r\n    let response = await fetch(graphPhotoEndpoint, graphRequestParams).catch(this.unhandledFetchError);\r\n    if (!response.ok) {\r\n      console.error(\"ERROR: \", response);\r\n      this.setState({ error: true });\r\n    }\r\n\r\n    let imageBlog = await response.blob().catch(this.unhandledFetchError); //Get image data as raw binary data\r\n\r\n    this.setState({\r\n      photo: URL.createObjectURL(imageBlog) //Convert binary data to an image URL and set the url in state\r\n    })\r\n  }\r\n\r\n  //Generic error handler ( avoids having to do async fetch in try/catch block )\r\n  unhandledFetchError(err) {\r\n    console.error(\"Unhandled fetch error: \", err);\r\n    this.setState({ error: true });\r\n  }\r\n\r\n  render() {\r\n\r\n    let title = Object.keys(this.state.context).length > 0 ?\r\n      'Congratulations ' + this.state.context.user.userPrincipalName + '! This is your tab' : <Spinner />;\r\n\r\n    let ssoMessage = this.state.ssoToken === \"\" ?\r\n      <Spinner label='Performing Azure AD single sign-on authentication...' /> : null;\r\n\r\n    let serverExchangeMessage = (this.state.ssoToken !== \"\") && (!this.state.consentRequired) && (this.state.photo === \"\") ?\r\n      <Spinner label='Exchanging SSO access token for Graph access token...' /> : null;\r\n\r\n    let consentMessage = (this.state.consentRequired && !this.state.consentProvided) ?\r\n      <Spinner label='Consent required.' /> : null;\r\n\r\n    let content;\r\n    if (this.state.error) {\r\n      content = <h1>ERROR: Please ensure pop-ups are allowed for this website and retry</h1>\r\n    } else {\r\n      content =\r\n        <div>\r\n          <h1>{title}</h1>\r\n          <h3>{ssoMessage}</h3>\r\n          <h3>{serverExchangeMessage}</h3>\r\n          <h3>{consentMessage}</h3>\r\n          <img src={this.state.photo} width=\"200\" />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Tab;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}