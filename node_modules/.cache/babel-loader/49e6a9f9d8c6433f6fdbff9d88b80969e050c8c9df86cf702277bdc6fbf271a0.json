{"ast":null,"code":"import * as React from 'react';\nimport { useControllableState, useEventCallback, useId, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { useDisableBodyScroll, useFocusFirstElement } from '../../utils';\nimport { DialogContext } from '../../contexts';\n/**\n * Create the state required to render Dialog.\n *\n * The returned state can be modified with hooks such as useDialogStyles_unstable,\n * before being passed to renderDialog_unstable.\n *\n * @param props - props from this instance of Dialog\n */\n\nexport const useDialog_unstable = props => {\n  const {\n    children,\n    modalType = 'modal',\n    onOpenChange\n  } = props;\n  const [trigger, content] = childrenToTriggerAndContent(children);\n  const [open, setOpen] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false\n  });\n  const requestOpenChange = useEventCallback(data => {\n    onOpenChange === null || onOpenChange === void 0 ? void 0 : onOpenChange(data.event, data); // if user prevents default then do not change state value\n    // otherwise updates state value and trigger reference to the element that caused the opening\n\n    if (!data.event.isDefaultPrevented()) {\n      setOpen(data.open);\n    }\n  });\n  const focusRef = useFocusFirstElement(open, modalType);\n  const disableBodyScroll = useDisableBodyScroll();\n  const isBodyScrollLocked = Boolean(open && modalType !== 'non-modal');\n  useIsomorphicLayoutEffect(() => {\n    if (isBodyScrollLocked) {\n      return disableBodyScroll();\n    }\n  }, [disableBodyScroll, isBodyScrollLocked]);\n  return {\n    components: {\n      backdrop: 'div'\n    },\n    open,\n    modalType,\n    content: open ? content : null,\n    trigger,\n    requestOpenChange,\n    dialogTitleId: useId('dialog-title-'),\n    isNestedDialog: useHasParentContext(DialogContext),\n    dialogRef: focusRef\n  };\n};\n/**\n * Extracts trigger and content from children\n */\n\nfunction childrenToTriggerAndContent(children) {\n  const childrenArray = React.Children.toArray(children);\n  if (process.env.NODE_ENV !== 'production') {\n    if (childrenArray.length !== 1 && childrenArray.length !== 2) {\n      // eslint-disable-next-line no-console\n      console.warn('Dialog must contain at least one child <DialogSurface/>,\\n' + 'and at most two children <DialogTrigger/> <DialogSurface/> (in this order)');\n    }\n  }\n  switch (childrenArray.length) {\n    // case where there's a trigger followed by content\n    case 2:\n      return childrenArray;\n    // case where there's only content\n\n    case 1:\n      return [undefined, childrenArray[0]];\n    // unknown case\n\n    default:\n      return [undefined, undefined];\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,EAAiDC,KAAjD,EAAwDC,yBAAxD,QAAyF,2BAAzF;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,aAA3D;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAIA;;;;;;;AAOG;;AACH,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAoC;EACpE,MAAM;IAAEC,QAAF;IAAYC,SAAS,GAAG,OAAxB;IAAiCC;EAAjC,IAAkDH,KAAxD;EAEA,MAAM,CAACI,OAAD,EAAUC,OAAV,IAAqBC,2BAA2B,CAACL,QAAD,CAAtD;EAEA,MAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBjB,oBAAoB,CAAC;IAC3CkB,KAAK,EAAET,KAAK,CAACO,IAD8B;IAE3CG,YAAY,EAAEV,KAAK,CAACW,WAFuB;IAG3CC,YAAY,EAAE;EAH6B,CAAD,CAA5C;EAMA,MAAMC,iBAAiB,GAAGrB,gBAAgB,CAAEsB,IAAD,IAA+B;IACxEX,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAGW,IAAI,CAACC,KAAR,EAAeD,IAAf,CAAZ,CADwE,CAGxE;IACA;;IACA,IAAI,CAACA,IAAI,CAACC,KAAL,CAAWC,kBAAX,EAAL,EAAsC;MACpCR,OAAO,CAACM,IAAI,CAACP,IAAN,CAAP;IACD;EACF,CARyC,CAA1C;EAUA,MAAMU,QAAQ,GAAGpB,oBAAoB,CAACU,IAAD,EAAOL,SAAP,CAArC;EACA,MAAMgB,iBAAiB,GAAGtB,oBAAoB,EAA9C;EACA,MAAMuB,kBAAkB,GAAGC,OAAO,CAACb,IAAI,IAAIL,SAAS,KAAK,WAAvB,CAAlC;EAEAR,yBAAyB,CAAC,MAAK;IAC7B,IAAIyB,kBAAJ,EAAwB;MACtB,OAAOD,iBAAiB,EAAxB;IACD;EACF,CAJwB,EAItB,CAACA,iBAAD,EAAoBC,kBAApB,CAJsB,CAAzB;EAMA,OAAO;IACLE,UAAU,EAAE;MACVC,QAAQ,EAAE;IADA,CADP;IAILf,IAJK;IAKLL,SALK;IAMLG,OAAO,EAAEE,IAAI,GAAGF,OAAH,GAAa,IANrB;IAOLD,OAPK;IAQLS,iBARK;IASLU,aAAa,EAAE9B,KAAK,CAAC,eAAD,CATf;IAUL+B,cAAc,EAAE7B,mBAAmB,CAACG,aAAD,CAV9B;IAWL2B,SAAS,EAAER;EAXN,CAAP;AAaD,CA5CM;AA8CP;;AAEG;;AACH,SAASX,2BAAT,CACEL,QADF,EAC2B;EAEzB,MAAMyB,aAAa,GAAGpC,KAAK,CAACqC,QAAN,CAAeC,OAAf,CAAuB3B,QAAvB,CAAtB;EACA,IAAI4B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAIL,aAAa,CAACM,MAAd,KAAyB,CAAzB,IAA8BN,aAAa,CAACM,MAAd,KAAyB,CAA3D,EAA8D;MAC5D;MACAC,OAAO,CAACC,IAAR,CACE,+DACE,4EAFJ;IAID;EACF;EACD,QAAQR,aAAa,CAACM,MAAtB;IACE;IACA,KAAK,CAAL;MACE,OAAON,aAAP;IACF;;IACA,KAAK,CAAL;MACE,OAAO,CAACS,SAAD,EAAYT,aAAa,CAAC,CAAD,CAAzB,CAAP;IACF;;IACA;MACE,OAAO,CAACS,SAAD,EAAYA,SAAZ,CAAP;EAAA;AAEL","names":["React","useControllableState","useEventCallback","useId","useIsomorphicLayoutEffect","useHasParentContext","useDisableBodyScroll","useFocusFirstElement","DialogContext","useDialog_unstable","props","children","modalType","onOpenChange","trigger","content","childrenToTriggerAndContent","open","setOpen","state","defaultState","defaultOpen","initialState","requestOpenChange","data","event","isDefaultPrevented","focusRef","disableBodyScroll","isBodyScrollLocked","Boolean","components","backdrop","dialogTitleId","isNestedDialog","dialogRef","childrenArray","Children","toArray","process","env","NODE_ENV","length","console","warn","undefined"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-dialog\\lib\\components\\src\\packages\\react-components\\react-dialog\\src\\components\\Dialog\\useDialog.ts"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useEventCallback, useId, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\nimport { useHasParentContext } from '@fluentui/react-context-selector';\nimport { useDisableBodyScroll, useFocusFirstElement } from '../../utils';\nimport { DialogContext } from '../../contexts';\n\nimport type { DialogOpenChangeData, DialogProps, DialogState } from './Dialog.types';\n\n/**\n * Create the state required to render Dialog.\n *\n * The returned state can be modified with hooks such as useDialogStyles_unstable,\n * before being passed to renderDialog_unstable.\n *\n * @param props - props from this instance of Dialog\n */\nexport const useDialog_unstable = (props: DialogProps): DialogState => {\n  const { children, modalType = 'modal', onOpenChange } = props;\n\n  const [trigger, content] = childrenToTriggerAndContent(children);\n\n  const [open, setOpen] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false,\n  });\n\n  const requestOpenChange = useEventCallback((data: DialogOpenChangeData) => {\n    onOpenChange?.(data.event, data);\n\n    // if user prevents default then do not change state value\n    // otherwise updates state value and trigger reference to the element that caused the opening\n    if (!data.event.isDefaultPrevented()) {\n      setOpen(data.open);\n    }\n  });\n\n  const focusRef = useFocusFirstElement(open, modalType);\n  const disableBodyScroll = useDisableBodyScroll();\n  const isBodyScrollLocked = Boolean(open && modalType !== 'non-modal');\n\n  useIsomorphicLayoutEffect(() => {\n    if (isBodyScrollLocked) {\n      return disableBodyScroll();\n    }\n  }, [disableBodyScroll, isBodyScrollLocked]);\n\n  return {\n    components: {\n      backdrop: 'div',\n    },\n    open,\n    modalType,\n    content: open ? content : null,\n    trigger,\n    requestOpenChange,\n    dialogTitleId: useId('dialog-title-'),\n    isNestedDialog: useHasParentContext(DialogContext),\n    dialogRef: focusRef,\n  };\n};\n\n/**\n * Extracts trigger and content from children\n */\nfunction childrenToTriggerAndContent(\n  children: React.ReactNode,\n): readonly [trigger: React.ReactNode, content: React.ReactNode] {\n  const childrenArray = React.Children.toArray(children) as React.ReactElement[];\n  if (process.env.NODE_ENV !== 'production') {\n    if (childrenArray.length !== 1 && childrenArray.length !== 2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Dialog must contain at least one child <DialogSurface/>,\\n' +\n          'and at most two children <DialogTrigger/> <DialogSurface/> (in this order)',\n      );\n    }\n  }\n  switch (childrenArray.length) {\n    // case where there's a trigger followed by content\n    case 2:\n      return childrenArray as [trigger: React.ReactNode, content: React.ReactNode];\n    // case where there's only content\n    case 1:\n      return [undefined, childrenArray[0]];\n    // unknown case\n    default:\n      return [undefined, undefined];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}