{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ThrottlingUtils = /** @class */function () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  };\n  return ThrottlingUtils;\n}();\nexport { ThrottlingUtils };","map":{"version":3,"mappings":"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","names":["ThrottlingUtils","thumbprint","ThrottlingConstants","THROTTLING_PREFIX","stringify","cacheManager","key","generateThrottlingStorageKey","value","getThrottlingCache","throttleTime","Date","now","removeItem","ServerError","errorCodes","join","Constants","EMPTY_STRING","errorMessage","subError","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","HeaderNames","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\network\\ThrottlingUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NetworkResponse } from \"./NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { HeaderNames, ThrottlingConstants, Constants } from \"../utils/Constants\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\n\r\nexport class ThrottlingUtils {\r\n\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key);\r\n                return;\r\n            }\r\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            const thumbprintValue: ThrottlingEntity = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(\r\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\r\n                thumbprintValue\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime: number): number {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(\r\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\r\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\r\n        ) * 1000);\r\n    }\r\n\r\n    static removeThrottle(cacheManager: CacheManager, clientId: string, request: BaseAuthRequest, homeAccountIdentifier?: string): void {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}