{"ast":null,"code":"import { useFocusVisible } from '@fluentui/react-tabster';\nimport { ThemeContext_unstable as ThemeContext, useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluentProviderThemeStyleTag } from './useFluentProviderThemeStyleTag';\n/**\n * Create the state required to render FluentProvider.\n *\n * The returned state can be modified with hooks such as useFluentProviderStyles_unstable,\n * before being passed to renderFluentProvider_unstable.\n *\n * @param props - props from this instance of FluentProvider\n * @param ref - reference to root HTMLElement of FluentProvider\n */\n\nexport const useFluentProvider_unstable = (props, ref) => {\n  const parentContext = useFluent();\n  const parentTheme = useTheme();\n  /**\n   * TODO: add merge functions to \"dir\" merge,\n   * nesting providers with the same \"dir\" should not add additional attributes to DOM\n   * see https://github.com/microsoft/fluentui/blob/0dc74a19f3aa5a058224c20505016fbdb84db172/packages/fluentui/react-northstar/src/utils/mergeProviderContexts.ts#L89-L93\n   */\n\n  const {\n    applyStylesToPortals = true,\n    dir = parentContext.dir,\n    targetDocument = parentContext.targetDocument,\n    theme\n  } = props;\n  const mergedTheme = mergeThemes(parentTheme, theme);\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production' && mergedTheme === undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(`\n      FluentProvider: your \"theme\" is not defined !\n      =============================================\n      Make sure your root FluentProvider has set a theme or you're setting the theme in your child FluentProvider.\n      `);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    applyStylesToPortals,\n    dir,\n    targetDocument,\n    theme: mergedTheme,\n    themeClassName: useFluentProviderThemeStyleTag({\n      theme: mergedTheme,\n      targetDocument\n    }),\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      dir,\n      ref: useMergedRefs(ref, useFocusVisible())\n    })\n  };\n};\nfunction mergeThemes(a, b) {\n  // Merge impacts perf: we should like to avoid it if it's possible\n  if (a && b) {\n    return {\n      ...a,\n      ...b\n    };\n  }\n  if (a) {\n    return a;\n  }\n  return b;\n}\nfunction useTheme() {\n  return React.useContext(ThemeContext);\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,yBAAhC;AACA,SACEC,qBAAqB,IAAIC,YAD3B,EAEEC,kBAAkB,IAAIC,SAFxB,QAGO,iCAHP;AAKA,SAASC,qBAAT,EAAgCC,aAAhC,QAAqD,2BAArD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,8BAAT,QAA+C,kCAA/C;AAGA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,0BAA0B,GAAG,CACxCC,KADwC,EAExCC,GAFwC,KAGjB;EACvB,MAAMC,aAAa,GAAGR,SAAS,EAA/B;EACA,MAAMS,WAAW,GAAGC,QAAQ,EAA5B;EAEA;;;;AAIG;;EACH,MAAM;IACJC,oBAAoB,GAAG,IADnB;IAEJC,GAAG,GAAGJ,aAAa,CAACI,GAFhB;IAGJC,cAAc,GAAGL,aAAa,CAACK,cAH3B;IAIJC;EAJI,IAKFR,KALJ;EAMA,MAAMS,WAAW,GAAGC,WAAW,CAACP,WAAD,EAAcK,KAAd,CAA/B;EAEAX,KAAK,CAACc,SAAN,CAAgB,MAAK;IACnB,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCL,WAAW,KAAKM,SAA7D,EAAwE;MACtE;MACAC,OAAO,CAACC,IAAR,CAAa;;;;AAIZ,OAJD;IAKD,CARkB,CASnB;EACD,CAVD,EAUG,EAVH;EAYA,OAAO;IACLZ,oBADK;IAELC,GAFK;IAGLC,cAHK;IAILC,KAAK,EAAEC,WAJF;IAKLS,cAAc,EAAEpB,8BAA8B,CAAC;MAAEU,KAAK,EAAEC,WAAT;MAAsBF;IAAtB,CAAD,CALzC;IAOLY,UAAU,EAAE;MACVC,IAAI,EAAE;IADI,CAPP;IAWLA,IAAI,EAAEzB,qBAAqB,CAAC,KAAD,EAAQ;MACjC,GAAGK,KAD8B;MAEjCM,GAFiC;MAGjCL,GAAG,EAAEL,aAAa,CAACK,GAAD,EAAMX,eAAe,EAArB;IAHe,CAAR;EAXtB,CAAP;AAiBD,CAjDM;AAmDP,SAASoB,WAAT,CAAqBW,CAArB,EAA2CC,CAA3C,EAA+D;EAC7D;EACA,IAAID,CAAC,IAAIC,CAAT,EAAY;IACV,OAAO;MAAE,GAAGD,CAAL;MAAQ,GAAGC;IAAX,CAAP;EACD;EAED,IAAID,CAAJ,EAAO;IACL,OAAOA,CAAP;EACD;EAED,OAAOC,CAAP;AACD;AAED,SAASlB,QAAT,GAAiB;EACf,OAAOP,KAAK,CAAC0B,UAAN,CAAiB/B,YAAjB,CAAP;AACD","names":["useFocusVisible","ThemeContext_unstable","ThemeContext","useFluent_unstable","useFluent","getNativeElementProps","useMergedRefs","React","useFluentProviderThemeStyleTag","useFluentProvider_unstable","props","ref","parentContext","parentTheme","useTheme","applyStylesToPortals","dir","targetDocument","theme","mergedTheme","mergeThemes","useEffect","process","env","NODE_ENV","undefined","console","warn","themeClassName","components","root","a","b","useContext"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-provider\\lib\\components\\src\\packages\\react-components\\react-provider\\src\\components\\FluentProvider\\useFluentProvider.ts"],"sourcesContent":["import { useFocusVisible } from '@fluentui/react-tabster';\nimport {\n  ThemeContext_unstable as ThemeContext,\n  useFluent_unstable as useFluent,\n} from '@fluentui/react-shared-contexts';\nimport type { ThemeContextValue_unstable as ThemeContextValue } from '@fluentui/react-shared-contexts';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluentProviderThemeStyleTag } from './useFluentProviderThemeStyleTag';\nimport type { FluentProviderProps, FluentProviderState } from './FluentProvider.types';\n\n/**\n * Create the state required to render FluentProvider.\n *\n * The returned state can be modified with hooks such as useFluentProviderStyles_unstable,\n * before being passed to renderFluentProvider_unstable.\n *\n * @param props - props from this instance of FluentProvider\n * @param ref - reference to root HTMLElement of FluentProvider\n */\nexport const useFluentProvider_unstable = (\n  props: FluentProviderProps,\n  ref: React.Ref<HTMLElement>,\n): FluentProviderState => {\n  const parentContext = useFluent();\n  const parentTheme = useTheme();\n\n  /**\n   * TODO: add merge functions to \"dir\" merge,\n   * nesting providers with the same \"dir\" should not add additional attributes to DOM\n   * see https://github.com/microsoft/fluentui/blob/0dc74a19f3aa5a058224c20505016fbdb84db172/packages/fluentui/react-northstar/src/utils/mergeProviderContexts.ts#L89-L93\n   */\n  const {\n    applyStylesToPortals = true,\n    dir = parentContext.dir,\n    targetDocument = parentContext.targetDocument,\n    theme,\n  } = props;\n  const mergedTheme = mergeThemes(parentTheme, theme);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production' && mergedTheme === undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(`\n      FluentProvider: your \"theme\" is not defined !\n      =============================================\n      Make sure your root FluentProvider has set a theme or you're setting the theme in your child FluentProvider.\n      `);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    applyStylesToPortals,\n    dir,\n    targetDocument,\n    theme: mergedTheme,\n    themeClassName: useFluentProviderThemeStyleTag({ theme: mergedTheme, targetDocument }),\n\n    components: {\n      root: 'div',\n    },\n\n    root: getNativeElementProps('div', {\n      ...props,\n      dir,\n      ref: useMergedRefs(ref, useFocusVisible<HTMLDivElement>()),\n    }),\n  };\n};\n\nfunction mergeThemes(a: ThemeContextValue, b: ThemeContextValue): ThemeContextValue {\n  // Merge impacts perf: we should like to avoid it if it's possible\n  if (a && b) {\n    return { ...a, ...b };\n  }\n\n  if (a) {\n    return a;\n  }\n\n  return b;\n}\n\nfunction useTheme(): ThemeContextValue {\n  return React.useContext(ThemeContext);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}