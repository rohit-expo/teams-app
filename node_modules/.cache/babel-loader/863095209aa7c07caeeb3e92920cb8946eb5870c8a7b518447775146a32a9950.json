{"ast":null,"code":"import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n/**\n * @internal\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are dependencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between re-renders\n *\n * @param fn - The callback function that will be used\n */\n\nexport const useEventCallback = fn => {\n  const callbackRef = React.useRef(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n  return React.useCallback(function () {\n    const callback = callbackRef.current;\n    return callback(...arguments);\n  }, [callbackRef]);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAO,MAAMC,gBAAgB,GAAoCC,EAAjC,IAAkE;EAChG,MAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAwB,MAAK;IAC/C,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;EACD,CAFmB,CAApB;EAIAL,yBAAyB,CAAC,MAAK;IAC7BG,WAAW,CAACG,OAAZ,GAAsBJ,EAAtB;EACD,CAFwB,EAEtB,CAACA,EAAD,CAFsB,CAAzB;EAIA,OAAOH,KAAK,CAACQ,WAAN,CACL,YAAkB;IAChB,MAAMC,QAAQ,GAAGL,WAAW,CAACG,OAA7B;IACA,OAAOE,QAAQ,CAAC,YAAD,CAAf;EACD,CAJI,EAKL,CAACL,WAAD,CALK,CAAP;AAOD,CAhBM","names":["React","useIsomorphicLayoutEffect","useEventCallback","fn","callbackRef","useRef","Error","current","useCallback","callback"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\hooks\\useEventCallback.ts"],"sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * @internal\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are dependencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between re-renders\n *\n * @param fn - The callback function that will be used\n */\nexport const useEventCallback = <Args extends unknown[], Return>(fn: (...args: Args) => Return) => {\n  const callbackRef = React.useRef<typeof fn>(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n\n  return React.useCallback(\n    (...args: Args) => {\n      const callback = callbackRef.current;\n      return callback(...args);\n    },\n    [callbackRef],\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}