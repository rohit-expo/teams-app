{"ast":null,"code":"import { DEFINITION_LOOKUP_TABLE } from '../constants.esm.js';\nimport { debugData } from './store.esm.js';\nimport { getDebugClassNames } from './utils.esm.js';\nfunction getDebugTree(debugSequenceHash, parentNode) {\n  const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);\n  const node = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames\n  };\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences.reverse() // first process the overriding children that are merged last\n  .forEach(sequence => {\n    const child = getDebugTree(sequence, node);\n    if (child) {\n      node.children.push(child);\n    }\n  });\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(_ref => {\n      let {\n        className\n      } = _ref;\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n        node.sourceURL = mapData.sourceURL;\n      }\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n      node.rules[className] = cssRule;\n    });\n  }\n  return node;\n}\nexport { getDebugTree };","map":{"version":3,"mappings":";;;SAMgBA,YAAY,CAACC,iBAA+B,EAAEC,UAA0B;EACtF,MAAMC,UAAU,GAA2BC,uBAAuB,CAACH,iBAAiB,CAAC;EACrF,IAAIE,UAAU,KAAKE,SAAS,EAAE;IAC5B,OAAOA,SAAS;;EAGlB,MAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,uBAAuB,CAACF,UAAU,CAACK,YAAY,CAAC,GAAGF,SAAS;EAClG,MAAMG,eAAe,GAAGC,kBAAkB,CACxCN,UAAU,EACVG,gBAAgB,EAChBJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEM,eAAe,EAC3BN,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEQ,QAAQ,CACrB;EAED,MAAMC,IAAI,GAAkB;IAC1BJ,YAAY,EAAEN,iBAAiB;IAC/BW,SAAS,EAAET,UAAU,CAAC,CAAC,CAAC;IACxBO,QAAQ,EAAE,EAAE;IACZF;GACD;EAED,MAAMK,iBAAiB,GAAGC,SAAS,CAACC,oBAAoB,CAACJ,IAAI,CAACJ,YAAY,CAAC;EAC3EM,iBAAiB,CACdG,OAAO,EAAE;EAAA,CACTC,OAAO,CAAEC,QAAsB;IAC9B,MAAMC,KAAK,GAAGnB,YAAY,CAACkB,QAAQ,EAAEP,IAAI,CAAC;IAC1C,IAAIQ,KAAK,EAAE;MACTR,IAAI,CAACD,QAAQ,CAACU,IAAI,CAACD,KAAK,CAAC;;GAE5B,CAAC;;EAGJ,IAAI,CAACR,IAAI,CAACD,QAAQ,CAACW,MAAM,EAAE;IACzBV,IAAI,CAACW,KAAK,GAAG,EAAE;IACfX,IAAI,CAACH,eAAe,CAACS,OAAO,CAAC,QAAc;MAAA,IAAb;QAAEM;OAAW;MACzC,MAAMC,OAAO,GAAGV,SAAS,CAACW,kBAAkB,CAACxB,iBAAiB,CAAC;MAC/D,IAAIuB,OAAO,EAAE;QACXb,IAAI,CAACe,IAAI,GAAGF,OAAO,CAACG,QAAQ;QAC5BhB,IAAI,CAACiB,SAAS,GAAGJ,OAAO,CAACI,SAAS;;MAGpC,MAAMC,OAAO,GAAGf,SAAS,CAACgB,WAAW,EAAE,CAACC,IAAI,CAACF,OAAO;QAClD,OAAOA,OAAO,CAACG,QAAQ,CAACT,SAAS,CAAC;OACnC,CAAC;MAEFZ,IAAI,CAACW,KAAM,CAACC,SAAS,CAAC,GAAGM,OAAQ;KAClC,CAAC;;EAGJ,OAAOlB,IAAI;AACb","names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","children","node","direction","childrenSequences","debugData","getChildrenSequences","reverse","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","sourceURL","cssRule","getCSSRules","find","includes"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\packages\\core\\src\\devtools\\getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(\n    lookupItem,\n    parentLookupItem,\n    parentNode?.debugClassNames,\n    parentNode?.children,\n  );\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences\n    .reverse() // first process the overriding children that are merged last\n    .forEach((sequence: SequenceHash) => {\n      const child = getDebugTree(sequence, node);\n      if (child) {\n        node.children.push(child);\n      }\n    });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n        node.sourceURL = mapData.sourceURL;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}