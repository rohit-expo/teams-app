{"ast":null,"code":"import { useId } from '@fluentui/react-utilities';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { getDeloser, getModalizer } from 'tabster';\nimport { useTabster } from './useTabster';\n/**\n * Applies modal dialog behaviour through DOM attributes\n * Modal element will focus trap and hide other content on the page\n * The trigger element will be focused if focus is lost after the modal element is removed\n *\n * @returns DOM attributes to apply to the modal element and its trigger\n */\n\nexport const useModalAttributes = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    trapFocus,\n    alwaysFocusable,\n    legacyTrapFocus\n  } = options;\n  const tabster = useTabster(); // Initializes the modalizer and deloser APIs\n\n  if (tabster) {\n    getModalizer(tabster);\n    getDeloser(tabster);\n  }\n  const id = useId('modal-');\n  const modalAttributes = useTabsterAttributes({\n    deloser: {},\n    modalizer: {\n      id,\n      isOthersAccessible: !trapFocus,\n      isAlwaysAccessible: alwaysFocusable,\n      isTrapped: legacyTrapFocus\n    }\n  });\n  const triggerAttributes = useTabsterAttributes({\n    deloser: {}\n  });\n  return {\n    modalAttributes,\n    triggerAttributes\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,2BAAtB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAgE,SAAhE;AACA,SAASC,UAAT,QAA2B,cAA3B;AAyBA;;;;;;AAMG;;AACH,OAAO,MAAMC,kBAAkB,GAAG,YAE8E;EAAA,IAD9GC,8EAAqC,EADL;EAGhC,MAAM;IAAEC,SAAF;IAAaC,eAAb;IAA8BC;EAA9B,IAAkDH,OAAxD;EACA,MAAMI,OAAO,GAAGN,UAAU,EAA1B,CAF8G,CAG9G;;EACA,IAAIM,OAAJ,EAAa;IACXP,YAAY,CAACO,OAAD,CAAZ;IACAR,UAAU,CAACQ,OAAD,CAAV;EACD;EAED,MAAMC,EAAE,GAAGX,KAAK,CAAC,QAAD,CAAhB;EACA,MAAMY,eAAe,GAAGX,oBAAoB,CAAC;IAC3CY,OAAO,EAAE,EADkC;IAE3CC,SAAS,EAAE;MACTH,EADS;MAETI,kBAAkB,EAAE,CAACR,SAFZ;MAGTS,kBAAkB,EAAER,eAHX;MAITS,SAAS,EAAER;IAJF;EAFgC,CAAD,CAA5C;EAUA,MAAMS,iBAAiB,GAAGjB,oBAAoB,CAAC;IAC7CY,OAAO,EAAE;EADoC,CAAD,CAA9C;EAIA,OAAO;IAAED,eAAF;IAAmBM;EAAnB,CAAP;AACD,CA3BM","names":["useId","useTabsterAttributes","getDeloser","getModalizer","useTabster","useModalAttributes","options","trapFocus","alwaysFocusable","legacyTrapFocus","tabster","id","modalAttributes","deloser","modalizer","isOthersAccessible","isAlwaysAccessible","isTrapped","triggerAttributes"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\hooks\\useModalAttributes.ts"],"sourcesContent":["import { useId } from '@fluentui/react-utilities';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { getDeloser, getModalizer, Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n\nexport interface UseModalAttributesOptions {\n  /**\n   * Traps focus inside the elements the attributes are applied.\n   * Prefer this to `legacyTrapFocus`\n   * it forbids users to tab out of the focus trap into the actual browser.\n   */\n  trapFocus?: boolean;\n\n  /**\n   * Traps focus inside the elements the attributes are applied.\n   * This prop enables legacy behavior to match previous versions of Fluent and is not\n   * recommended for general use.\n   * Enabling `legacyTrapFocus` prevents users from tabbing out of the focus trap and into\n   * the actual browser. Prefer using `trapFocus` instead of this prop.\n   */\n  legacyTrapFocus?: boolean;\n\n  /**\n   * Always reachabled in Tab order\n   */\n  alwaysFocusable?: boolean;\n}\n\n/**\n * Applies modal dialog behaviour through DOM attributes\n * Modal element will focus trap and hide other content on the page\n * The trigger element will be focused if focus is lost after the modal element is removed\n *\n * @returns DOM attributes to apply to the modal element and its trigger\n */\nexport const useModalAttributes = (\n  options: UseModalAttributesOptions = {},\n): { modalAttributes: TabsterTypes.TabsterDOMAttribute; triggerAttributes: TabsterTypes.TabsterDOMAttribute } => {\n  const { trapFocus, alwaysFocusable, legacyTrapFocus } = options;\n  const tabster = useTabster();\n  // Initializes the modalizer and deloser APIs\n  if (tabster) {\n    getModalizer(tabster);\n    getDeloser(tabster);\n  }\n\n  const id = useId('modal-');\n  const modalAttributes = useTabsterAttributes({\n    deloser: {},\n    modalizer: {\n      id,\n      isOthersAccessible: !trapFocus,\n      isAlwaysAccessible: alwaysFocusable,\n      isTrapped: legacyTrapFocus,\n    },\n  });\n\n  const triggerAttributes = useTabsterAttributes({\n    deloser: {},\n  });\n\n  return { modalAttributes, triggerAttributes };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}