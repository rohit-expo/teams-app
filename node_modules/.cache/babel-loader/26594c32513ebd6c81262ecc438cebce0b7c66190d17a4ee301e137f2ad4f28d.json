{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { __assign, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { Logger, LogLevel } from '../logger/Logger.js';\nimport { Constants } from '../utils/Constants.js';\nimport { version } from '../packageMetadata.js';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.js';\nimport { DefaultStorageClass } from '../cache/CacheManager.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Token renewal offset default in seconds\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nvar DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: function () {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nvar DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: true\n};\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\n  sendGetRequestAsync: function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  },\n  sendPostRequestAsync: function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  }\n};\nvar DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nvar DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nvar DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: \"\" + Constants.DEFAULT_COMMON_TENANT\n};\nvar DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\nfunction buildClientConfiguration(_a) {\n  var userAuthOptions = _a.authOptions,\n    userSystemOptions = _a.systemOptions,\n    userLoggerOption = _a.loggerOptions,\n    userCacheOptions = _a.cacheOptions,\n    storageImplementation = _a.storageInterface,\n    networkImplementation = _a.networkInterface,\n    cryptoImplementation = _a.cryptoInterface,\n    clientCredentials = _a.clientCredentials,\n    libraryInfo = _a.libraryInfo,\n    telemetry = _a.telemetry,\n    serverTelemetryManager = _a.serverTelemetryManager,\n    persistencePlugin = _a.persistencePlugin,\n    serializableCache = _a.serializableCache;\n  var loggerOptions = __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),\n    loggerOptions: loggerOptions,\n    cacheOptions: __assign(__assign({}, DEFAULT_CACHE_OPTIONS), userCacheOptions),\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),\n    telemetry: __assign(__assign({}, DEFAULT_TELEMETRY_OPTIONS), telemetry),\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\nfunction buildAuthOptions(authOptions) {\n  return __assign({\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false\n  }, authOptions);\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration };","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;;AAGG;AAgBH;AACA,IAAMA,gCAAgC,GAAG,GAAG;AAyI/B,0BAAsB,GAA4B;EAC3DC,yBAAyB,EAAED,gCAAgC;EAC3DE,oBAAoB,EAAE;;AAG1B,IAAMC,6BAA6B,GAA4B;EAC3DC,cAAc,EAAE;;GAEf;EACDC,iBAAiB,EAAE,KAAK;EACxBC,QAAQ,EAAEC,QAAQ,CAACC,IAAI;EACvBC,aAAa,EAAEC,SAAS,CAACC;CAC5B;AAED,IAAMC,qBAAqB,GAA2B;EAClDC,yBAAyB,EAAE;CAC9B;AAED,IAAMC,8BAA8B,GAAmB;EAC7CC,mBAAmB,EAAzB;;;;QACUC,UAAU,GAAG,oEAAoE;QACvF,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;;;EACpD;EACKG,oBAAoB,EAA1B;;;;QACUH,UAAU,GAAG,qEAAqE;QACxF,MAAMC,SAAS,CAACC,qBAAqB,CAACF,UAAU,CAAC;;;EACpD;CACJ;AAED,IAAMI,oBAAoB,GAAgB;EACtCC,GAAG,EAAEX,SAAS,CAACY,GAAG;EAClBC,OAAO,EAAEA,OAAO;EAChBC,GAAG,EAAEd,SAAS,CAACC,YAAY;EAC3Bc,EAAE,EAAEf,SAAS,CAACC;CACjB;AAED,IAAMe,0BAA0B,GAAsB;EAClDC,YAAY,EAAEjB,SAAS,CAACC,YAAY;EACpCiB,eAAe,EAAEC;CACpB;AAED,IAAMC,2BAA2B,GAAsB;EACnDC,kBAAkB,EAAEC,kBAAkB,CAACC,IAAI;EAC3CC,MAAM,EAAE,KAAGxB,SAAS,CAACyB;CACxB;AAED,IAAMC,yBAAyB,GAA+B;EAC1DC,WAAW,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE;EACf;CACJ;AAED;;;;;;AAMG;AACG,SAAUC,wBAAwB,CACpCC,EAcsB;EAbL,mBAAe;IACbC,iBAAiB;IACjBC,gBAAgB;IACjBC,gBAAgB;IACZC,qBAAqB;IACrBC,qBAAqB;IACtBC,oBAAoB;IAClBC,iBAAiB;IACvBC,WAAW;IACbC,SAAS;IACIC,sBAAsB;IAC3BC,iBAAiB;IACjBC,iBAAiB;EAGxC,IAAMC,aAAa,GAAQC,mDAA6B,CAAK,kBAAgB,CAAE;EAE/E,OAAO;IACHC,WAAW,EAAEC,gBAAgB,CAACC,eAAe,CAAC;IAC9CC,aAAa,EAAOJ,4CAAsB,CAAK,mBAAiB,CAAE;IAClED,aAAa,EAAEA,aAAa;IAC5BM,YAAY,EAAML,2CAAqB,CAAK,kBAAgB,CAAE;IAC9DM,gBAAgB,EAAEhB,qBAAqB,IAAI,IAAIiB,mBAAmB,CAACJ,eAAe,CAACK,QAAQ,EAAEC,6BAA6B,EAAE,IAAIC,MAAM,CAACX,aAAa,CAAC,CAAC;IACtJY,gBAAgB,EAAEpB,qBAAqB,IAAIhC,8BAA8B;IACzEqD,eAAe,EAAEpB,oBAAoB,IAAIiB,6BAA6B;IACtEhB,iBAAiB,EAAEA,iBAAiB,IAAItB,0BAA0B;IAClEuB,WAAW,EAAOM,0CAAoB,CAAK,aAAW,CAAE;IACxDL,SAAS,EAAOK,+CAAyB,CAAK,WAAS,CAAE;IACzDJ,sBAAsB,EAAEA,sBAAsB,IAAI,IAAI;IACtDC,iBAAiB,EAAEA,iBAAiB,IAAI,IAAI;IAC5CC,iBAAiB,EAAEA,iBAAiB,IAAI;GAC3C;AACL;AAEA;;;AAGG;AACH,SAASI,gBAAgB,CAACD,WAAwB;EAC9C;IACIY,kBAAkB,EAAE,EAAE;IACtBC,iBAAiB,EAAEvC,2BAA2B;IAC9CwC,0BAA0B,EAAE;EAAK,GAC9Bd,WAAW,CAChB;AACN","names":["DEFAULT_TOKEN_RENEWAL_OFFSET_SEC","tokenRenewalOffsetSeconds","preventCorsPreflight","DEFAULT_LOGGER_IMPLEMENTATION","loggerCallback","piiLoggingEnabled","logLevel","LogLevel","Info","correlationId","Constants","EMPTY_STRING","DEFAULT_CACHE_OPTIONS","claimsBasedCachingEnabled","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","notImplErr","AuthError","createUnexpectedError","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","version","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","buildClientConfiguration","_a","userSystemOptions","userLoggerOption","userCacheOptions","storageImplementation","networkImplementation","cryptoImplementation","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","loggerOptions","__assign","authOptions","buildAuthOptions","userAuthOptions","systemOptions","cacheOptions","storageInterface","DefaultStorageClass","clientId","DEFAULT_CRYPTO_IMPLEMENTATION","Logger","networkInterface","cryptoInterface","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\config\\ClientConfiguration.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger\";\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { version } from \"../packageMetadata\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\r\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\r\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\r\nimport { ClientCredentials } from \"../account/ClientCredentials\";\r\n\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\n\r\n/**\r\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\r\n *\r\n * This object allows you to configure important elements of MSAL functionality:\r\n * - authOptions                - Authentication for application\r\n * - cryptoInterface            - Implementation of crypto functions\r\n * - libraryInfo                - Library metadata\r\n * - telemetry                  - Telemetry options and data\r\n * - loggerOptions              - Logging for application\r\n * - cacheOptions               - Cache options for application\r\n * - networkInterface           - Network implementation\r\n * - storageInterface           - Storage implementation\r\n * - systemOptions              - Additional library options\r\n * - clientCredentials          - Credentials options for confidential clients\r\n */\r\nexport type ClientConfiguration = {\r\n    authOptions: AuthOptions,\r\n    systemOptions?: SystemOptions,\r\n    loggerOptions?: LoggerOptions,\r\n    cacheOptions?: CacheOptions,\r\n    storageInterface?: CacheManager,\r\n    networkInterface?: INetworkModule,\r\n    cryptoInterface?: ICrypto,\r\n    clientCredentials?: ClientCredentials,\r\n    libraryInfo?: LibraryInfo\r\n    telemetry?: TelemetryOptions,\r\n    serverTelemetryManager?: ServerTelemetryManager | null,\r\n    persistencePlugin?: ICachePlugin | null,\r\n    serializableCache?: ISerializableTokenCache | null,   \r\n};\r\n\r\nexport type CommonClientConfiguration = {\r\n    authOptions: Required<AuthOptions>,\r\n    systemOptions: Required<SystemOptions>,\r\n    loggerOptions : Required<LoggerOptions>,\r\n    cacheOptions: Required<CacheOptions>,\r\n    storageInterface: CacheManager,\r\n    networkInterface : INetworkModule,\r\n    cryptoInterface : Required<ICrypto>,\r\n    libraryInfo : LibraryInfo,\r\n    telemetry: Required<TelemetryOptions>,\r\n    serverTelemetryManager: ServerTelemetryManager | null,\r\n    clientCredentials: ClientCredentials,\r\n    persistencePlugin: ICachePlugin | null,\r\n    serializableCache: ISerializableTokenCache | null,    \r\n};\r\n\r\n/**\r\n * Use this to configure the auth options in the ClientConfiguration object\r\n *\r\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\r\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\r\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\r\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\r\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\r\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\r\n * - skipAuthorityMetadataCache      - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\r\n */\r\nexport type AuthOptions = {\r\n    clientId: string;\r\n    authority: Authority;\r\n    clientCapabilities?: Array<string>;\r\n    azureCloudOptions?: AzureCloudOptions;\r\n    skipAuthorityMetadataCache?: boolean;\r\n};\r\n\r\n/**\r\n * Use this to configure token renewal info in the Configuration object\r\n *\r\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\r\n */\r\nexport type SystemOptions = {\r\n    tokenRenewalOffsetSeconds?: number;\r\n    preventCorsPreflight?: boolean;\r\n};\r\n\r\n/**\r\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\r\n *\r\n * - loggerCallback                - Callback for logger\r\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\r\n * - logLevel                      - Sets the level at which logging happens\r\n * - correlationId                 - Sets the correlationId printed by the logger\r\n */\r\nexport type LoggerOptions = {\r\n    loggerCallback?: ILoggerCallback,\r\n    piiLoggingEnabled?: boolean,\r\n    logLevel?: LogLevel,\r\n    correlationId?: string\r\n};\r\n\r\n/**\r\n *  Use this to configure credential cache preferences in the ClientConfiguration object\r\n *\r\n * - claimsBasedCachingEnabled   - Sets whether tokens should be cached based on the claims hash. Default is true.\r\n */\r\nexport type CacheOptions = {\r\n    claimsBasedCachingEnabled?: boolean;\r\n};\r\n\r\n/**\r\n * Library-specific options\r\n */\r\nexport type LibraryInfo = {\r\n    sku: string,\r\n    version: string,\r\n    cpu: string,\r\n    os: string\r\n};\r\n\r\n/**\r\n * AzureCloudInstance specific options\r\n *\r\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\r\n * - tenant                         - provision to provide the tenant info\r\n */\r\nexport type AzureCloudOptions = {\r\n    azureCloudInstance: AzureCloudInstance;\r\n    tenant?: string,\r\n};\r\n\r\nexport type TelemetryOptions = {\r\n    application: ApplicationTelemetry;\r\n};\r\n\r\n/**\r\n * Telemetry information sent on request\r\n * - appName: Unique string name of an application\r\n * - appVersion: Version of the application using MSAL\r\n */\r\nexport type ApplicationTelemetry = {\r\n    appName: string;\r\n    appVersion: string;\r\n};\r\n\r\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false\r\n};\r\n\r\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\r\n    loggerCallback: () => {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n    correlationId: Constants.EMPTY_STRING\r\n};\r\n\r\nconst DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\r\n    claimsBasedCachingEnabled: true\r\n};\r\n\r\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\r\n    async sendGetRequestAsync<T>(): Promise<T> {\r\n        const notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    async sendPostRequestAsync<T>(): Promise<T> {\r\n        const notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n};\r\n\r\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: Constants.EMPTY_STRING,\r\n    os: Constants.EMPTY_STRING\r\n};\r\n\r\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\r\n    clientSecret: Constants.EMPTY_STRING,\r\n    clientAssertion: undefined\r\n};\r\n\r\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\r\n    azureCloudInstance: AzureCloudInstance.None,\r\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`\r\n};\r\n\r\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\r\n    application: {\r\n        appName: \"\",\r\n        appVersion: \"\"\r\n    }\r\n};\r\n\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nexport function buildClientConfiguration(\r\n    {\r\n        authOptions: userAuthOptions,\r\n        systemOptions: userSystemOptions,\r\n        loggerOptions: userLoggerOption,\r\n        cacheOptions: userCacheOptions,\r\n        storageInterface: storageImplementation,\r\n        networkInterface: networkImplementation,\r\n        cryptoInterface: cryptoImplementation,\r\n        clientCredentials: clientCredentials,\r\n        libraryInfo: libraryInfo,\r\n        telemetry: telemetry,\r\n        serverTelemetryManager: serverTelemetryManager,\r\n        persistencePlugin: persistencePlugin,\r\n        serializableCache: serializableCache,             \r\n    }: ClientConfiguration): CommonClientConfiguration {\r\n\r\n    const loggerOptions = { ...DEFAULT_LOGGER_IMPLEMENTATION, ...userLoggerOption };\r\n\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\r\n        loggerOptions: loggerOptions,\r\n        cacheOptions: {...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\r\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null,             \r\n    };\r\n}\r\n\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\r\n    return {\r\n        clientCapabilities: [],\r\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\r\n        skipAuthorityMetadataCache: false,\r\n        ...authOptions\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}