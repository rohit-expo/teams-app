{"ast":null,"code":"import { getScrollParent } from './getScrollParent';\n/**\n * Toggles event listeners for scroll parent.\n * Cleans up the event listeners for the previous element and adds them for the new scroll parent.\n * @param next Next element\n * @param prev Previous element\n */\n\nexport function toggleScrollListener(next, prev, handler) {\n  if (next === prev) {\n    return;\n  }\n  if (prev instanceof HTMLElement) {\n    const prevScrollParent = getScrollParent(prev);\n    prevScrollParent.removeEventListener('scroll', handler);\n  }\n  if (next instanceof HTMLElement) {\n    const scrollParent = getScrollParent(next);\n    scrollParent.addEventListener('scroll', handler);\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,mBAAhC;AAEA;;;;;AAKG;;AACH,OAAM,SAAUC,oBAAV,CACJC,IADI,EAEJC,IAFI,EAGJC,OAHI,EAGkB;EAEtB,IAAIF,IAAI,KAAKC,IAAb,EAAmB;IACjB;EACD;EAED,IAAIA,IAAI,YAAYE,WAApB,EAAiC;IAC/B,MAAMC,gBAAgB,GAAGN,eAAe,CAACG,IAAD,CAAxC;IACAG,gBAAgB,CAACC,mBAAjB,CAAqC,QAArC,EAA+CH,OAA/C;EACD;EACD,IAAIF,IAAI,YAAYG,WAApB,EAAiC;IAC/B,MAAMG,YAAY,GAAGR,eAAe,CAACE,IAAD,CAApC;IACAM,YAAY,CAACC,gBAAb,CAA8B,QAA9B,EAAwCL,OAAxC;EACD;AACF","names":["getScrollParent","toggleScrollListener","next","prev","handler","HTMLElement","prevScrollParent","removeEventListener","scrollParent","addEventListener"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-positioning\\lib\\src\\packages\\react-components\\react-positioning\\src\\utils\\toggleScrollListener.ts"],"sourcesContent":["import type { PositioningVirtualElement } from '../types';\nimport { getScrollParent } from './getScrollParent';\n\n/**\n * Toggles event listeners for scroll parent.\n * Cleans up the event listeners for the previous element and adds them for the new scroll parent.\n * @param next Next element\n * @param prev Previous element\n */\nexport function toggleScrollListener(\n  next: HTMLElement | PositioningVirtualElement | null,\n  prev: HTMLElement | PositioningVirtualElement | null,\n  handler: EventListener,\n) {\n  if (next === prev) {\n    return;\n  }\n\n  if (prev instanceof HTMLElement) {\n    const prevScrollParent = getScrollParent(prev);\n    prevScrollParent.removeEventListener('scroll', handler);\n  }\n  if (next instanceof HTMLElement) {\n    const scrollParent = getScrollParent(next);\n    scrollParent.addEventListener('scroll', handler);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}