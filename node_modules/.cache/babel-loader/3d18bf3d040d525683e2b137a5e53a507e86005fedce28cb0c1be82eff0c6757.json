{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\nexport const DEFAULT_STRINGS = {\n  active: 'active',\n  inactive: 'inactive'\n};\nexport const useAvatar_unstable = (props, ref) => {\n  var _a;\n  const {\n    dir\n  } = useFluent();\n  const {\n    size: contextSize\n  } = useAvatarContext();\n  const {\n    name,\n    size = contextSize !== null && contextSize !== void 0 ? contextSize : 32,\n    shape = 'circular',\n    active = 'unset',\n    activeAppearance = 'ring',\n    idForColor\n  } = props;\n  let {\n    color = 'neutral'\n  } = props; // Resolve 'colorful' to a specific color name\n\n  if (color === 'colorful') {\n    color = avatarColors[getHashCode((_a = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _a !== void 0 ? _a : '') % avatarColors.length];\n  }\n  const baseId = useId('avatar-');\n  const root = getNativeElementProps('span', {\n    role: 'img',\n    id: baseId,\n    // aria-label and/or aria-labelledby are resolved below\n    ...props,\n    ref\n  }, /* excludedPropNames: */\n  ['name']);\n  const [imageHidden, setImageHidden] = React.useState(undefined);\n  const image = resolveShorthand(props.image, {\n    defaultProps: {\n      alt: '',\n      role: 'presentation',\n      'aria-hidden': true,\n      hidden: imageHidden\n    }\n  }); // Hide the image if it fails to load and restore it on a successful load\n\n  if (image) {\n    image.onError = mergeCallbacks(image.onError, () => setImageHidden(true));\n    image.onLoad = mergeCallbacks(image.onLoad, () => setImageHidden(undefined));\n  } // Resolve the initials slot, defaulted to getInitials.\n\n  let initials = resolveShorthand(props.initials, {\n    required: true,\n    defaultProps: {\n      children: getInitials(name, dir === 'rtl', {\n        firstInitialOnly: size <= 16\n      }),\n      id: baseId + '__initials'\n    }\n  }); // Don't render the initials slot if it's empty\n\n  if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {\n    initials = undefined;\n  } // Render the icon slot *only if* there aren't any initials or image to display\n\n  let icon = undefined;\n  if (!initials && (!image || imageHidden)) {\n    icon = resolveShorthand(props.icon, {\n      required: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(PersonRegular, null),\n        'aria-hidden': true\n      }\n    });\n  }\n  const badge = resolveShorthand(props.badge, {\n    defaultProps: {\n      size: getBadgeSize(size),\n      id: baseId + '__badge'\n    }\n  });\n  let activeAriaLabelElement; // Resolve aria-label and/or aria-labelledby if not provided by the user\n\n  if (!root['aria-label'] && !root['aria-labelledby']) {\n    if (name) {\n      root['aria-label'] = name; // Include the badge in labelledby if it exists\n\n      if (badge) {\n        root['aria-labelledby'] = root.id + ' ' + badge.id;\n      }\n    } else if (initials) {\n      // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n      root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n    } // Add the active state to the aria label\n\n    if (active === 'active' || active === 'inactive') {\n      const activeText = DEFAULT_STRINGS[active];\n      if (root['aria-labelledby']) {\n        // If using aria-labelledby, render a hidden span and append it to the labelledby\n        const activeId = baseId + '__active';\n        root['aria-labelledby'] += ' ' + activeId;\n        activeAriaLabelElement = /*#__PURE__*/React.createElement(\"span\", {\n          hidden: true,\n          id: activeId\n        }, activeText);\n      } else if (root['aria-label']) {\n        // Otherwise, just append it to the aria-label\n        root['aria-label'] += ' ' + activeText;\n      }\n    }\n  }\n  return {\n    size,\n    shape,\n    active,\n    activeAppearance,\n    activeAriaLabelElement,\n    color,\n    components: {\n      root: 'span',\n      initials: 'span',\n      icon: 'span',\n      image: 'img',\n      badge: PresenceBadge\n    },\n    root,\n    initials,\n    icon,\n    image,\n    badge\n  };\n};\nconst getBadgeSize = size => {\n  if (size >= 96) {\n    return 'extra-large';\n  } else if (size >= 64) {\n    return 'large';\n  } else if (size >= 56) {\n    return 'medium';\n  } else if (size >= 40) {\n    return 'small';\n  } else if (size >= 28) {\n    return 'extra-small';\n  } else {\n    return 'tiny';\n  }\n};\nconst avatarColors = ['dark-red', 'cranberry', 'red', 'pumpkin', 'peach', 'marigold', 'gold', 'brass', 'brown', 'forest', 'seafoam', 'dark-green', 'light-teal', 'teal', 'steel', 'blue', 'royal-blue', 'cornflower', 'navy', 'lavender', 'purple', 'grape', 'lilac', 'pink', 'magenta', 'plum', 'beige', 'mink', 'platinum', 'anchor'];\nconst getHashCode = str => {\n  let hashCode = 0;\n  for (let len = str.length - 1; len >= 0; len--) {\n    const ch = str.charCodeAt(len);\n    const shift = len % 8;\n    hashCode ^= (ch << shift) + (ch >> 8 - shift); // eslint-disable-line no-bitwise\n  }\n\n  return hashCode;\n};","map":{"version":3,"mappings":"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","names":["React","getNativeElementProps","mergeCallbacks","resolveShorthand","useId","getInitials","PersonRegular","PresenceBadge","useFluent_unstable","useFluent","useAvatarContext","DEFAULT_STRINGS","active","inactive","useAvatar_unstable","props","ref","dir","size","contextSize","name","shape","activeAppearance","idForColor","color","avatarColors","getHashCode","_a","length","baseId","root","role","id","imageHidden","setImageHidden","useState","undefined","image","defaultProps","alt","hidden","onError","onLoad","initials","required","children","firstInitialOnly","icon","badge","getBadgeSize","activeAriaLabelElement","activeText","activeId","components","str","hashCode","len","ch","charCodeAt","shift"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-avatar\\lib\\components\\src\\packages\\react-components\\react-avatar\\src\\components\\Avatar\\useAvatar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { getInitials } from '../../utils/index';\nimport type { AvatarNamedColor, AvatarProps, AvatarState } from './Avatar.types';\nimport { PersonRegular } from '@fluentui/react-icons';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useAvatarContext } from '../../contexts/AvatarContext';\n\nexport const DEFAULT_STRINGS = {\n  active: 'active',\n  inactive: 'inactive',\n};\n\nexport const useAvatar_unstable = (props: AvatarProps, ref: React.Ref<HTMLElement>): AvatarState => {\n  const { dir } = useFluent();\n  const { size: contextSize } = useAvatarContext();\n  const {\n    name,\n    size = contextSize ?? (32 as const),\n    shape = 'circular',\n    active = 'unset',\n    activeAppearance = 'ring',\n    idForColor,\n  } = props;\n  let { color = 'neutral' } = props;\n\n  // Resolve 'colorful' to a specific color name\n  if (color === 'colorful') {\n    color = avatarColors[getHashCode(idForColor ?? name ?? '') % avatarColors.length];\n  }\n\n  const baseId = useId('avatar-');\n\n  const root: AvatarState['root'] = getNativeElementProps(\n    'span',\n    {\n      role: 'img',\n      id: baseId,\n      // aria-label and/or aria-labelledby are resolved below\n      ...props,\n      ref,\n    },\n    /* excludedPropNames: */ ['name'],\n  );\n\n  const [imageHidden, setImageHidden] = React.useState<true | undefined>(undefined);\n  const image: AvatarState['image'] = resolveShorthand(props.image, {\n    defaultProps: {\n      alt: '',\n      role: 'presentation',\n      'aria-hidden': true,\n      hidden: imageHidden,\n    },\n  });\n\n  // Hide the image if it fails to load and restore it on a successful load\n  if (image) {\n    image.onError = mergeCallbacks(image.onError, () => setImageHidden(true));\n    image.onLoad = mergeCallbacks(image.onLoad, () => setImageHidden(undefined));\n  }\n\n  // Resolve the initials slot, defaulted to getInitials.\n  let initials: AvatarState['initials'] = resolveShorthand(props.initials, {\n    required: true,\n    defaultProps: {\n      children: getInitials(name, dir === 'rtl', { firstInitialOnly: size <= 16 }),\n      id: baseId + '__initials',\n    },\n  });\n\n  // Don't render the initials slot if it's empty\n  if (!initials?.children) {\n    initials = undefined;\n  }\n\n  // Render the icon slot *only if* there aren't any initials or image to display\n  let icon: AvatarState['icon'] = undefined;\n  if (!initials && (!image || imageHidden)) {\n    icon = resolveShorthand(props.icon, {\n      required: true,\n      defaultProps: {\n        children: <PersonRegular />,\n        'aria-hidden': true,\n      },\n    });\n  }\n\n  const badge: AvatarState['badge'] = resolveShorthand(props.badge, {\n    defaultProps: {\n      size: getBadgeSize(size),\n      id: baseId + '__badge',\n    },\n  });\n\n  let activeAriaLabelElement: AvatarState['activeAriaLabelElement'];\n\n  // Resolve aria-label and/or aria-labelledby if not provided by the user\n  if (!root['aria-label'] && !root['aria-labelledby']) {\n    if (name) {\n      root['aria-label'] = name;\n\n      // Include the badge in labelledby if it exists\n      if (badge) {\n        root['aria-labelledby'] = root.id + ' ' + badge.id;\n      }\n    } else if (initials) {\n      // root's aria-label should be the name, but fall back to being labelledby the initials if name is missing\n      root['aria-labelledby'] = initials.id + (badge ? ' ' + badge.id : '');\n    }\n\n    // Add the active state to the aria label\n    if (active === 'active' || active === 'inactive') {\n      const activeText = DEFAULT_STRINGS[active];\n      if (root['aria-labelledby']) {\n        // If using aria-labelledby, render a hidden span and append it to the labelledby\n        const activeId = baseId + '__active';\n        root['aria-labelledby'] += ' ' + activeId;\n        activeAriaLabelElement = (\n          <span hidden id={activeId}>\n            {activeText}\n          </span>\n        );\n      } else if (root['aria-label']) {\n        // Otherwise, just append it to the aria-label\n        root['aria-label'] += ' ' + activeText;\n      }\n    }\n  }\n\n  return {\n    size,\n    shape,\n    active,\n    activeAppearance,\n    activeAriaLabelElement,\n    color,\n\n    components: {\n      root: 'span',\n      initials: 'span',\n      icon: 'span',\n      image: 'img',\n      badge: PresenceBadge,\n    },\n\n    root,\n    initials,\n    icon,\n    image,\n    badge,\n  };\n};\n\nconst getBadgeSize = (size: AvatarState['size']) => {\n  if (size >= 96) {\n    return 'extra-large';\n  } else if (size >= 64) {\n    return 'large';\n  } else if (size >= 56) {\n    return 'medium';\n  } else if (size >= 40) {\n    return 'small';\n  } else if (size >= 28) {\n    return 'extra-small';\n  } else {\n    return 'tiny';\n  }\n};\n\nconst avatarColors: AvatarNamedColor[] = [\n  'dark-red',\n  'cranberry',\n  'red',\n  'pumpkin',\n  'peach',\n  'marigold',\n  'gold',\n  'brass',\n  'brown',\n  'forest',\n  'seafoam',\n  'dark-green',\n  'light-teal',\n  'teal',\n  'steel',\n  'blue',\n  'royal-blue',\n  'cornflower',\n  'navy',\n  'lavender',\n  'purple',\n  'grape',\n  'lilac',\n  'pink',\n  'magenta',\n  'plum',\n  'beige',\n  'mink',\n  'platinum',\n  'anchor',\n];\n\nconst getHashCode = (str: string): number => {\n  let hashCode = 0;\n  for (let len: number = str.length - 1; len >= 0; len--) {\n    const ch = str.charCodeAt(len);\n    const shift = len % 8;\n    hashCode ^= (ch << shift) + (ch >> (8 - shift)); // eslint-disable-line no-bitwise\n  }\n\n  return hashCode;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}