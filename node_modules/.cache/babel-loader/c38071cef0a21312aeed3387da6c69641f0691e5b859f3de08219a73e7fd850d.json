{"ast":null,"code":"import { isValidElement } from 'react';\n/**\n * Resolves shorthands into slot props, to ensure normalization of the signature\n * being passed down to getSlots method\n * @param value - the base shorthand props\n * @param options - options to resolve shorthand props\n */\n\nexport const resolveShorthand = (value, options) => {\n  const {\n    required = false,\n    defaultProps\n  } = options || {};\n  if (value === null || value === undefined && !required) {\n    return undefined;\n  }\n  let resolvedShorthand = {};\n  if (typeof value === 'string' || typeof value === 'number' || Array.isArray(value) || /*#__PURE__*/isValidElement(value)) {\n    resolvedShorthand.children = value;\n  } else if (typeof value === 'object') {\n    resolvedShorthand = value;\n  }\n  return defaultProps ? {\n    ...defaultProps,\n    ...resolvedShorthand\n  } : resolvedShorthand;\n};","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,OAA/B;AAkBA;;;;;AAKG;;AACH,OAAO,MAAMC,gBAAgB,GAA6B,CAACC,KAAD,EAAQC,OAAR,KAAmB;EAC3E,MAAM;IAAEC,QAAQ,GAAG,KAAb;IAAoBC;EAApB,IAAqCF,OAAO,IAAI,EAAtD;EACA,IAAID,KAAK,KAAK,IAAV,IAAmBA,KAAK,KAAKI,SAAV,IAAuB,CAACF,QAA/C,EAA0D;IACxD,OAAOE,SAAP;EACD;EAED,IAAIC,iBAAiB,GAAG,EAAxB;EAEA,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,IAA0DM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAA1D,iBAAkFF,cAAc,CAACE,KAAD,CAApG,EAA6G;IAC3GK,iBAAiB,CAACG,QAAlB,GAA6BR,KAA7B;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IACpCK,iBAAiB,GAAGL,KAApB;EACD;EAED,OAAOG,YAAY,GAAG;IAAE,GAAGA,YAAL;IAAmB,GAAGE;EAAtB,CAAH,GAA+CA,iBAAlE;AACD,CAfM","names":["isValidElement","resolveShorthand","value","options","required","defaultProps","undefined","resolvedShorthand","Array","isArray","children"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\compose\\resolveShorthand.ts"],"sourcesContent":["import { isValidElement } from 'react';\nimport type { ReplaceNullWithUndefined, SlotShorthandValue, UnknownSlotProps } from './types';\n\nexport type ResolveShorthandOptions<Props, Required extends boolean = false> = {\n  required?: Required;\n  defaultProps?: Props;\n};\n\nexport type ResolveShorthandFunction<Props extends UnknownSlotProps = UnknownSlotProps> = {\n  <P extends Props | null>(\n    value: P | SlotShorthandValue | undefined,\n    options?: ResolveShorthandOptions<P, true>,\n  ): ReplaceNullWithUndefined<P>;\n  <P extends Props | null>(value: P | SlotShorthandValue | undefined, options?: ResolveShorthandOptions<P, boolean>):\n    | ReplaceNullWithUndefined<P>\n    | undefined;\n};\n\n/**\n * Resolves shorthands into slot props, to ensure normalization of the signature\n * being passed down to getSlots method\n * @param value - the base shorthand props\n * @param options - options to resolve shorthand props\n */\nexport const resolveShorthand: ResolveShorthandFunction = (value, options) => {\n  const { required = false, defaultProps } = options || {};\n  if (value === null || (value === undefined && !required)) {\n    return undefined;\n  }\n\n  let resolvedShorthand = {} as UnknownSlotProps;\n\n  if (typeof value === 'string' || typeof value === 'number' || Array.isArray(value) || isValidElement(value)) {\n    resolvedShorthand.children = value;\n  } else if (typeof value === 'object') {\n    resolvedShorthand = value;\n  }\n\n  return defaultProps ? { ...defaultProps, ...resolvedShorthand } : resolvedShorthand;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}