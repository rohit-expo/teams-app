{"ast":null,"code":"import { getNativeElementProps } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Text.\n *\n * The returned state can be modified with hooks such as useTextStyles_unstable,\n * before being passed to renderText_unstable.\n *\n * @param props - props from this instance of Text\n * @param ref - reference to root HTMLElement of Text\n */\n\nexport const useText_unstable = (props, ref) => {\n  var _a;\n  const {\n    wrap,\n    truncate,\n    block,\n    italic,\n    underline,\n    strikethrough,\n    size,\n    font,\n    weight,\n    align\n  } = props;\n  const as = (_a = props.as) !== null && _a !== void 0 ? _a : 'span';\n  const state = {\n    align: align !== null && align !== void 0 ? align : 'start',\n    block: block !== null && block !== void 0 ? block : false,\n    font: font !== null && font !== void 0 ? font : 'base',\n    italic: italic !== null && italic !== void 0 ? italic : false,\n    size: size !== null && size !== void 0 ? size : 300,\n    strikethrough: strikethrough !== null && strikethrough !== void 0 ? strikethrough : false,\n    truncate: truncate !== null && truncate !== void 0 ? truncate : false,\n    underline: underline !== null && underline !== void 0 ? underline : false,\n    weight: weight !== null && weight !== void 0 ? weight : 'regular',\n    wrap: wrap !== null && wrap !== void 0 ? wrap : true,\n    components: {\n      root: 'span'\n    },\n    root: getNativeElementProps(as, {\n      ref,\n      ...props,\n      as\n    })\n  };\n  return state;\n};","map":{"version":3,"mappings":"AACA,SAASA,qBAAT,QAAsC,2BAAtC;AAGA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAmBC,GAAnB,KAA6D;;EAC3F,MAAM;IAAEC,IAAF;IAAQC,QAAR;IAAkBC,KAAlB;IAAyBC,MAAzB;IAAiCC,SAAjC;IAA4CC,aAA5C;IAA2DC,IAA3D;IAAiEC,IAAjE;IAAuEC,MAAvE;IAA+EC;EAA/E,IAAyFX,KAA/F;EACA,MAAMY,EAAE,GAAG,WAAK,CAACA,EAAN,MAAQ,IAAR,IAAQC,aAAR,GAAQA,EAAR,GAAY,MAAvB;EAEA,MAAMC,KAAK,GAAc;IACvBH,KAAK,EAAEA,KAAK,SAAL,SAAK,WAAL,WAAS,OADO;IAEvBP,KAAK,EAAEA,KAAK,SAAL,SAAK,WAAL,WAAS,KAFO;IAGvBK,IAAI,EAAEA,IAAI,SAAJ,QAAI,WAAJ,UAAQ,MAHS;IAIvBJ,MAAM,EAAEA,MAAM,SAAN,UAAM,WAAN,YAAU,KAJK;IAKvBG,IAAI,EAAEA,IAAI,SAAJ,QAAI,WAAJ,UAAQ,GALS;IAMvBD,aAAa,EAAEA,aAAa,SAAb,iBAAa,WAAb,mBAAiB,KANT;IAOvBJ,QAAQ,EAAEA,QAAQ,SAAR,YAAQ,WAAR,cAAY,KAPC;IAQvBG,SAAS,EAAEA,SAAS,SAAT,aAAS,WAAT,eAAa,KARD;IASvBI,MAAM,EAAEA,MAAM,SAAN,UAAM,WAAN,YAAU,SATK;IAUvBR,IAAI,EAAEA,IAAI,SAAJ,QAAI,WAAJ,UAAQ,IAVS;IAYvBa,UAAU,EAAE;MAAEC,IAAI,EAAE;IAAR,CAZW;IAcvBA,IAAI,EAAElB,qBAAqB,CAACc,EAAD,EAAK;MAC9BX,GAD8B;MAE9B,GAAGD,KAF2B;MAG9BY;IAH8B,CAAL;EAdJ,CAAzB;EAqBA,OAAOE,KAAP;AACD,CA1BM","names":["getNativeElementProps","useText_unstable","props","ref","wrap","truncate","block","italic","underline","strikethrough","size","font","weight","align","as","_a","state","components","root"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-text\\lib\\components\\src\\packages\\react-components\\react-text\\src\\components\\Text\\useText.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps } from '@fluentui/react-utilities';\nimport type { TextProps, TextState } from './Text.types';\n\n/**\n * Create the state required to render Text.\n *\n * The returned state can be modified with hooks such as useTextStyles_unstable,\n * before being passed to renderText_unstable.\n *\n * @param props - props from this instance of Text\n * @param ref - reference to root HTMLElement of Text\n */\nexport const useText_unstable = (props: TextProps, ref: React.Ref<HTMLElement>): TextState => {\n  const { wrap, truncate, block, italic, underline, strikethrough, size, font, weight, align } = props;\n  const as = props.as ?? 'span';\n\n  const state: TextState = {\n    align: align ?? 'start',\n    block: block ?? false,\n    font: font ?? 'base',\n    italic: italic ?? false,\n    size: size ?? 300,\n    strikethrough: strikethrough ?? false,\n    truncate: truncate ?? false,\n    underline: underline ?? false,\n    weight: weight ?? 'regular',\n    wrap: wrap ?? true,\n\n    components: { root: 'span' },\n\n    root: getNativeElementProps(as, {\n      ref,\n      ...props,\n      as,\n    }),\n  };\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}