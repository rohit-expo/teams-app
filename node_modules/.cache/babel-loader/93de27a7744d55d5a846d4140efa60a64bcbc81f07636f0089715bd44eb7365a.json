{"ast":null,"code":"import { createContext, useContextSelector } from '@fluentui/react-context-selector';\n/**\n * RadioGroupContext is provided by RadioGroup, and is consumed by Radio to determine default values of some props.\n */\n\nexport const RadioGroupContext = /*#__PURE__*/createContext(undefined);\nconst radioGroupContextDefaultValue = {};\nexport const RadioGroupProvider = RadioGroupContext.Provider;\nexport const useRadioGroupContext_unstable = selector => useContextSelector(RadioGroupContext, function () {\n  let ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : radioGroupContextDefaultValue;\n  return selector(ctx);\n});","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,QAAmE,kCAAnE;AAIA;;AAEG;;AACH,OAAO,MAAMC,iBAAiB,gBAAoCF,aAAa,CAC7EG,SAD6E,CAAxE;AAIP,MAAMC,6BAA6B,GAA2B,EAA9D;AAEA,OAAO,MAAMC,kBAAkB,GAAGH,iBAAiB,CAACI,QAA7C;AAEP,OAAO,MAAMC,6BAA6B,GAAOC,QAAJ,IAC3CP,kBAAkB,CAACC,iBAAD,EAAoB;EAAA,IAACO,GAAG,uEAAGL,6BAAP;EAAA,OAAyCI,QAAQ,CAACC,GAAD,CAArE;AAAA,EADb","names":["createContext","useContextSelector","RadioGroupContext","undefined","radioGroupContextDefaultValue","RadioGroupProvider","Provider","useRadioGroupContext_unstable","selector","ctx"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-radio\\lib\\src\\packages\\react-components\\react-radio\\src\\contexts\\RadioGroupContext.ts"],"sourcesContent":["import { createContext, useContextSelector, ContextSelector } from '@fluentui/react-context-selector';\nimport type { Context } from '@fluentui/react-context-selector';\nimport type { RadioGroupContextValue } from '../RadioGroup';\n\n/**\n * RadioGroupContext is provided by RadioGroup, and is consumed by Radio to determine default values of some props.\n */\nexport const RadioGroupContext: Context<RadioGroupContextValue> = createContext<RadioGroupContextValue | undefined>(\n  undefined,\n) as Context<RadioGroupContextValue>;\n\nconst radioGroupContextDefaultValue: RadioGroupContextValue = {};\n\nexport const RadioGroupProvider = RadioGroupContext.Provider;\n\nexport const useRadioGroupContext_unstable = <T>(selector: ContextSelector<RadioGroupContextValue, T>): T =>\n  useContextSelector(RadioGroupContext, (ctx = radioGroupContextDefaultValue) => selector(ctx));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}