{"ast":null,"code":"import { labelProperties, audioProperties, videoProperties, olProperties, liProperties, anchorProperties, buttonProperties, inputProperties, textAreaProperties, selectProperties, optionProperties, tableProperties, trProperties, thProperties, tdProperties, colGroupProperties, colProperties, fieldsetProperties, formProperties, iframeProperties, imgProperties, htmlElementProperties, getNativeProps, timeProperties, dialogProperties } from './properties';\nconst nativeElementMap = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  fieldset: fieldsetProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n  time: timeProperties,\n  dialog: dialogProperties\n};\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function getNativeElementProps(tagName, props, excludedPropNames) {\n  const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;\n  allowedPropNames.as = 1;\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n/**\n * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.\n *\n * This function is only for use with components that have a primary slot other than `root`.\n * Most components should use {@link getNativeElementProps} for their root slot if it is the primary slot.\n *\n * @returns An object containing the native props for the `root` and primary slots.\n */\n\nexport const getPartitionedNativeProps = _ref => {\n  let {\n    primarySlotTagName,\n    props,\n    excludedPropNames\n  } = _ref;\n  return {\n    root: {\n      style: props.style,\n      className: props.className\n    },\n    primary: getNativeElementProps(primarySlotTagName, props, [...(excludedPropNames || []), 'style', 'className'])\n  };\n};","map":{"version":3,"mappings":"AACA,SACEA,eADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,gBANF,EAOEC,gBAPF,EAQEC,eARF,EASEC,kBATF,EAUEC,gBAVF,EAWEC,gBAXF,EAYEC,eAZF,EAaEC,YAbF,EAcEC,YAdF,EAeEC,YAfF,EAgBEC,kBAhBF,EAiBEC,aAjBF,EAkBEC,kBAlBF,EAmBEC,cAnBF,EAoBEC,gBApBF,EAqBEC,aArBF,EAsBEC,qBAtBF,EAuBEC,cAvBF,EAwBEC,cAxBF,EAyBEC,gBAzBF,QA0BO,cA1BP;AA4BA,MAAMC,gBAAgB,GAA2C;EAC/DC,KAAK,EAAE1B,eADwD;EAE/D2B,KAAK,EAAE1B,eAFwD;EAG/D2B,KAAK,EAAE1B,eAHwD;EAI/D2B,EAAE,EAAE1B,YAJ2D;EAK/D2B,EAAE,EAAE1B,YAL2D;EAM/D2B,CAAC,EAAE1B,gBAN4D;EAO/D2B,MAAM,EAAE1B,gBAPuD;EAQ/D2B,KAAK,EAAE1B,eARwD;EAS/D2B,QAAQ,EAAE1B,kBATqD;EAU/D2B,MAAM,EAAE1B,gBAVuD;EAW/D2B,MAAM,EAAE1B,gBAXuD;EAY/D2B,KAAK,EAAE1B,eAZwD;EAa/D2B,EAAE,EAAE1B,YAb2D;EAc/D2B,EAAE,EAAE1B,YAd2D;EAe/D2B,EAAE,EAAE1B,YAf2D;EAgB/D2B,QAAQ,EAAE1B,kBAhBqD;EAiB/D2B,GAAG,EAAE1B,aAjB0D;EAkB/D2B,QAAQ,EAAE1B,kBAlBqD;EAmB/D2B,IAAI,EAAE1B,cAnByD;EAoB/D2B,MAAM,EAAE1B,gBApBuD;EAqB/D2B,GAAG,EAAE1B,aArB0D;EAsB/D2B,IAAI,EAAExB,cAtByD;EAuB/DyB,MAAM,EAAExB;AAvBuD,CAAjE;AA0BA;;;;;;AAMG;AACH;;AACA,OAAM,SAAUyB,qBAAV,CACJC,OADI,EAEJC,KAFI,EAGJC,iBAHI,EAGwB;EAE5B,MAAMC,gBAAgB,GAAIH,OAAO,IAAIzB,gBAAgB,CAACyB,OAAD,CAA5B,IAA0C7B,qBAAnE;EACAgC,gBAAgB,CAACC,EAAjB,GAAsB,CAAtB;EAEA,OAAOhC,cAAc,CAAC6B,KAAD,EAAQE,gBAAR,EAA0BD,iBAA1B,CAArB;AACD;AAED;;;;;;;AAOG;;AACH,OAAO,MAAMG,yBAAyB,GAAG,QAgBpC;EAAA,IAbH;IACAC,kBADA;IAEAL,KAFA;IAGAC;EAHA,CAHuC;EAiBvC,OAAO;IACLK,IAAI,EAAE;MAAEC,KAAK,EAAEP,KAAK,CAACO,KAAf;MAAsBC,SAAS,EAAER,KAAK,CAACQ;IAAvC,CADD;IAELC,OAAO,EAAEX,qBAAqB,CAAgCO,kBAAhC,EAAoDL,KAApD,EAA2D,CACvF,IAAIC,iBAAiB,IAAI,EAAzB,CADuF,EAEvF,OAFuF,EAGvF,WAHuF,CAA3D;EAFzB,CAAP;AAQD,CAzBM","names":["labelProperties","audioProperties","videoProperties","olProperties","liProperties","anchorProperties","buttonProperties","inputProperties","textAreaProperties","selectProperties","optionProperties","tableProperties","trProperties","thProperties","tdProperties","colGroupProperties","colProperties","fieldsetProperties","formProperties","iframeProperties","imgProperties","htmlElementProperties","getNativeProps","timeProperties","dialogProperties","nativeElementMap","label","audio","video","ol","li","a","button","input","textarea","select","option","table","tr","th","td","colGroup","col","fieldset","form","iframe","img","time","dialog","getNativeElementProps","tagName","props","excludedPropNames","allowedPropNames","as","getPartitionedNativeProps","primarySlotTagName","root","style","className","primary"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\utils\\getNativeElementProps.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  fieldsetProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n  timeProperties,\n  dialogProperties,\n} from './properties';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  fieldset: fieldsetProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n  time: timeProperties,\n  dialog: dialogProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n  allowedPropNames.as = 1;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n\n/**\n * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.\n *\n * This function is only for use with components that have a primary slot other than `root`.\n * Most components should use {@link getNativeElementProps} for their root slot if it is the primary slot.\n *\n * @returns An object containing the native props for the `root` and primary slots.\n */\nexport const getPartitionedNativeProps = <\n  Props extends Pick<React.HTMLAttributes<HTMLElement>, 'style' | 'className'>,\n  ExcludedPropKeys extends Extract<keyof Props, string> = never\n>({\n  primarySlotTagName,\n  props,\n  excludedPropNames,\n}: {\n  /** The primary slot's element type (e.g. 'div') */\n  primarySlotTagName: keyof JSX.IntrinsicElements;\n\n  /** The component's props object */\n  props: Props;\n\n  /** List of native props to exclude from the returned value */\n  excludedPropNames?: ExcludedPropKeys[];\n}) => {\n  return {\n    root: { style: props.style, className: props.className },\n    primary: getNativeElementProps<Omit<Props, ExcludedPropKeys>>(primarySlotTagName, props, [\n      ...(excludedPropNames || []),\n      'style',\n      'className',\n    ]),\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}