{"ast":null,"code":"import * as React from 'react';\n/**\n * @internal\n * Helper to manage a browser timeout.\n * Ensures that the timeout isn't set multiple times at once,\n * and is cleaned up when the component is unloaded.\n *\n * @returns A pair of [setTimeout, clearTimeout] that are stable between renders.\n */\n\nexport function useTimeout() {\n  const [timeout] = React.useState(() => ({\n    id: undefined,\n    set: (fn, delay) => {\n      timeout.clear();\n      timeout.id = setTimeout(fn, delay);\n    },\n    clear: () => {\n      if (timeout.id !== undefined) {\n        clearTimeout(timeout.id);\n        timeout.id = undefined;\n      }\n    }\n  })); // Clean up the timeout when the component is unloaded\n\n  React.useEffect(() => timeout.clear, [timeout]);\n  return [timeout.set, timeout.clear];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;AAOG;;AACH,OAAM,SAAUC,UAAV,GAAoB;EACxB,MAAM,CAACC,OAAD,IAAYF,KAAK,CAACG,QAAN,CAAe,OAAO;IACtCC,EAAE,EAAEC,SADkC;IAEtCC,GAAG,EAAE,CAACC,EAAD,EAAiBC,KAAjB,KAAkC;MACrCN,OAAO,CAACO,KAAR;MACAP,OAAO,CAACE,EAAR,GAAaM,UAAU,CAACH,EAAD,EAAKC,KAAL,CAAvB;IACD,CALqC;IAMtCC,KAAK,EAAE,MAAK;MACV,IAAIP,OAAO,CAACE,EAAR,KAAeC,SAAnB,EAA8B;QAC5BM,YAAY,CAACT,OAAO,CAACE,EAAT,CAAZ;QACAF,OAAO,CAACE,EAAR,GAAaC,SAAb;MACD;IACF;EAXqC,CAAP,CAAf,CAAlB,CADwB,CAexB;;EACAL,KAAK,CAACY,SAAN,CAAgB,MAAMV,OAAO,CAACO,KAA9B,EAAqC,CAACP,OAAD,CAArC;EAEA,OAAO,CAACA,OAAO,CAACI,GAAT,EAAcJ,OAAO,CAACO,KAAtB,CAAP;AACD","names":["React","useTimeout","timeout","useState","id","undefined","set","fn","delay","clear","setTimeout","clearTimeout","useEffect"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\hooks\\useTimeout.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * @internal\n * Helper to manage a browser timeout.\n * Ensures that the timeout isn't set multiple times at once,\n * and is cleaned up when the component is unloaded.\n *\n * @returns A pair of [setTimeout, clearTimeout] that are stable between renders.\n */\nexport function useTimeout() {\n  const [timeout] = React.useState(() => ({\n    id: undefined as ReturnType<typeof setTimeout> | undefined,\n    set: (fn: () => void, delay: number) => {\n      timeout.clear();\n      timeout.id = setTimeout(fn, delay);\n    },\n    clear: () => {\n      if (timeout.id !== undefined) {\n        clearTimeout(timeout.id);\n        timeout.id = undefined;\n      }\n    },\n  }));\n\n  // Clean up the timeout when the component is unloaded\n  React.useEffect(() => timeout.clear, [timeout]);\n\n  return [timeout.set, timeout.clear] as const;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}