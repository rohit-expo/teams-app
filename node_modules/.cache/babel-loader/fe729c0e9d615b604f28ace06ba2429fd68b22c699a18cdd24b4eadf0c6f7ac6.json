{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ServerTelemetryManager = /** @class */function () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (!StringUtils.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n  return ServerTelemetryManager;\n}();\nexport { ServerTelemetryManager };","map":{"version":3,"mappings":"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","names":["ServerTelemetryManager","cacheManager","CacheOutcome","NO_CACHE_HIT","apiId","telemetryRequest","correlationId","wrapperSKU","Constants","EMPTY_STRING","wrapperVer","telemetryCacheKey","SERVER_TELEM_CONSTANTS","CACHE_KEY","Separators","CACHE_KEY_SEPARATOR","clientId","request","VALUE_SEPARATOR","cacheOutcome","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","error","MAX_CACHED_ERRORS","shift","push","StringUtils","isEmpty","subError","errorCode","toString","UNKNOWN_ERROR","setServerTelemetry","initialValue","ServerTelemetryEntity","getServerTelemetry","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","regionDiscoveryMetadata","region_used","region_source","region_outcome"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\telemetry\\server\\ServerTelemetryManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { SERVER_TELEM_CONSTANTS, Separators, CacheOutcome, Constants, RegionDiscoverySources, RegionDiscoveryOutcomes } from \"../../utils/Constants\";\r\nimport { CacheManager } from \"../../cache/CacheManager\";\r\nimport { AuthError } from \"../../error/AuthError\";\r\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\r\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\r\n\r\nexport class ServerTelemetryManager {\r\n    private cacheManager: CacheManager;\r\n    private apiId: number;\r\n    private correlationId: string;\r\n    private telemetryCacheKey: string;\r\n    private wrapperSKU: String;\r\n    private wrapperVer: String;\r\n    private regionUsed: string | undefined;\r\n    private regionSource: RegionDiscoverySources | undefined;\r\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\r\n    private cacheOutcome: CacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n\r\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue(): string {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue(): string {\r\n        const lastRequests = this.getLastRequests();\r\n\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error: AuthError): void {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        \r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        } else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        } else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits(): number {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    }\r\n\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests(): ServerTelemetryEntity {\r\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\r\n\r\n        return lastRequests || initialValue;\r\n    }\r\n\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache(): void {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        } else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return maxErrors;\r\n    }\r\n\r\n    /**\r\n     * Get the region discovery fields\r\n     * \r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields(): string {\r\n        const regionDiscoveryFields: string[] = [];\r\n\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Update the region discovery metadata\r\n     * \r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n\r\n    /**\r\n     * Set cache outcome \r\n     */\r\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}