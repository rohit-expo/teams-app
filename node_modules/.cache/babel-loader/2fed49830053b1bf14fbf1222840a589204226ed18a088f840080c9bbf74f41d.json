{"ast":null,"code":"import { serialize, compile, middleware, prefixer, stringify, rulesheet } from 'stylis';\nimport { globalPlugin } from './stylis/globalPlugin.esm.js';\nimport { hyphenateProperty } from './utils/hyphenateProperty.esm.js';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty.esm.js';\nconst PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;\n/**\r\n * Normalizes pseudo selectors to always contain &, requires to work properly with comma-separated selectors.\r\n *\r\n * @example\r\n *   \":hover\" => \"&:hover\"\r\n *   \" :hover\" => \"& :hover\"\r\n *   \":hover,:focus\" => \"&:hover,&:focus\"\r\n *   \" :hover, :focus\" => \"& :hover,& :focus\"\r\n */\nfunction normalizePseudoSelector(pseudoSelector) {\n  return '&' + normalizeNestedProperty(\n  // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.\n  // This allows to normalize input, see examples in JSDoc.\n  pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ',&$1'));\n}\nfunction compileCSSRules(cssRules) {\n  const rules = [];\n  serialize(compile(cssRules), middleware([globalPlugin, prefixer, stringify,\n  // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n  // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n  // individual rules to be used with this API\n  rulesheet(rule => rules.push(rule))]));\n  return rules;\n}\nfunction createCSSRule(classNameSelector, cssDeclaration, pseudos) {\n  let cssRule = cssDeclaration;\n  if (pseudos.length > 0) {\n    cssRule = pseudos.reduceRight((acc, selector) => {\n      return `${normalizePseudoSelector(selector)} { ${acc} }`;\n    }, cssDeclaration);\n  }\n  return `${classNameSelector}{${cssRule}}`;\n}\nfunction compileCSS(options) {\n  const {\n    className,\n    media,\n    layer,\n    selectors,\n    support,\n    property,\n    rtlClassName,\n    rtlProperty,\n    rtlValue,\n    value\n  } = options;\n  const classNameSelector = `.${className}`;\n  const cssDeclaration = Array.isArray(value) ? `${value.map(v => `${hyphenateProperty(property)}: ${v}`).join(';')};` : `${hyphenateProperty(property)}: ${value};`;\n  let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);\n  if (rtlProperty && rtlClassName) {\n    const rtlClassNameSelector = `.${rtlClassName}`;\n    const rtlCSSDeclaration = Array.isArray(rtlValue) ? `${rtlValue.map(v => `${hyphenateProperty(rtlProperty)}: ${v}`).join(';')};` : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;\n    cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);\n  }\n  if (media) {\n    cssRule = `@media ${media} { ${cssRule} }`;\n  }\n  if (layer) {\n    cssRule = `@layer ${layer} { ${cssRule} }`;\n  }\n  if (support) {\n    cssRule = `@supports ${support} { ${cssRule} }`;\n  }\n  return compileCSSRules(cssRule);\n}\nexport { compileCSS, compileCSSRules, normalizePseudoSelector };","map":{"version":3,"mappings":";;;;AAsBA,MAAMA,qBAAqB,GAAG,aAAa;AAE3C;;;;;;;;;SASgBC,uBAAuB,CAACC,cAAsB;EAC5D,OACE,GAAG,GACHC,uBAAuB;;;EAGrBD,cAAc,CAACE,OAAO,CAACJ,qBAAqB,EAAE,MAAM,CAAC,CACtD;AAEL;SAEgBK,eAAe,CAACC,QAAgB;EAC9C,MAAMC,KAAK,GAAa,EAAE;EAE1BC,SAAS,CACPC,OAAO,CAACH,QAAQ,CAAC,EACjBI,UAAU,CAAC,CACTC,YAAY,EACZC,QAAQ,EACRC,SAAS;;;;EAKTC,SAAS,CAACC,IAAI,IAAIR,KAAK,CAACS,IAAI,CAACD,IAAI,CAAC,CAAC,CACpC,CAAC,CACH;EAED,OAAOR,KAAK;AACd;AAEA,SAASU,aAAa,CAACC,iBAAyB,EAAEC,cAAsB,EAAEC,OAAiB;EACzF,IAAIC,OAAO,GAAGF,cAAc;EAE5B,IAAIC,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACtBD,OAAO,GAAGD,OAAO,CAACG,WAAW,CAAC,CAACC,GAAG,EAAEC,QAAQ;MAC1C,UAAUxB,uBAAuB,CAACwB,QAAQ,OAAOD,OAAO;KACzD,EAAEL,cAAc,CAAC;;EAGpB,UAAUD,qBAAqBG,UAAU;AAC3C;SAEgBK,UAAU,CAACC,OAA0B;EACnD,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,KAAK;IAAEC,SAAS;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,WAAW;IAAEC,QAAQ;IAAEC;GAAO,GAAGV,OAAO;EAErH,MAAMT,iBAAiB,OAAOU,WAAW;EACzC,MAAMT,cAAc,GAAGmB,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,MACpCA,KAAK,CAACG,GAAG,CAACC,CAAC,OAAOC,iBAAiB,CAACT,QAAQ,MAAMQ,GAAG,CAAC,CAACE,IAAI,CAAC,GAAG,IAAI,MACnED,iBAAiB,CAACT,QAAQ,MAAMI,QAAQ;EAE/C,IAAIhB,OAAO,GAAGJ,aAAa,CAACC,iBAAiB,EAAEC,cAAc,EAAEY,SAAS,CAAC;EAEzE,IAAII,WAAW,IAAID,YAAY,EAAE;IAC/B,MAAMU,oBAAoB,OAAOV,cAAc;IAC/C,MAAMW,iBAAiB,GAAGP,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,MAC1CA,QAAQ,CAACI,GAAG,CAACC,CAAC,OAAOC,iBAAiB,CAACP,WAAW,MAAMM,GAAG,CAAC,CAACE,IAAI,CAAC,GAAG,IAAI,MACzED,iBAAiB,CAACP,WAAW,MAAMC,WAAW;IAErDf,OAAO,IAAIJ,aAAa,CAAC2B,oBAAoB,EAAEC,iBAAiB,EAAEd,SAAS,CAAC;;EAG9E,IAAIF,KAAK,EAAE;IACTR,OAAO,aAAaQ,WAAWR,WAAW;;EAG5C,IAAIS,KAAK,EAAE;IACTT,OAAO,aAAaS,WAAWT,WAAW;;EAG5C,IAAIW,OAAO,EAAE;IACXX,OAAO,gBAAgBW,aAAaX,WAAW;;EAGjD,OAAOhB,eAAe,CAACgB,OAAO,CAAuB;AACvD","names":["PSEUDO_SELECTOR_REGEX","normalizePseudoSelector","pseudoSelector","normalizeNestedProperty","replace","compileCSSRules","cssRules","rules","serialize","compile","middleware","globalPlugin","prefixer","stringify","rulesheet","rule","push","createCSSRule","classNameSelector","cssDeclaration","pseudos","cssRule","length","reduceRight","acc","selector","compileCSS","options","className","media","layer","selectors","support","property","rtlClassName","rtlProperty","rtlValue","value","Array","isArray","map","v","hyphenateProperty","join","rtlClassNameSelector","rtlCSSDeclaration"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\packages\\core\\src\\runtime\\compileCSS.ts"],"sourcesContent":["import { compile, middleware, prefixer, rulesheet, serialize, stringify } from 'stylis';\n\nimport { globalPlugin } from './stylis/globalPlugin';\nimport { hyphenateProperty } from './utils/hyphenateProperty';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty';\n\nexport interface CompileCSSOptions {\n  className: string;\n\n  selectors: string[];\n  media: string;\n  layer: string;\n  support: string;\n\n  property: string;\n  value: number | string | Array<number | string>;\n\n  rtlClassName?: string;\n  rtlProperty?: string;\n  rtlValue?: number | string | Array<number | string>;\n}\n\nconst PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;\n\n/**\n * Normalizes pseudo selectors to always contain &, requires to work properly with comma-separated selectors.\n *\n * @example\n *   \":hover\" => \"&:hover\"\n *   \" :hover\" => \"& :hover\"\n *   \":hover,:focus\" => \"&:hover,&:focus\"\n *   \" :hover, :focus\" => \"& :hover,& :focus\"\n */\nexport function normalizePseudoSelector(pseudoSelector: string): string {\n  return (\n    '&' +\n    normalizeNestedProperty(\n      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.\n      // This allows to normalize input, see examples in JSDoc.\n      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ',&$1'),\n    )\n  );\n}\n\nexport function compileCSSRules(cssRules: string): string[] {\n  const rules: string[] = [];\n\n  serialize(\n    compile(cssRules),\n    middleware([\n      globalPlugin,\n      prefixer,\n      stringify,\n\n      // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support\n      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts\n      // individual rules to be used with this API\n      rulesheet(rule => rules.push(rule)),\n    ]),\n  );\n\n  return rules;\n}\n\nfunction createCSSRule(classNameSelector: string, cssDeclaration: string, pseudos: string[]): string {\n  let cssRule = cssDeclaration;\n\n  if (pseudos.length > 0) {\n    cssRule = pseudos.reduceRight((acc, selector) => {\n      return `${normalizePseudoSelector(selector)} { ${acc} }`;\n    }, cssDeclaration);\n  }\n\n  return `${classNameSelector}{${cssRule}}`;\n}\n\nexport function compileCSS(options: CompileCSSOptions): [string? /* ltr definition */, string? /* rtl definition */] {\n  const { className, media, layer, selectors, support, property, rtlClassName, rtlProperty, rtlValue, value } = options;\n\n  const classNameSelector = `.${className}`;\n  const cssDeclaration = Array.isArray(value)\n    ? `${value.map(v => `${hyphenateProperty(property)}: ${v}`).join(';')};`\n    : `${hyphenateProperty(property)}: ${value};`;\n\n  let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);\n\n  if (rtlProperty && rtlClassName) {\n    const rtlClassNameSelector = `.${rtlClassName}`;\n    const rtlCSSDeclaration = Array.isArray(rtlValue)\n      ? `${rtlValue.map(v => `${hyphenateProperty(rtlProperty)}: ${v}`).join(';')};`\n      : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;\n\n    cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);\n  }\n\n  if (media) {\n    cssRule = `@media ${media} { ${cssRule} }`;\n  }\n\n  if (layer) {\n    cssRule = `@layer ${layer} { ${cssRule} }`;\n  }\n\n  if (support) {\n    cssRule = `@supports ${support} { ${cssRule} }`;\n  }\n\n  return compileCSSRules(cssRule) as [string?, string?];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}