{"ast":null,"code":"import * as React from 'react';\nimport { createVirtualElementFromClick } from './createVirtualElementFromClick';\n/**\n * @internal\n * A state hook that manages a popper virtual element from mouseevents.\n * Useful for scenarios where a component needs to be positioned by mouse click (e.g. contextmenu)\n * React synthetic events are not persisted by this hook\n *\n * @param initialState - initializes a user provided state similare to useState\n * @returns state and dispatcher for a Popper virtual element that uses native/synthetic mouse events\n */\n\nexport const usePositioningMouseTarget = initialState => {\n  const [virtualElement, setVirtualElement] = React.useState(initialState);\n  const setVirtualMouseTarget = event => {\n    if (event === undefined || event === null) {\n      setVirtualElement(undefined);\n      return;\n    }\n    let mouseevent;\n    if (!(event instanceof MouseEvent)) {\n      mouseevent = event.nativeEvent;\n    } else {\n      mouseevent = event;\n    }\n    if (!(mouseevent instanceof MouseEvent) && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error('usePositioningMouseTarget should only be used with MouseEvent');\n    }\n    const contextTarget = createVirtualElementFromClick(mouseevent);\n    setVirtualElement(contextTarget);\n  };\n  return [virtualElement, setVirtualMouseTarget];\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,6BAAT,QAA8C,iCAA9C;AAGA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,yBAAyB,GACpCC,YADuC,IAErC;EACF,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,KAAK,CAACM,QAAN,CAAsDH,YAAtD,CAA5C;EAEA,MAAMI,qBAAqB,GAA0BC,KAAK,IAAG;IAC3D,IAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;MACzCH,iBAAiB,CAACI,SAAD,CAAjB;MACA;IACD;IAED,IAAIC,UAAJ;IACA,IAAI,EAAEF,KAAK,YAAYG,UAAnB,CAAJ,EAAoC;MAClCD,UAAU,GAAGF,KAAK,CAACI,WAAnB;IACD,CAFD,MAEO;MACLF,UAAU,GAAGF,KAAb;IACD;IAED,IAAI,EAAEE,UAAU,YAAYC,UAAxB,KAAuCE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAApE,EAAkF;MAChF;MACAC,OAAO,CAACC,KAAR,CAAc,+DAAd;IACD;IAED,MAAMC,aAAa,GAAGjB,6BAA6B,CAACS,UAAD,CAAnD;IACAL,iBAAiB,CAACa,aAAD,CAAjB;EACD,CApBD;EAsBA,OAAO,CAACd,cAAD,EAAiBG,qBAAjB,CAAP;AACD,CA5BM","names":["React","createVirtualElementFromClick","usePositioningMouseTarget","initialState","virtualElement","setVirtualElement","useState","setVirtualMouseTarget","event","undefined","mouseevent","MouseEvent","nativeEvent","process","env","NODE_ENV","console","error","contextTarget"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-positioning\\src\\packages\\react-components\\react-positioning\\src\\usePositioningMouseTarget.ts"],"sourcesContent":["import * as React from 'react';\nimport { createVirtualElementFromClick } from './createVirtualElementFromClick';\nimport { PositioningVirtualElement, SetVirtualMouseTarget } from './types';\n\n/**\n * @internal\n * A state hook that manages a popper virtual element from mouseevents.\n * Useful for scenarios where a component needs to be positioned by mouse click (e.g. contextmenu)\n * React synthetic events are not persisted by this hook\n *\n * @param initialState - initializes a user provided state similare to useState\n * @returns state and dispatcher for a Popper virtual element that uses native/synthetic mouse events\n */\nexport const usePositioningMouseTarget = (\n  initialState?: PositioningVirtualElement | (() => PositioningVirtualElement),\n) => {\n  const [virtualElement, setVirtualElement] = React.useState<PositioningVirtualElement | undefined>(initialState);\n\n  const setVirtualMouseTarget: SetVirtualMouseTarget = event => {\n    if (event === undefined || event === null) {\n      setVirtualElement(undefined);\n      return;\n    }\n\n    let mouseevent: MouseEvent;\n    if (!(event instanceof MouseEvent)) {\n      mouseevent = event.nativeEvent;\n    } else {\n      mouseevent = event;\n    }\n\n    if (!(mouseevent instanceof MouseEvent) && process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error('usePositioningMouseTarget should only be used with MouseEvent');\n    }\n\n    const contextTarget = createVirtualElementFromClick(mouseevent);\n    setVirtualElement(contextTarget);\n  };\n\n  return [virtualElement, setVirtualMouseTarget] as const;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}