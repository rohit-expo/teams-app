{"ast":null,"code":"/**\n * Get the inline items and overflowing items based on the array of AvatarGroupItems needed for AvatarGroup.\n *\n * @param options - Configure the partition options\n *\n * @returns Two arrays split into inline items and overflow items based on maxInlineItems.\n */\nexport const partitionAvatarGroupItems = options => {\n  var _a;\n  const {\n    items\n  } = options;\n  const isPie = options.layout === 'pie';\n  if (isPie) {\n    return {\n      inlineItems: items.slice(0, 3),\n      overflowItems: items.length > 0 ? items : undefined\n    };\n  }\n  const maxInlineItems = (_a = options.maxInlineItems) !== null && _a !== void 0 ? _a : 5;\n  const inlineCount = -(maxInlineItems - (items.length > maxInlineItems ? 1 : 0));\n  const overflowItems = items.slice(0, inlineCount);\n  return {\n    inlineItems: items.slice(inlineCount),\n    overflowItems: overflowItems.length > 0 ? overflowItems : undefined\n  };\n};","map":{"version":3,"mappings":"AAWA;;;;;;AAMG;AACH,OAAO,MAAMA,yBAAyB,GACpCC,OADuC,IAEP;;EAChC,MAAM;IAAEC;EAAF,IAAYD,OAAlB;EACA,MAAME,KAAK,GAAGF,OAAO,CAACG,MAAR,KAAmB,KAAjC;EAEA,IAAID,KAAJ,EAAW;IACT,OAAO;MACLE,WAAW,EAAEH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAe,CAAf,CADR;MAELC,aAAa,EAAEL,KAAK,CAACM,MAAN,GAAe,CAAf,GAAmBN,KAAnB,GAA2BO;IAFrC,CAAP;EAID;EAED,MAAMC,cAAc,GAAG,aAAO,CAACA,cAAR,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0B,CAAjD;EACA,MAAMC,WAAW,GAAG,EAAEF,cAAc,IAAIR,KAAK,CAACM,MAAN,GAAeE,cAAf,GAAgC,CAAhC,GAAoC,CAAxC,CAAhB,CAApB;EACA,MAAMH,aAAa,GAAGL,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeM,WAAf,CAAtB;EAEA,OAAO;IACLP,WAAW,EAAEH,KAAK,CAACI,KAAN,CAAYM,WAAZ,CADR;IAELL,aAAa,EAAEA,aAAa,CAACC,MAAd,GAAuB,CAAvB,GAA2BD,aAA3B,GAA2CE;EAFrD,CAAP;AAID,CArBM","names":["partitionAvatarGroupItems","options","items","isPie","layout","inlineItems","slice","overflowItems","length","undefined","maxInlineItems","_a","inlineCount"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-avatar\\lib\\src\\packages\\react-components\\react-avatar\\src\\utils\\partitionAvatarGroupItems.ts"],"sourcesContent":["export type PartitionAvatarGroupItemsOptions<T> = {\n  items: readonly T[];\n  layout?: 'spread' | 'stack' | 'pie';\n  maxInlineItems?: number;\n};\n\nexport type PartitionAvatarGroupItems<T> = {\n  inlineItems: readonly T[];\n  overflowItems?: readonly T[];\n};\n\n/**\n * Get the inline items and overflowing items based on the array of AvatarGroupItems needed for AvatarGroup.\n *\n * @param options - Configure the partition options\n *\n * @returns Two arrays split into inline items and overflow items based on maxInlineItems.\n */\nexport const partitionAvatarGroupItems = <T>(\n  options: PartitionAvatarGroupItemsOptions<T>,\n): PartitionAvatarGroupItems<T> => {\n  const { items } = options;\n  const isPie = options.layout === 'pie';\n\n  if (isPie) {\n    return {\n      inlineItems: items.slice(0, 3),\n      overflowItems: items.length > 0 ? items : undefined,\n    };\n  }\n\n  const maxInlineItems = options.maxInlineItems ?? 5;\n  const inlineCount = -(maxInlineItems - (items.length > maxInlineItems ? 1 : 0));\n  const overflowItems = items.slice(0, inlineCount);\n\n  return {\n    inlineItems: items.slice(inlineCount),\n    overflowItems: overflowItems.length > 0 ? overflowItems : undefined,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}