{"ast":null,"code":"import './constants.esm.js';\nimport { debugData } from './devtools/store.esm.js';\nimport { isDevToolsEnabled } from './devtools/isDevToolsEnabled.esm.js';\nimport { getSourceURLfromError } from './devtools/getSourceURLfromError.esm.js';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots.esm.js';\n\n/**\r\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\r\n *\r\n * @internal\r\n */\nfunction __styles(classesMapBySlot, cssRules) {\n  const insertionCache = {};\n  let ltrClassNamesForSlots = null;\n  let rtlClassNamesForSlots = null;\n  let sourceURL;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n  function computeClasses(options) {\n    const {\n      dir,\n      renderer\n    } = options;\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots, sourceURL);\n    }\n    return classNamesForSlots;\n  }\n  return computeClasses;\n}\nexport { __styles };","map":{"version":3,"mappings":";;;;;;AAIA;;;;;SAKgBA,QAAQ,CACtBC,gBAA4C,EAC5CC,QAA0B;EAE1B,MAAMC,cAAc,GAA4B,EAAE;EAElD,IAAIC,qBAAqB,GAAiC,IAAI;EAC9D,IAAIC,qBAAqB,GAAiC,IAAI;EAE9D,IAAIC,SAA6B;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;IAC9DJ,SAAS,GAAGK,qBAAqB,EAAE;;EAGrC,SAASC,cAAc,CAACC,OAAoD;IAC1E,MAAM;MAAEC,GAAG;MAAEC;KAAU,GAAGF,OAAO;IAEjC,MAAMG,KAAK,GAAGF,GAAG,KAAK,KAAK;;IAE3B,MAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAE,GAAGH,QAAQ,CAACG,EAAE,GAAG,GAAG;IAE1D,IAAIF,KAAK,EAAE;MACT,IAAIZ,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGe,yBAAyB,CAAClB,gBAAgB,EAAEa,GAAG,CAAC;;KAE3E,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;QAClCA,qBAAqB,GAAGc,yBAAyB,CAAClB,gBAAgB,EAAEa,GAAG,CAAC;;;IAI5E,IAAIX,cAAc,CAACc,UAAU,CAAC,KAAKG,SAAS,EAAE;MAC5CL,QAAQ,CAACM,cAAc,CAACnB,QAAS,CAAC;MAClCC,cAAc,CAACc,UAAU,CAAC,GAAG,IAAI;;IAGnC,MAAMK,kBAAkB,GAAGN,KAAK,GAC3BZ,qBAA+C,GAC/CC,qBAA+C;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;MAC9Da,SAAS,CAACC,kBAAkB,CAACF,kBAAmB,EAAEhB,SAAS,CAAC;;IAG9D,OAAOgB,kBAAkB;;EAG3B,OAAOV,cAAc;AACvB","names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\packages\\core\\src\\__styles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}