{"ast":null,"code":"import hashString from '@emotion/hash';\nimport { convertProperty, convert } from 'rtl-css-js/core';\nimport { UNSUPPORTED_CSS_PROPERTIES, HASH_PREFIX } from '../constants.esm.js';\nimport { compileCSS } from './compileCSS.esm.js';\nimport { compileKeyframeRule, compileKeyframesCSS } from './compileKeyframeCSS.esm.js';\nimport { generateCombinedQuery } from './utils/generateCombinedMediaQuery.esm.js';\nimport { isMediaQuerySelector } from './utils/isMediaQuerySelector.esm.js';\nimport { isLayerSelector } from './utils/isLayerSelector.esm.js';\nimport { isNestedSelector } from './utils/isNestedSelector.esm.js';\nimport { isSupportQuerySelector } from './utils/isSupportQuerySelector.esm.js';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty.esm.js';\nimport { isObject } from './utils/isObject.esm.js';\nimport { getStyleBucketName } from './getStyleBucketName.esm.js';\nimport { hashClassName } from './utils/hashClassName.esm.js';\nimport { hashPropertyKey } from './utils/hashPropertyKey.esm.js';\nfunction pushToClassesMap(classesMap, propertyKey, ltrClassname, rtlClassname) {\n  classesMap[propertyKey] = rtlClassname ? [ltrClassname, rtlClassname] : ltrClassname;\n}\nfunction createBucketEntry(cssRule, metadata) {\n  if (metadata) {\n    return [cssRule, metadata];\n  }\n  return cssRule;\n}\nfunction pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media) {\n  var _a;\n  let metadata;\n  if (styleBucketName === 'm' && media) {\n    metadata = {\n      m: media\n    };\n  }\n  (_a = cssRulesByBucket[styleBucketName]) !== null && _a !== void 0 ? _a : cssRulesByBucket[styleBucketName] = [];\n  if (ltrCSS) {\n    cssRulesByBucket[styleBucketName].push(createBucketEntry(ltrCSS, metadata));\n  }\n  if (rtlCSS) {\n    cssRulesByBucket[styleBucketName].push(createBucketEntry(rtlCSS, metadata));\n  }\n}\n/**\r\n * Transforms input styles to classes maps & CSS rules.\r\n *\r\n * @internal\r\n */\nfunction resolveStyleRules(styles) {\n  let selectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let media = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let layer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  let support = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  let cssClassesMap = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  let cssRulesByBucket = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  let rtlValue = arguments.length > 7 ? arguments[7] : undefined;\n  // eslint-disable-next-line guard-for-in\n  for (const property in styles) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (UNSUPPORTED_CSS_PROPERTIES.hasOwnProperty(property)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error([`@griffel/react: You are using unsupported shorthand CSS property \"${property}\". ` + `Please check your \"makeStyles\" calls, there *should not* be following:`, ' '.repeat(2) + `makeStyles({`, ' '.repeat(4) + `[slot]: { ${property}: \"${styles[property]}\" }`, ' '.repeat(2) + `})`, '', 'Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands'].join('\\n'));\n      }\n      continue;\n    }\n    const value = styles[property];\n    // eslint-disable-next-line eqeqeq\n    if (value == null) {\n      continue;\n    }\n    if (typeof value === 'string' || typeof value === 'number') {\n      // uniq key based on a hash of property & selector, used for merging later\n      const key = hashPropertyKey(selectors, media, support, property);\n      const className = hashClassName({\n        media,\n        layer,\n        value: value.toString(),\n        support,\n        selectors,\n        property\n      });\n      const rtlDefinition = rtlValue && {\n        key: property,\n        value: rtlValue\n      } || convertProperty(property, value);\n      const flippedInRtl = rtlDefinition.key !== property || rtlDefinition.value !== value;\n      const rtlClassName = flippedInRtl ? hashClassName({\n        value: rtlDefinition.value.toString(),\n        property: rtlDefinition.key,\n        selectors,\n        media,\n        layer,\n        support\n      }) : undefined;\n      const rtlCompileOptions = flippedInRtl ? {\n        rtlClassName,\n        rtlProperty: rtlDefinition.key,\n        rtlValue: rtlDefinition.value\n      } : undefined;\n      const styleBucketName = getStyleBucketName(selectors, layer, media, support);\n      const [ltrCSS, rtlCSS] = compileCSS(Object.assign({\n        className,\n        media,\n        layer,\n        selectors,\n        property,\n        support,\n        value\n      }, rtlCompileOptions));\n      pushToClassesMap(cssClassesMap, key, className, rtlClassName);\n      pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);\n    } else if (property === 'animationName') {\n      const animationNameValue = Array.isArray(value) ? value : [value];\n      const animationNames = [];\n      const rtlAnimationNames = [];\n      for (const keyframeObject of animationNameValue) {\n        const keyframeCSS = compileKeyframeRule(keyframeObject);\n        const rtlKeyframeCSS = compileKeyframeRule(convert(keyframeObject));\n        const animationName = HASH_PREFIX + hashString(keyframeCSS);\n        let rtlAnimationName;\n        const keyframeRules = compileKeyframesCSS(animationName, keyframeCSS);\n        let rtlKeyframeRules = [];\n        if (keyframeCSS === rtlKeyframeCSS) {\n          // If CSS for LTR & RTL are same we will re-use animationName from LTR to avoid duplication of rules in output\n          rtlAnimationName = animationName;\n        } else {\n          rtlAnimationName = HASH_PREFIX + hashString(rtlKeyframeCSS);\n          rtlKeyframeRules = compileKeyframesCSS(rtlAnimationName, rtlKeyframeCSS);\n        }\n        for (let i = 0; i < keyframeRules.length; i++) {\n          pushToCSSRules(cssRulesByBucket,\n          // keyframes styles should be inserted into own bucket\n          'k', keyframeRules[i], rtlKeyframeRules[i], media);\n        }\n        animationNames.push(animationName);\n        rtlAnimationNames.push(rtlAnimationName);\n      }\n      resolveStyleRules({\n        animationName: animationNames.join(', ')\n      }, selectors, media, layer, support, cssClassesMap, cssRulesByBucket, rtlAnimationNames.join(', '));\n    } else if (Array.isArray(value)) {\n      // not animationName property but array in the value => fallback values\n      if (value.length === 0) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`makeStyles(): An empty array was passed as input to \"${property}\", the property will be omitted in the styles.`);\n        }\n        continue;\n      }\n      const key = hashPropertyKey(selectors, media, support, property);\n      const className = hashClassName({\n        media,\n        layer,\n        value: value.map(v => (v !== null && v !== void 0 ? v : '').toString()).join(';'),\n        support,\n        selectors,\n        property\n      });\n      const rtlDefinitions = value.map(v => convertProperty(property, v));\n      const rtlPropertyConsistent = !rtlDefinitions.some(v => v.key !== rtlDefinitions[0].key);\n      if (!rtlPropertyConsistent) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('makeStyles(): mixing CSS fallback values which result in multiple CSS properties in RTL is not supported.');\n        }\n        continue;\n      }\n      const flippedInRtl = rtlDefinitions[0].key !== property || rtlDefinitions.some((v, i) => v.value !== value[i]);\n      const rtlClassName = flippedInRtl ? hashClassName({\n        value: rtlDefinitions.map(v => {\n          var _a;\n          return ((_a = v === null || v === void 0 ? void 0 : v.value) !== null && _a !== void 0 ? _a : '').toString();\n        }).join(';'),\n        property: rtlDefinitions[0].key,\n        selectors,\n        layer,\n        media,\n        support\n      }) : undefined;\n      const rtlCompileOptions = flippedInRtl ? {\n        rtlClassName,\n        rtlProperty: rtlDefinitions[0].key,\n        rtlValue: rtlDefinitions.map(d => d.value)\n      } : undefined;\n      const styleBucketName = getStyleBucketName(selectors, layer, media, support);\n      const [ltrCSS, rtlCSS] = compileCSS(Object.assign({\n        className,\n        media,\n        layer,\n        selectors,\n        property,\n        support,\n        value: value\n      }, rtlCompileOptions));\n      pushToClassesMap(cssClassesMap, key, className, rtlClassName);\n      pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);\n    } else if (isObject(value)) {\n      if (isNestedSelector(property)) {\n        resolveStyleRules(value, selectors.concat(normalizeNestedProperty(property)), media, layer, support, cssClassesMap, cssRulesByBucket);\n      } else if (isMediaQuerySelector(property)) {\n        const combinedMediaQuery = generateCombinedQuery(media, property.slice(6).trim());\n        resolveStyleRules(value, selectors, combinedMediaQuery, layer, support, cssClassesMap, cssRulesByBucket);\n      } else if (isLayerSelector(property)) {\n        const combinedLayerQuery = (layer ? `${layer}.` : '') + property.slice(6).trim();\n        resolveStyleRules(value, selectors, media, combinedLayerQuery, support, cssClassesMap, cssRulesByBucket);\n      } else if (isSupportQuerySelector(property)) {\n        const combinedSupportQuery = generateCombinedQuery(support, property.slice(9).trim());\n        resolveStyleRules(value, selectors, media, layer, combinedSupportQuery, cssClassesMap, cssRulesByBucket);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.error(`Please fix the unresolved style rule: \\n ${property} \\n ${JSON.stringify(value, null, 2)}\"`);\n        }\n      }\n    }\n  }\n  return [cssClassesMap, cssRulesByBucket];\n}\nexport { resolveStyleRules };","map":{"version":3,"mappings":"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","names":["pushToClassesMap","classesMap","propertyKey","ltrClassname","rtlClassname","createBucketEntry","cssRule","metadata","pushToCSSRules","cssRulesByBucket","styleBucketName","ltrCSS","rtlCSS","media","m","push","resolveStyleRules","styles","selectors","layer","support","cssClassesMap","rtlValue","property","UNSUPPORTED_CSS_PROPERTIES","hasOwnProperty","process","env","NODE_ENV","console","error","repeat","join","value","key","hashPropertyKey","className","hashClassName","toString","rtlDefinition","convertProperty","flippedInRtl","rtlClassName","undefined","rtlCompileOptions","rtlProperty","getStyleBucketName","compileCSS","animationNameValue","Array","isArray","animationNames","rtlAnimationNames","keyframeObject","keyframeCSS","compileKeyframeRule","rtlKeyframeCSS","convert","animationName","HASH_PREFIX","hashString","rtlAnimationName","keyframeRules","compileKeyframesCSS","rtlKeyframeRules","i","length","warn","map","v","rtlDefinitions","rtlPropertyConsistent","some","d","isObject","isNestedSelector","concat","normalizeNestedProperty","isMediaQuerySelector","combinedMediaQuery","generateCombinedQuery","slice","trim","isLayerSelector","combinedLayerQuery","isSupportQuerySelector","combinedSupportQuery","JSON","stringify"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\packages\\core\\src\\runtime\\resolveStyleRules.ts"],"sourcesContent":["import hashString from '@emotion/hash';\nimport { convert, convertProperty } from 'rtl-css-js/core';\n\nimport { HASH_PREFIX } from '../constants';\nimport {\n  GriffelStyle,\n  CSSClassesMap,\n  CSSRulesByBucket,\n  StyleBucketName,\n  GriffelAnimation,\n  CSSBucketEntry,\n} from '../types';\nimport { compileCSS, CompileCSSOptions } from './compileCSS';\nimport { compileKeyframeRule, compileKeyframesCSS } from './compileKeyframeCSS';\nimport { generateCombinedQuery } from './utils/generateCombinedMediaQuery';\nimport { isMediaQuerySelector } from './utils/isMediaQuerySelector';\nimport { isLayerSelector } from './utils/isLayerSelector';\nimport { isNestedSelector } from './utils/isNestedSelector';\nimport { isSupportQuerySelector } from './utils/isSupportQuerySelector';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty';\nimport { isObject } from './utils/isObject';\nimport { getStyleBucketName } from './getStyleBucketName';\nimport { hashClassName } from './utils/hashClassName';\nimport { hashPropertyKey } from './utils/hashPropertyKey';\nimport { UNSUPPORTED_CSS_PROPERTIES } from '..';\n\nfunction pushToClassesMap(\n  classesMap: CSSClassesMap,\n  propertyKey: string,\n  ltrClassname: string,\n  rtlClassname: string | undefined,\n) {\n  classesMap[propertyKey] = rtlClassname ? [ltrClassname!, rtlClassname] : ltrClassname;\n}\n\nfunction createBucketEntry(cssRule: string, metadata: Record<string, unknown> | undefined): CSSBucketEntry {\n  if (metadata) {\n    return [cssRule, metadata];\n  }\n\n  return cssRule;\n}\n\nfunction pushToCSSRules(\n  cssRulesByBucket: CSSRulesByBucket,\n  styleBucketName: StyleBucketName,\n  ltrCSS: string | undefined,\n  rtlCSS: string | undefined,\n  media: string | undefined,\n) {\n  let metadata: Record<string, unknown> | undefined;\n  if (styleBucketName === 'm' && media) {\n    metadata = { m: media };\n  }\n\n  cssRulesByBucket[styleBucketName] ??= [];\n\n  if (ltrCSS) {\n    cssRulesByBucket[styleBucketName]!.push(createBucketEntry(ltrCSS, metadata));\n  }\n\n  if (rtlCSS) {\n    cssRulesByBucket[styleBucketName]!.push(createBucketEntry(rtlCSS, metadata));\n  }\n}\n\n/**\n * Transforms input styles to classes maps & CSS rules.\n *\n * @internal\n */\nexport function resolveStyleRules(\n  styles: GriffelStyle,\n  selectors: string[] = [],\n  media = '',\n  layer = '',\n  support = '',\n  cssClassesMap: CSSClassesMap = {},\n  cssRulesByBucket: CSSRulesByBucket = {},\n  rtlValue?: string,\n): [CSSClassesMap, CSSRulesByBucket] {\n  // eslint-disable-next-line guard-for-in\n  for (const property in styles) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (UNSUPPORTED_CSS_PROPERTIES.hasOwnProperty(property)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          [\n            `@griffel/react: You are using unsupported shorthand CSS property \"${property}\". ` +\n              `Please check your \"makeStyles\" calls, there *should not* be following:`,\n            ' '.repeat(2) + `makeStyles({`,\n            ' '.repeat(4) + `[slot]: { ${property}: \"${styles[property as keyof GriffelStyle]}\" }`,\n            ' '.repeat(2) + `})`,\n            '',\n            'Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands',\n          ].join('\\n'),\n        );\n      }\n      continue;\n    }\n\n    const value = styles[property as keyof GriffelStyle];\n\n    // eslint-disable-next-line eqeqeq\n    if (value == null) {\n      continue;\n    }\n\n    if (typeof value === 'string' || typeof value === 'number') {\n      // uniq key based on a hash of property & selector, used for merging later\n      const key = hashPropertyKey(selectors, media, support, property);\n      const className = hashClassName({\n        media,\n        layer,\n        value: value.toString(),\n        support,\n        selectors,\n        property,\n      });\n\n      const rtlDefinition = (rtlValue && { key: property, value: rtlValue }) || convertProperty(property, value);\n      const flippedInRtl = rtlDefinition.key !== property || rtlDefinition.value !== value;\n\n      const rtlClassName = flippedInRtl\n        ? hashClassName({\n            value: rtlDefinition.value.toString(),\n            property: rtlDefinition.key,\n            selectors,\n            media,\n            layer,\n            support,\n          })\n        : undefined;\n      const rtlCompileOptions: Partial<CompileCSSOptions> | undefined = flippedInRtl\n        ? {\n            rtlClassName,\n            rtlProperty: rtlDefinition.key,\n            rtlValue: rtlDefinition.value,\n          }\n        : undefined;\n\n      const styleBucketName = getStyleBucketName(selectors, layer, media, support);\n      const [ltrCSS, rtlCSS] = compileCSS({\n        className,\n        media,\n        layer,\n        selectors,\n        property,\n        support,\n        value,\n        ...rtlCompileOptions,\n      });\n\n      pushToClassesMap(cssClassesMap, key, className, rtlClassName);\n      pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);\n    } else if (property === 'animationName') {\n      const animationNameValue = Array.isArray(value) ? (value as GriffelAnimation[]) : [value as GriffelAnimation];\n\n      const animationNames: string[] = [];\n      const rtlAnimationNames: string[] = [];\n\n      for (const keyframeObject of animationNameValue) {\n        const keyframeCSS = compileKeyframeRule(keyframeObject);\n        const rtlKeyframeCSS = compileKeyframeRule(convert(keyframeObject));\n\n        const animationName = HASH_PREFIX + hashString(keyframeCSS);\n        let rtlAnimationName: string;\n\n        const keyframeRules = compileKeyframesCSS(animationName, keyframeCSS);\n        let rtlKeyframeRules: string[] = [];\n\n        if (keyframeCSS === rtlKeyframeCSS) {\n          // If CSS for LTR & RTL are same we will re-use animationName from LTR to avoid duplication of rules in output\n          rtlAnimationName = animationName;\n        } else {\n          rtlAnimationName = HASH_PREFIX + hashString(rtlKeyframeCSS);\n          rtlKeyframeRules = compileKeyframesCSS(rtlAnimationName, rtlKeyframeCSS);\n        }\n\n        for (let i = 0; i < keyframeRules.length; i++) {\n          pushToCSSRules(\n            cssRulesByBucket,\n            // keyframes styles should be inserted into own bucket\n            'k',\n            keyframeRules[i],\n            rtlKeyframeRules[i],\n            media,\n          );\n        }\n\n        animationNames.push(animationName);\n        rtlAnimationNames.push(rtlAnimationName);\n      }\n\n      resolveStyleRules(\n        { animationName: animationNames.join(', ') },\n        selectors,\n        media,\n        layer,\n        support,\n        cssClassesMap,\n        cssRulesByBucket,\n        rtlAnimationNames.join(', '),\n      );\n    } else if (Array.isArray(value)) {\n      // not animationName property but array in the value => fallback values\n      if (value.length === 0) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `makeStyles(): An empty array was passed as input to \"${property}\", the property will be omitted in the styles.`,\n          );\n        }\n        continue;\n      }\n\n      const key = hashPropertyKey(selectors, media, support, property);\n      const className = hashClassName({\n        media,\n        layer,\n        value: value.map(v => (v ?? '').toString()).join(';'),\n        support,\n        selectors,\n        property,\n      });\n\n      const rtlDefinitions = value.map(v => convertProperty(property, v!));\n\n      const rtlPropertyConsistent = !rtlDefinitions.some(v => v.key !== rtlDefinitions[0].key);\n\n      if (!rtlPropertyConsistent) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            'makeStyles(): mixing CSS fallback values which result in multiple CSS properties in RTL is not supported.',\n          );\n        }\n        continue;\n      }\n\n      const flippedInRtl = rtlDefinitions[0].key !== property || rtlDefinitions.some((v, i) => v.value !== value[i]);\n\n      const rtlClassName = flippedInRtl\n        ? hashClassName({\n            value: rtlDefinitions.map(v => (v?.value ?? '').toString()).join(';'),\n            property: rtlDefinitions[0].key,\n            selectors,\n            layer,\n            media,\n            support,\n          })\n        : undefined;\n\n      const rtlCompileOptions: Partial<CompileCSSOptions> | undefined = flippedInRtl\n        ? {\n            rtlClassName,\n            rtlProperty: rtlDefinitions[0].key,\n            rtlValue: rtlDefinitions.map(d => d.value) as Array<string | number>,\n          }\n        : undefined;\n\n      const styleBucketName = getStyleBucketName(selectors, layer, media, support);\n      const [ltrCSS, rtlCSS] = compileCSS({\n        className,\n        media,\n        layer,\n        selectors,\n        property,\n        support,\n        value: value as Array<string | number>,\n        ...rtlCompileOptions,\n      });\n\n      pushToClassesMap(cssClassesMap, key, className, rtlClassName);\n      pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media);\n    } else if (isObject(value)) {\n      if (isNestedSelector(property)) {\n        resolveStyleRules(\n          value as GriffelStyle,\n          selectors.concat(normalizeNestedProperty(property)),\n          media,\n          layer,\n          support,\n          cssClassesMap,\n          cssRulesByBucket,\n        );\n      } else if (isMediaQuerySelector(property)) {\n        const combinedMediaQuery = generateCombinedQuery(media, property.slice(6).trim());\n\n        resolveStyleRules(\n          value as GriffelStyle,\n          selectors,\n          combinedMediaQuery,\n          layer,\n          support,\n          cssClassesMap,\n          cssRulesByBucket,\n        );\n      } else if (isLayerSelector(property)) {\n        const combinedLayerQuery = (layer ? `${layer}.` : '') + property.slice(6).trim();\n\n        resolveStyleRules(\n          value as GriffelStyle,\n          selectors,\n          media,\n          combinedLayerQuery,\n          support,\n          cssClassesMap,\n          cssRulesByBucket,\n        );\n      } else if (isSupportQuerySelector(property)) {\n        const combinedSupportQuery = generateCombinedQuery(support, property.slice(9).trim());\n\n        resolveStyleRules(\n          value as GriffelStyle,\n          selectors,\n          media,\n          layer,\n          combinedSupportQuery,\n          cssClassesMap,\n          cssRulesByBucket,\n        );\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.error(`Please fix the unresolved style rule: \\n ${property} \\n ${JSON.stringify(value, null, 2)}\"`);\n        }\n      }\n    }\n  }\n\n  return [cssClassesMap, cssRulesByBucket];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}