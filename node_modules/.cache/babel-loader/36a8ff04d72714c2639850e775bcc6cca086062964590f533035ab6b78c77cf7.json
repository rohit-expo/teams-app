{"ast":null,"code":"import { Enter, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\n/**\n * @internal\n *\n * Button keyboard handling, role, disabled and tabIndex implementation that ensures ARIA spec\n * for multiple scenarios of non native button elements. Ensuring 1st rule of ARIA for cases\n * where no attribute addition is required.\n *\n * @param type - the proper scenario to be interpreted by the hook.\n *  1. `button` - Minimal interference from the hook, as semantic button already supports most of the states\n *  2. `a` or `div` - Proper keyboard/mouse handling plus other support to ensure ARIA behavior\n * @param props - the props to be passed down the line to the desired element.\n * This hook will encapsulate proper properties, such as `onClick`, `onKeyDown`, `onKeyUp`, etc,.\n *\n * @example\n * ```tsx\n * const buttonProps = useARIAButtonProps('a', {\n *   href: './some-route'\n *   onClick: () => console.log('this should run both on click and Space and Enter')\n * })\n *\n * // ...\n *\n * return (\n *  <a {...buttonProps}>This anchor will behave as a proper button</a>\n * )\n * ```\n */\n\nexport function useARIAButtonProps(type, props) {\n  const {\n    disabled,\n    disabledFocusable = false,\n    ['aria-disabled']: ariaDisabled,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    ...rest\n  } = props !== null && props !== void 0 ? props : {};\n  const normalizedARIADisabled = typeof ariaDisabled === 'string' ? ariaDisabled === 'true' : ariaDisabled;\n  const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;\n  const handleClick = useEventCallback(ev => {\n    if (isDisabled) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onClick === null || onClick === void 0 ? void 0 : onClick(ev);\n    }\n  });\n  const handleKeyDown = useEventCallback(ev => {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n    const key = ev.key;\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n    if (key === Space) {\n      ev.preventDefault();\n      return;\n    } // If enter is pressed, activate the button\n    else if (key === Enter) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  });\n  const handleKeyUp = useEventCallback(ev => {\n    onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(ev);\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n    const key = ev.key;\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n    if (key === Space) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  }); // If a <button> tag is to be rendered we just need to set disabled and aria-disabled correctly\n\n  if (type === 'button' || type === undefined) {\n    return {\n      ...rest,\n      disabled: disabled && !disabledFocusable,\n      'aria-disabled': disabledFocusable ? true : normalizedARIADisabled,\n      // onclick should still use internal handler to ensure prevention if disabled\n      // if disabledFocusable then there's no requirement for handlers as those events should not be propagated\n      onClick: disabledFocusable ? undefined : handleClick,\n      onKeyUp: disabledFocusable ? undefined : onKeyUp,\n      onKeyDown: disabledFocusable ? undefined : onKeyDown\n    };\n  } // If an <a> or <div> tag is to be rendered we have to remove disabled and type,\n  // and set aria-disabled, role and tabIndex.\n  else {\n    const resultProps = {\n      role: 'button',\n      tabIndex: disabled && !disabledFocusable ? undefined : 0,\n      ...rest,\n      // If it's not a <button> than listeners are required even with disabledFocusable\n      // Since you cannot assure the default behavior of the element\n      // E.g: <a> will redirect on click\n      onClick: handleClick,\n      onKeyUp: handleKeyUp,\n      onKeyDown: handleKeyDown,\n      'aria-disabled': disabled || disabledFocusable || normalizedARIADisabled\n    };\n    if (type === 'a' && isDisabled) {\n      resultProps.href = undefined;\n    }\n    return resultProps;\n  }\n}","map":{"version":3,"mappings":"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","names":["Enter","Space","useEventCallback","useARIAButtonProps","type","props","disabled","disabledFocusable","ariaDisabled","onClick","onKeyDown","onKeyUp","rest","normalizedARIADisabled","isDisabled","handleClick","ev","preventDefault","stopPropagation","handleKeyDown","isDefaultPrevented","key","currentTarget","click","handleKeyUp","undefined","resultProps","role","tabIndex","href"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-aria\\lib\\src\\packages\\react-components\\react-aria\\src\\button\\useARIAButtonProps.ts"],"sourcesContent":["import { Enter, Space } from '@fluentui/keyboard-keys';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport type { ARIAButtonElementIntersection, ARIAButtonProps, ARIAButtonResultProps, ARIAButtonType } from './types';\n\n/**\n * @internal\n *\n * Button keyboard handling, role, disabled and tabIndex implementation that ensures ARIA spec\n * for multiple scenarios of non native button elements. Ensuring 1st rule of ARIA for cases\n * where no attribute addition is required.\n *\n * @param type - the proper scenario to be interpreted by the hook.\n *  1. `button` - Minimal interference from the hook, as semantic button already supports most of the states\n *  2. `a` or `div` - Proper keyboard/mouse handling plus other support to ensure ARIA behavior\n * @param props - the props to be passed down the line to the desired element.\n * This hook will encapsulate proper properties, such as `onClick`, `onKeyDown`, `onKeyUp`, etc,.\n *\n * @example\n * ```tsx\n * const buttonProps = useARIAButtonProps('a', {\n *   href: './some-route'\n *   onClick: () => console.log('this should run both on click and Space and Enter')\n * })\n *\n * // ...\n *\n * return (\n *  <a {...buttonProps}>This anchor will behave as a proper button</a>\n * )\n * ```\n */\nexport function useARIAButtonProps<Type extends ARIAButtonType, Props extends ARIAButtonProps<Type>>(\n  type?: Type,\n  props?: Props,\n): ARIAButtonResultProps<Type, Props> {\n  const { disabled, disabledFocusable = false, ['aria-disabled']: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } =\n    props ?? {};\n\n  const normalizedARIADisabled = typeof ariaDisabled === 'string' ? ariaDisabled === 'true' : ariaDisabled;\n\n  const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;\n\n  const handleClick = useEventCallback((ev: React.MouseEvent<ARIAButtonElementIntersection>) => {\n    if (isDisabled) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onClick?.(ev);\n    }\n  });\n\n  const handleKeyDown = useEventCallback((ev: React.KeyboardEvent<ARIAButtonElementIntersection>) => {\n    onKeyDown?.(ev);\n\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    const key = ev.key;\n\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n\n    if (key === Space) {\n      ev.preventDefault();\n      return;\n    }\n\n    // If enter is pressed, activate the button\n    else if (key === Enter) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  });\n\n  const handleKeyUp = useEventCallback((ev: React.KeyboardEvent<ARIAButtonElementIntersection>) => {\n    onKeyUp?.(ev);\n\n    if (ev.isDefaultPrevented()) {\n      return;\n    }\n\n    const key = ev.key;\n\n    if (isDisabled && (key === Enter || key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      return;\n    }\n\n    if (key === Space) {\n      ev.preventDefault();\n      ev.currentTarget.click();\n    }\n  });\n\n  // If a <button> tag is to be rendered we just need to set disabled and aria-disabled correctly\n  if (type === 'button' || type === undefined) {\n    return {\n      ...rest,\n      disabled: disabled && !disabledFocusable,\n      'aria-disabled': disabledFocusable ? true : normalizedARIADisabled,\n      // onclick should still use internal handler to ensure prevention if disabled\n      // if disabledFocusable then there's no requirement for handlers as those events should not be propagated\n      onClick: disabledFocusable ? undefined : handleClick,\n      onKeyUp: disabledFocusable ? undefined : onKeyUp,\n      onKeyDown: disabledFocusable ? undefined : onKeyDown,\n    } as ARIAButtonResultProps<Type, Props>;\n  }\n\n  // If an <a> or <div> tag is to be rendered we have to remove disabled and type,\n  // and set aria-disabled, role and tabIndex.\n  else {\n    const resultProps = {\n      role: 'button',\n      tabIndex: disabled && !disabledFocusable ? undefined : 0,\n      ...rest,\n      // If it's not a <button> than listeners are required even with disabledFocusable\n      // Since you cannot assure the default behavior of the element\n      // E.g: <a> will redirect on click\n      onClick: handleClick,\n      onKeyUp: handleKeyUp,\n      onKeyDown: handleKeyDown,\n      'aria-disabled': disabled || disabledFocusable || normalizedARIADisabled,\n    } as ARIAButtonResultProps<Type, Props>;\n\n    if (type === 'a' && isDisabled) {\n      (resultProps as ARIAButtonResultProps<'a', Props>).href = undefined;\n    }\n\n    return resultProps;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}