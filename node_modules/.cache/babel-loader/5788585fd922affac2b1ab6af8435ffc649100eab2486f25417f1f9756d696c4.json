{"ast":null,"code":"import * as React from 'react';\nimport { canUseDOM } from './canUseDOM';\n/**\n * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.\n *\n * @internal\n */\n\nexport const defaultSSRContextValue = {\n  current: 0\n};\nexport const SSRContext = /*#__PURE__*/React.createContext(undefined);\n/**\n * @internal\n */\n\nexport function useSSRContext() {\n  var _a;\n  return (_a = React.useContext(SSRContext)) !== null && _a !== void 0 ? _a : defaultSSRContextValue;\n}\n/**\n * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\n * are consistent between the client and server.\n *\n * @public\n */\n\nexport const SSRProvider = props => {\n  const [value] = React.useState(() => ({\n    current: 0\n  }));\n  return /*#__PURE__*/React.createElement(SSRContext.Provider, {\n    value: value\n  }, props.children);\n};\n/**\n * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\n * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.\n */\n\nexport function useIsSSR() {\n  const isInSSRContext = useSSRContext() !== defaultSSRContextValue;\n  const [isSSR, setIsSSR] = React.useState(isInSSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the\n  // developer to add one.\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!isInSSRContext && !canUseDOM()) {\n      // eslint-disable-next-line no-console\n      console.error(['@fluentui/react-components: ', 'When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' + 'generated between the client and server.', '\\n', '\\n', 'Check documentation at https://aka.ms/fluentui-ssr'].join(''));\n    }\n  } // If on the client, and the component was initially server rendered, then schedule a layout effect to update the\n  // component after hydration.\n\n  if (canUseDOM() && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line\n    React.useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n  return isSSR;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAYA;;;;AAIG;;AACH,OAAO,MAAMC,sBAAsB,GAAoB;EACrDC,OAAO,EAAE;AAD4C,CAAhD;AAIP,OAAO,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,CAAiDC,SAAjD,CAAnB;AAEP;;AAEG;;AACH,OAAM,SAAUC,aAAV,GAAuB;;EAC3B,OAAO,WAAK,CAACC,UAAN,CAAiBJ,UAAjB,OAA4B,IAA5B,IAA4BK,aAA5B,GAA4BA,EAA5B,GAAgCP,sBAAvC;AACD;AAED;;;;;AAKG;;AACH,OAAO,MAAMQ,WAAW,GAAaC,KAAK,IAAG;EAC3C,MAAM,CAACC,KAAD,IAAUZ,KAAK,CAACa,QAAN,CAAgC,OAAO;IAAEV,OAAO,EAAE;EAAX,CAAP,CAAhC,CAAhB;EAEA,oBAAOH,oBAACI,UAAU,CAACU,QAAZ,EAAoB;IAACF,KAAK,EAAEA;EAAR,CAApB,EAAoCD,KAAK,CAACI,QAA1C,CAAP;AACD,CAJM;AAMP;;;AAGG;;AACH,OAAM,SAAUC,QAAV,GAAkB;EACtB,MAAMC,cAAc,GAAGV,aAAa,OAAOL,sBAA3C;EACA,MAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBnB,KAAK,CAACa,QAAN,CAAeI,cAAf,CAA1B,CAFsB,CAItB;EACA;;EACA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAI,CAACL,cAAD,IAAmB,CAAChB,SAAS,EAAjC,EAAqC;MACnC;MACAsB,OAAO,CAACC,KAAR,CACE,CACE,8BADF,EAEE,4GACE,0CAHJ,EAIE,IAJF,EAKE,IALF,EAME,oDANF,EAOEC,IAPF,CAOO,EAPP,CADF;IAUD;EACF,CApBqB,CAsBtB;EACA;;EACA,IAAIxB,SAAS,MAAMgB,cAAnB,EAAmC;IACjC;IACA;IACA;IACAjB,KAAK,CAAC0B,eAAN,CAAsB,MAAK;MACzBP,QAAQ,CAAC,KAAD,CAAR;IACD,CAFD,EAEG,EAFH;EAGD;EAED,OAAOD,KAAP;AACD","names":["React","canUseDOM","defaultSSRContextValue","current","SSRContext","createContext","undefined","useSSRContext","useContext","_a","SSRProvider","props","value","useState","Provider","children","useIsSSR","isInSSRContext","isSSR","setIsSSR","process","env","NODE_ENV","console","error","join","useLayoutEffect"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\ssr\\SSRContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM } from './canUseDOM';\n\n/**\n * To support SSR, the auto incrementing id counter is stored in a context. This allows it to be reset on every request\n * to ensure the client and server are consistent.\n *\n * @internal\n */\nexport type SSRContextValue = {\n  current: number;\n};\n\n/**\n * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.\n *\n * @internal\n */\nexport const defaultSSRContextValue: SSRContextValue = {\n  current: 0,\n};\n\nexport const SSRContext = React.createContext<SSRContextValue | undefined>(undefined) as React.Context<SSRContextValue>;\n\n/**\n * @internal\n */\nexport function useSSRContext(): SSRContextValue {\n  return React.useContext(SSRContext) ?? defaultSSRContextValue;\n}\n\n/**\n * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\n * are consistent between the client and server.\n *\n * @public\n */\nexport const SSRProvider: React.FC = props => {\n  const [value] = React.useState<SSRContextValue>(() => ({ current: 0 }));\n\n  return <SSRContext.Provider value={value}>{props.children}</SSRContext.Provider>;\n};\n\n/**\n * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\n * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.\n */\nexport function useIsSSR(): boolean {\n  const isInSSRContext = useSSRContext() !== defaultSSRContextValue;\n  const [isSSR, setIsSSR] = React.useState(isInSSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the\n  // developer to add one.\n  if (process.env.NODE_ENV !== 'production') {\n    if (!isInSSRContext && !canUseDOM()) {\n      // eslint-disable-next-line no-console\n      console.error(\n        [\n          '@fluentui/react-components: ',\n          'When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' +\n            'generated between the client and server.',\n          '\\n',\n          '\\n',\n          'Check documentation at https://aka.ms/fluentui-ssr',\n        ].join(''),\n      );\n    }\n  }\n\n  // If on the client, and the component was initially server rendered, then schedule a layout effect to update the\n  // component after hydration.\n  if (canUseDOM() && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line\n    React.useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}