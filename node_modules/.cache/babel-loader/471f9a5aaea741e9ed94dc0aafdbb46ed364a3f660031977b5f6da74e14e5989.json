{"ast":null,"code":"import { tokens } from '@fluentui/react-theme';\nimport { shorthands } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from './createCustomFocusIndicatorStyle';\nimport { defaultOptions } from './constants';\n/**\n * NOTE: the element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configures the style of the focus outline\n * @returns focus outline styles object\n */\n\nconst getFocusOutlineStyles = options => {\n  var _a, _b, _c, _d;\n  const {\n    outlineRadius,\n    outlineColor,\n    outlineOffset,\n    outlineWidth\n  } = options;\n  const outlineOffsetTop = ((_a = outlineOffset) === null || _a === void 0 ? void 0 : _a.top) || outlineOffset;\n  const outlineOffsetBottom = ((_b = outlineOffset) === null || _b === void 0 ? void 0 : _b.bottom) || outlineOffset;\n  const outlineOffsetLeft = ((_c = outlineOffset) === null || _c === void 0 ? void 0 : _c.left) || outlineOffset;\n  const outlineOffsetRight = ((_d = outlineOffset) === null || _d === void 0 ? void 0 : _d.right) || outlineOffset;\n  return {\n    ...shorthands.borderColor('transparent'),\n    '::after': {\n      content: '\"\"',\n      position: 'absolute',\n      pointerEvents: 'none',\n      zIndex: 1,\n      ...shorthands.borderStyle('solid'),\n      ...shorthands.borderWidth(outlineWidth),\n      ...shorthands.borderRadius(outlineRadius),\n      ...shorthands.borderColor(outlineColor),\n      top: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetTop})`,\n      bottom: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetBottom})`,\n      left: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetLeft})`,\n      right: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetRight})`\n    }\n  };\n};\n/**\n * NOTE: The element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configure the style of the focus outline\n * @returns focus outline styles object for @see makeStyles\n */\n\nexport const createFocusOutlineStyle = function () {\n  let {\n    selector = defaultOptions.selector,\n    style = defaultOptions.style\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n  return createCustomFocusIndicatorStyle(getFocusOutlineStyles({\n    outlineColor: tokens.colorStrokeFocus2,\n    outlineRadius: tokens.borderRadiusMedium,\n    // FIXME: tokens.strokeWidthThick causes some weird bugs\n    outlineWidth: '2px',\n    ...style\n  }), {\n    selector\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,SACEC,+BADF,QAGO,mCAHP;AAIA,SAASC,cAAT,QAA+B,aAA/B;AAiBA;;;;;;AAMG;;AACH,MAAMC,qBAAqB,GAAIC,OAAD,IAAoD;;EAChF,MAAM;IAAEC,aAAF;IAAiBC,YAAjB;IAA+BC,aAA/B;IAA8CC;EAA9C,IAA+DJ,OAArE;EAEA,MAAMK,gBAAgB,GAAG,OAACF,aAAD,MAAqC,IAArC,IAAqCG,aAArC,GAAqC,MAArC,GAAqCA,GAAEC,GAAvC,KAA8CJ,aAAvE;EACA,MAAMK,mBAAmB,GAAG,OAACL,aAAD,MAAqC,IAArC,IAAqCM,aAArC,GAAqC,MAArC,GAAqCA,GAAEC,MAAvC,KAAiDP,aAA7E;EACA,MAAMQ,iBAAiB,GAAG,OAACR,aAAD,MAAqC,IAArC,IAAqCS,aAArC,GAAqC,MAArC,GAAqCA,GAAEC,IAAvC,KAA+CV,aAAzE;EACA,MAAMW,kBAAkB,GAAG,OAACX,aAAD,MAAqC,IAArC,IAAqCY,aAArC,GAAqC,MAArC,GAAqCA,GAAEC,KAAvC,KAAgDb,aAA3E;EAEA,OAAO;IACL,GAAGP,UAAU,CAACqB,WAAX,CAAuB,aAAvB,CADE;IAEL,WAAW;MACTC,OAAO,EAAE,IADA;MAETC,QAAQ,EAAE,UAFD;MAGTC,aAAa,EAAE,MAHN;MAITC,MAAM,EAAE,CAJC;MAMT,GAAGzB,UAAU,CAAC0B,WAAX,CAAuB,OAAvB,CANM;MAOT,GAAG1B,UAAU,CAAC2B,WAAX,CAAuBnB,YAAvB,CAPM;MAQT,GAAGR,UAAU,CAAC4B,YAAX,CAAwBvB,aAAxB,CARM;MAST,GAAGL,UAAU,CAACqB,WAAX,CAAuBf,YAAvB,CATM;MAWTK,GAAG,EAAE,CAACJ,aAAD,GAAiB,IAAIC,YAAY,EAAjC,GAAsC,cAAcA,YAAY,MAAMC,gBAAgB,GAXlF;MAYTK,MAAM,EAAE,CAACP,aAAD,GAAiB,IAAIC,YAAY,EAAjC,GAAsC,cAAcA,YAAY,MAAMI,mBAAmB,GAZxF;MAaTK,IAAI,EAAE,CAACV,aAAD,GAAiB,IAAIC,YAAY,EAAjC,GAAsC,cAAcA,YAAY,MAAMO,iBAAiB,GAbpF;MAcTK,KAAK,EAAE,CAACb,aAAD,GAAiB,IAAIC,YAAY,EAAjC,GAAsC,cAAcA,YAAY,MAAMU,kBAAkB;IAdtF;EAFN,CAAP;AAmBD,CA3BD;AA6BA;;;;;;AAMG;;AACH,OAAO,MAAMW,uBAAuB,GAAG;EAAA,IAAC;IACtCC,QAAQ,GAAG5B,cAAc,CAAC4B,QADY;IAEtCC,KAAK,GAAG7B,cAAc,CAAC6B;EAFe,wEAGJ7B,cAHG;EAAA,OAIrCD,+BAA+B,CAC7BE,qBAAqB,CAAC;IACpBG,YAAY,EAAEP,MAAM,CAACiC,iBADD;IAEpB3B,aAAa,EAAEN,MAAM,CAACkC,kBAFF;IAGpB;IACAzB,YAAY,EAAE,KAJM;IAKpB,GAAGuB;EALiB,CAAD,CADQ,EAQ7B;IAAED;EAAF,CAR6B,CAJ1B;AAAA","names":["tokens","shorthands","createCustomFocusIndicatorStyle","defaultOptions","getFocusOutlineStyles","options","outlineRadius","outlineColor","outlineOffset","outlineWidth","outlineOffsetTop","_a","top","outlineOffsetBottom","_b","bottom","outlineOffsetLeft","_c","left","outlineOffsetRight","_d","right","borderColor","content","position","pointerEvents","zIndex","borderStyle","borderWidth","borderRadius","createFocusOutlineStyle","selector","style","colorStrokeFocus2","borderRadiusMedium"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\focus\\createFocusOutlineStyle.ts"],"sourcesContent":["import { tokens } from '@fluentui/react-theme';\nimport { shorthands } from '@griffel/react';\nimport type { GriffelStyle } from '@griffel/react';\nimport {\n  createCustomFocusIndicatorStyle,\n  CreateCustomFocusIndicatorStyleOptions,\n} from './createCustomFocusIndicatorStyle';\nimport { defaultOptions } from './constants';\n\nexport type FocusOutlineOffset = Record<'top' | 'bottom' | 'left' | 'right', string>;\nexport type FocusOutlineStyleOptions = {\n  /**\n   * Only property not supported by the native CSS `outline`, if this is no longer needed\n   * we can just go native instead\n   */\n  outlineRadius: string;\n  outlineColor: string;\n  outlineWidth: string;\n  outlineOffset?: string | FocusOutlineOffset;\n};\nexport interface CreateFocusOutlineStyleOptions extends CreateCustomFocusIndicatorStyleOptions {\n  style?: Partial<FocusOutlineStyleOptions>;\n}\n\n/**\n * NOTE: the element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configures the style of the focus outline\n * @returns focus outline styles object\n */\nconst getFocusOutlineStyles = (options: FocusOutlineStyleOptions): GriffelStyle => {\n  const { outlineRadius, outlineColor, outlineOffset, outlineWidth } = options;\n\n  const outlineOffsetTop = (outlineOffset as FocusOutlineOffset)?.top || outlineOffset;\n  const outlineOffsetBottom = (outlineOffset as FocusOutlineOffset)?.bottom || outlineOffset;\n  const outlineOffsetLeft = (outlineOffset as FocusOutlineOffset)?.left || outlineOffset;\n  const outlineOffsetRight = (outlineOffset as FocusOutlineOffset)?.right || outlineOffset;\n\n  return {\n    ...shorthands.borderColor('transparent'),\n    '::after': {\n      content: '\"\"',\n      position: 'absolute',\n      pointerEvents: 'none',\n      zIndex: 1,\n\n      ...shorthands.borderStyle('solid'),\n      ...shorthands.borderWidth(outlineWidth),\n      ...shorthands.borderRadius(outlineRadius),\n      ...shorthands.borderColor(outlineColor),\n\n      top: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetTop})`,\n      bottom: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetBottom})`,\n      left: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetLeft})`,\n      right: !outlineOffset ? `-${outlineWidth}` : `calc(0px - ${outlineWidth} - ${outlineOffsetRight})`,\n    },\n  };\n};\n\n/**\n * NOTE: The element with the focus outline needs to have `position: relative` so that the\n * pseudo element can be properly positioned.\n *\n * @param options - Configure the style of the focus outline\n * @returns focus outline styles object for @see makeStyles\n */\nexport const createFocusOutlineStyle = ({\n  selector = defaultOptions.selector,\n  style = defaultOptions.style,\n}: CreateFocusOutlineStyleOptions = defaultOptions): GriffelStyle =>\n  createCustomFocusIndicatorStyle(\n    getFocusOutlineStyles({\n      outlineColor: tokens.colorStrokeFocus2,\n      outlineRadius: tokens.borderRadiusMedium,\n      // FIXME: tokens.strokeWidthThick causes some weird bugs\n      outlineWidth: '2px',\n      ...style,\n    }),\n    { selector },\n  );\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}