{"ast":null,"code":"import * as React from 'react';\nimport { ArrowLeft, Tab, ArrowRight, Escape } from '@fluentui/keyboard-keys';\nimport { getNativeElementProps, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { useMenuContext_unstable } from '../../contexts/menuContext';\nimport { dispatchMenuEnterEvent } from '../../utils/index';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useIsSubmenu } from '../../utils/useIsSubmenu';\n/**\n * Create the state required to render MenuPopover.\n *\n * The returned state can be modified with hooks such as useMenuPopoverStyles_unstable,\n * before being passed to renderMenuPopover_unstable.\n *\n * @param props - props from this instance of MenuPopover\n * @param ref - reference to root HTMLElement of MenuPopover\n */\n\nexport const useMenuPopover_unstable = (props, ref) => {\n  var _a;\n  const popoverRef = useMenuContext_unstable(context => context.menuPopoverRef);\n  const setOpen = useMenuContext_unstable(context => context.setOpen);\n  const open = useMenuContext_unstable(context => context.open);\n  const openOnHover = useMenuContext_unstable(context => context.openOnHover);\n  const isSubmenu = useIsSubmenu();\n  const canDispatchCustomEventRef = React.useRef(true);\n  const throttleDispatchTimerRef = React.useRef(0);\n  const {\n    dir\n  } = useFluent();\n  const CloseArrowKey = dir === 'ltr' ? ArrowLeft : ArrowRight; // use DOM listener since react events propagate up the react tree\n  // no need to do `contains` logic as menus are all positioned in different portals\n\n  const mouseOverListenerCallbackRef = React.useCallback(node => {\n    if (node) {\n      // Dispatches the custom menu mouse enter event with throttling\n      // Needs to trigger on mouseover to support keyboard + mouse together\n      // i.e. keyboard opens submenus while cursor is still on the parent\n      node.addEventListener('mouseover', e => {\n        if (canDispatchCustomEventRef.current) {\n          canDispatchCustomEventRef.current = false;\n          dispatchMenuEnterEvent(popoverRef.current, e); // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore #16889 Node setTimeout type leaking\n\n          throttleDispatchTimerRef.current = setTimeout(() => canDispatchCustomEventRef.current = true, 250);\n        }\n      });\n    }\n  }, [popoverRef, throttleDispatchTimerRef]);\n  React.useEffect(() => {\n    () => clearTimeout(throttleDispatchTimerRef.current);\n  }, []);\n  const inline = (_a = useMenuContext_unstable(context => context.inline)) !== null && _a !== void 0 ? _a : false;\n  const rootProps = getNativeElementProps('div', {\n    role: 'presentation',\n    ...props,\n    ref: useMergedRefs(ref, popoverRef, mouseOverListenerCallbackRef)\n  });\n  const {\n    onMouseEnter: onMouseEnterOriginal,\n    onKeyDown: onKeyDownOriginal\n  } = rootProps;\n  rootProps.onMouseEnter = useEventCallback(event => {\n    if (openOnHover) {\n      setOpen(event, {\n        open: true,\n        keyboard: false,\n        type: 'menuPopoverMouseEnter',\n        event\n      });\n    }\n    onMouseEnterOriginal === null || onMouseEnterOriginal === void 0 ? void 0 : onMouseEnterOriginal(event);\n  });\n  rootProps.onKeyDown = useEventCallback(event => {\n    var _a;\n    const key = event.key;\n    if (key === Escape || isSubmenu && key === CloseArrowKey) {\n      if (open && ((_a = popoverRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n        setOpen(event, {\n          open: false,\n          keyboard: true,\n          type: 'menuPopoverKeyDown',\n          event\n        }); // stop propagation to avoid conflicting with other elements that listen for `Escape`\n        // e,g: Dialog, Popover and Tooltip\n\n        event.stopPropagation();\n      }\n    }\n    if (key === Tab) {\n      setOpen(event, {\n        open: false,\n        keyboard: true,\n        type: 'menuPopoverKeyDown',\n        event\n      });\n      event.preventDefault();\n    }\n    onKeyDownOriginal === null || onKeyDownOriginal === void 0 ? void 0 : onKeyDownOriginal(event);\n  });\n  return {\n    inline,\n    components: {\n      root: 'div'\n    },\n    root: rootProps\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,yBAAnD;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,EAAkDC,aAAlD,QAAuE,2BAAvE;AAEA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,kBAAkB,IAAIC,SAA/B,QAAgD,iCAAhD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,uBAAuB,GAAG,CAACC,KAAD,EAA0BC,GAA1B,KAA2E;;EAChH,MAAMC,UAAU,GAAGR,uBAAuB,CAACS,OAAO,IAAIA,OAAO,CAACC,cAApB,CAA1C;EACA,MAAMC,OAAO,GAAGX,uBAAuB,CAACS,OAAO,IAAIA,OAAO,CAACE,OAApB,CAAvC;EACA,MAAMC,IAAI,GAAGZ,uBAAuB,CAACS,OAAO,IAAIA,OAAO,CAACG,IAApB,CAApC;EACA,MAAMC,WAAW,GAAGb,uBAAuB,CAACS,OAAO,IAAIA,OAAO,CAACI,WAApB,CAA3C;EACA,MAAMC,SAAS,GAAGV,YAAY,EAA9B;EACA,MAAMW,yBAAyB,GAAGvB,KAAK,CAACwB,MAAN,CAAa,IAAb,CAAlC;EACA,MAAMC,wBAAwB,GAAGzB,KAAK,CAACwB,MAAN,CAAa,CAAb,CAAjC;EAEA,MAAM;IAAEE;EAAF,IAAUf,SAAS,EAAzB;EACA,MAAMgB,aAAa,GAAGD,GAAG,KAAK,KAAR,GAAgBzB,SAAhB,GAA4BE,UAAlD,CAVgH,CAYhH;EACA;;EACA,MAAMyB,4BAA4B,GAAG5B,KAAK,CAAC6B,WAAN,CAClCC,IAAD,IAAsB;IACpB,IAAIA,IAAJ,EAAU;MACR;MACA;MACA;MACAA,IAAI,CAACC,gBAAL,CAAsB,WAAtB,EAAmCC,CAAC,IAAG;QACrC,IAAIT,yBAAyB,CAACU,OAA9B,EAAuC;UACrCV,yBAAyB,CAACU,OAA1B,GAAoC,KAApC;UACAxB,sBAAsB,CAACO,UAAU,CAACiB,OAAZ,EAAoCD,CAApC,CAAtB,CAFqC,CAGrC;UACA;;UACAP,wBAAwB,CAACQ,OAAzB,GAAmCC,UAAU,CAAC,MAAOX,yBAAyB,CAACU,OAA1B,GAAoC,IAA5C,EAAmD,GAAnD,CAA7C;QACD;MACF,CARD;IASD;EACF,CAhBkC,EAiBnC,CAACjB,UAAD,EAAaS,wBAAb,CAjBmC,CAArC;EAoBAzB,KAAK,CAACmC,SAAN,CAAgB,MAAK;IACnB,MAAMC,YAAY,CAACX,wBAAwB,CAACQ,OAA1B,CAAlB;EACD,CAFD,EAEG,EAFH;EAIA,MAAMI,MAAM,GAAG,6BAAuB,CAACpB,OAAO,IAAIA,OAAO,CAACoB,MAApB,CAAvB,MAAkD,IAAlD,IAAkDC,aAAlD,GAAkDA,EAAlD,GAAsD,KAArE;EACA,MAAMC,SAAS,GAAGlC,qBAAqB,CAAC,KAAD,EAAQ;IAC7CmC,IAAI,EAAE,cADuC;IAE7C,GAAG1B,KAF0C;IAG7CC,GAAG,EAAER,aAAa,CAACQ,GAAD,EAAMC,UAAN,EAAkBY,4BAAlB;EAH2B,CAAR,CAAvC;EAMA,MAAM;IAAEa,YAAY,EAAEC,oBAAhB;IAAsCC,SAAS,EAAEC;EAAjD,IAAuEL,SAA7E;EAEAA,SAAS,CAACE,YAAV,GAAyBnC,gBAAgB,CAAEuC,KAAD,IAAyC;IACjF,IAAIxB,WAAJ,EAAiB;MACfF,OAAO,CAAC0B,KAAD,EAAQ;QAAEzB,IAAI,EAAE,IAAR;QAAc0B,QAAQ,EAAE,KAAxB;QAA+BC,IAAI,EAAE,uBAArC;QAA8DF;MAA9D,CAAR,CAAP;IACD;IAEDH,oBAAoB,SAApB,wBAAoB,WAApB,GAAoB,MAApB,uBAAoB,CAAGG,KAAH,CAApB;EACD,CANwC,CAAzC;EAQAN,SAAS,CAACI,SAAV,GAAsBrC,gBAAgB,CAAEuC,KAAD,IAA4C;;IACjF,MAAMG,GAAG,GAAGH,KAAK,CAACG,GAAlB;IAEA,IAAIA,GAAG,KAAK5C,MAAR,IAAmBkB,SAAS,IAAI0B,GAAG,KAAKrB,aAA5C,EAA4D;MAC1D,IAAIP,IAAI,KAAI,gBAAU,CAACa,OAAX,MAAkB,IAAlB,IAAkBK,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEW,QAAF,CAAWJ,KAAK,CAACK,MAAjB,CAAtB,CAAR,EAAuE;QACrE/B,OAAO,CAAC0B,KAAD,EAAQ;UAAEzB,IAAI,EAAE,KAAR;UAAe0B,QAAQ,EAAE,IAAzB;UAA+BC,IAAI,EAAE,oBAArC;UAA2DF;QAA3D,CAAR,CAAP,CADqE,CAErE;QACA;;QACAA,KAAK,CAACM,eAAN;MACD;IACF;IAED,IAAIH,GAAG,KAAK9C,GAAZ,EAAiB;MACfiB,OAAO,CAAC0B,KAAD,EAAQ;QAAEzB,IAAI,EAAE,KAAR;QAAe0B,QAAQ,EAAE,IAAzB;QAA+BC,IAAI,EAAE,oBAArC;QAA2DF;MAA3D,CAAR,CAAP;MACAA,KAAK,CAACO,cAAN;IACD;IAEDR,iBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAGC,KAAH,CAAjB;EACD,CAlBqC,CAAtC;EAoBA,OAAO;IACLR,MADK;IAELgB,UAAU,EAAE;MACVC,IAAI,EAAE;IADI,CAFP;IAKLA,IAAI,EAAEf;EALD,CAAP;AAOD,CAlFM","names":["React","ArrowLeft","Tab","ArrowRight","Escape","getNativeElementProps","useEventCallback","useMergedRefs","useMenuContext_unstable","dispatchMenuEnterEvent","useFluent_unstable","useFluent","useIsSubmenu","useMenuPopover_unstable","props","ref","popoverRef","context","menuPopoverRef","setOpen","open","openOnHover","isSubmenu","canDispatchCustomEventRef","useRef","throttleDispatchTimerRef","dir","CloseArrowKey","mouseOverListenerCallbackRef","useCallback","node","addEventListener","e","current","setTimeout","useEffect","clearTimeout","inline","_a","rootProps","role","onMouseEnter","onMouseEnterOriginal","onKeyDown","onKeyDownOriginal","event","keyboard","type","key","contains","target","stopPropagation","preventDefault","components","root"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-menu\\lib\\components\\src\\packages\\react-components\\react-menu\\src\\components\\MenuPopover\\useMenuPopover.ts"],"sourcesContent":["import * as React from 'react';\nimport { ArrowLeft, Tab, ArrowRight, Escape } from '@fluentui/keyboard-keys';\nimport { getNativeElementProps, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { MenuPopoverProps, MenuPopoverState } from './MenuPopover.types';\nimport { useMenuContext_unstable } from '../../contexts/menuContext';\nimport { dispatchMenuEnterEvent } from '../../utils/index';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useIsSubmenu } from '../../utils/useIsSubmenu';\n\n/**\n * Create the state required to render MenuPopover.\n *\n * The returned state can be modified with hooks such as useMenuPopoverStyles_unstable,\n * before being passed to renderMenuPopover_unstable.\n *\n * @param props - props from this instance of MenuPopover\n * @param ref - reference to root HTMLElement of MenuPopover\n */\nexport const useMenuPopover_unstable = (props: MenuPopoverProps, ref: React.Ref<HTMLElement>): MenuPopoverState => {\n  const popoverRef = useMenuContext_unstable(context => context.menuPopoverRef);\n  const setOpen = useMenuContext_unstable(context => context.setOpen);\n  const open = useMenuContext_unstable(context => context.open);\n  const openOnHover = useMenuContext_unstable(context => context.openOnHover);\n  const isSubmenu = useIsSubmenu();\n  const canDispatchCustomEventRef = React.useRef(true);\n  const throttleDispatchTimerRef = React.useRef(0);\n\n  const { dir } = useFluent();\n  const CloseArrowKey = dir === 'ltr' ? ArrowLeft : ArrowRight;\n\n  // use DOM listener since react events propagate up the react tree\n  // no need to do `contains` logic as menus are all positioned in different portals\n  const mouseOverListenerCallbackRef = React.useCallback(\n    (node: HTMLElement) => {\n      if (node) {\n        // Dispatches the custom menu mouse enter event with throttling\n        // Needs to trigger on mouseover to support keyboard + mouse together\n        // i.e. keyboard opens submenus while cursor is still on the parent\n        node.addEventListener('mouseover', e => {\n          if (canDispatchCustomEventRef.current) {\n            canDispatchCustomEventRef.current = false;\n            dispatchMenuEnterEvent(popoverRef.current as HTMLElement, e);\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore #16889 Node setTimeout type leaking\n            throttleDispatchTimerRef.current = setTimeout(() => (canDispatchCustomEventRef.current = true), 250);\n          }\n        });\n      }\n    },\n    [popoverRef, throttleDispatchTimerRef],\n  );\n\n  React.useEffect(() => {\n    () => clearTimeout(throttleDispatchTimerRef.current);\n  }, []);\n\n  const inline = useMenuContext_unstable(context => context.inline) ?? false;\n  const rootProps = getNativeElementProps('div', {\n    role: 'presentation',\n    ...props,\n    ref: useMergedRefs(ref, popoverRef, mouseOverListenerCallbackRef),\n  });\n\n  const { onMouseEnter: onMouseEnterOriginal, onKeyDown: onKeyDownOriginal } = rootProps;\n\n  rootProps.onMouseEnter = useEventCallback((event: React.MouseEvent<HTMLElement>) => {\n    if (openOnHover) {\n      setOpen(event, { open: true, keyboard: false, type: 'menuPopoverMouseEnter', event });\n    }\n\n    onMouseEnterOriginal?.(event);\n  });\n\n  rootProps.onKeyDown = useEventCallback((event: React.KeyboardEvent<HTMLElement>) => {\n    const key = event.key;\n\n    if (key === Escape || (isSubmenu && key === CloseArrowKey)) {\n      if (open && popoverRef.current?.contains(event.target as HTMLElement)) {\n        setOpen(event, { open: false, keyboard: true, type: 'menuPopoverKeyDown', event });\n        // stop propagation to avoid conflicting with other elements that listen for `Escape`\n        // e,g: Dialog, Popover and Tooltip\n        event.stopPropagation();\n      }\n    }\n\n    if (key === Tab) {\n      setOpen(event, { open: false, keyboard: true, type: 'menuPopoverKeyDown', event });\n      event.preventDefault();\n    }\n\n    onKeyDownOriginal?.(event);\n  });\n\n  return {\n    inline,\n    components: {\n      root: 'div',\n    },\n    root: rootProps,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}