{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, getRTLSafeKey, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { ArrowRight, ArrowLeft } from '@fluentui/keyboard-keys';\n/**\n * Create the state required to render MenuSplitGroup.\n *\n * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,\n * before being passed to renderMenuSplitGroup_unstable.\n *\n * @param props - props from this instance of MenuSplitGroup\n * @param ref - reference to root HTMLElement of MenuSplitGroup\n */\n\nexport const useMenuSplitGroup_unstable = (props, ref) => {\n  const innerRef = React.useRef();\n  const {\n    dir,\n    targetDocument\n  } = useFluent();\n  const nextArrowKey = getRTLSafeKey(ArrowRight, dir);\n  const prevArrowKey = getRTLSafeKey(ArrowLeft, dir);\n  const {\n    findNextFocusable,\n    findPrevFocusable\n  } = useFocusFinders();\n  const onKeyDown = React.useCallback(e => {\n    var _a;\n    const activeElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (!((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(activeElement))) {\n      return;\n    }\n    if (e.key === nextArrowKey) {\n      const next = findNextFocusable(activeElement, {\n        container: innerRef.current\n      });\n      next === null || next === void 0 ? void 0 : next.focus();\n    }\n    if (e.key === prevArrowKey) {\n      const prev = findPrevFocusable(activeElement, {\n        container: innerRef.current\n      });\n      prev === null || prev === void 0 ? void 0 : prev.focus();\n    }\n  }, [findNextFocusable, findPrevFocusable, targetDocument, nextArrowKey, prevArrowKey]);\n  return {\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      role: 'group',\n      ref: useMergedRefs(ref, innerRef),\n      onKeyDown,\n      ...props\n    })\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,EAAgCC,aAAhC,EAA+CC,aAA/C,QAAoE,2BAApE;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,kBAAkB,IAAIC,SAA/B,QAAgD,iCAAhD;AAEA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,yBAAtC;AAEA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,0BAA0B,GAAG,CACxCC,KADwC,EAExCC,GAFwC,KAGjB;EACvB,MAAMC,QAAQ,GAAGZ,KAAK,CAACa,MAAN,EAAjB;EACA,MAAM;IAAEC,GAAF;IAAOC;EAAP,IAA0BT,SAAS,EAAzC;EAEA,MAAMU,YAAY,GAAGd,aAAa,CAACK,UAAD,EAAaO,GAAb,CAAlC;EACA,MAAMG,YAAY,GAAGf,aAAa,CAACM,SAAD,EAAYM,GAAZ,CAAlC;EAEA,MAAM;IAAEI,iBAAF;IAAqBC;EAArB,IAA2Cf,eAAe,EAAhE;EAEA,MAAMgB,SAAS,GAAGpB,KAAK,CAACqB,WAAN,CACfC,CAAD,IAAwC;;IACtC,MAAMC,aAAa,GAAGR,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEQ,aAAtC;IACA,IAAI,CAACA,aAAL,EAAoB;MAClB;IACD;IAED,IAAI,EAAC,cAAQ,CAACC,OAAT,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEC,QAAF,CAAWH,aAAX,CAAjB,CAAJ,EAAgD;MAC9C;IACD;IAED,IAAID,CAAC,CAACK,GAAF,KAAUX,YAAd,EAA4B;MAC1B,MAAMY,IAAI,GAAGV,iBAAiB,CAACK,aAAD,EAA+B;QAAEM,SAAS,EAAEjB,QAAQ,CAACY;MAAtB,CAA/B,CAA9B;MACAI,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEE,KAAN;IACD;IAED,IAAIR,CAAC,CAACK,GAAF,KAAUV,YAAd,EAA4B;MAC1B,MAAMc,IAAI,GAAGZ,iBAAiB,CAACI,aAAD,EAA+B;QAAEM,SAAS,EAAEjB,QAAQ,CAACY;MAAtB,CAA/B,CAA9B;MACAO,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAED,KAAN;IACD;EACF,CApBe,EAqBhB,CAACZ,iBAAD,EAAoBC,iBAApB,EAAuCJ,cAAvC,EAAuDC,YAAvD,EAAqEC,YAArE,CArBgB,CAAlB;EAwBA,OAAO;IACLe,UAAU,EAAE;MACVC,IAAI,EAAE;IADI,CADP;IAILA,IAAI,EAAEhC,qBAAqB,CAAC,KAAD,EAAQ;MACjCiC,IAAI,EAAE,OAD2B;MAEjCvB,GAAG,EAAER,aAAa,CAACQ,GAAD,EAAMC,QAAN,CAFe;MAGjCQ,SAHiC;MAIjC,GAAGV;IAJ8B,CAAR;EAJtB,CAAP;AAWD,CA/CM","names":["React","getNativeElementProps","getRTLSafeKey","useMergedRefs","useFocusFinders","useFluent_unstable","useFluent","ArrowRight","ArrowLeft","useMenuSplitGroup_unstable","props","ref","innerRef","useRef","dir","targetDocument","nextArrowKey","prevArrowKey","findNextFocusable","findPrevFocusable","onKeyDown","useCallback","e","activeElement","current","_a","contains","key","next","container","focus","prev","components","root","role"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-menu\\lib\\components\\src\\packages\\react-components\\react-menu\\src\\components\\MenuSplitGroup\\useMenuSplitGroup.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, getRTLSafeKey, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport type { MenuSplitGroupProps, MenuSplitGroupState } from './MenuSplitGroup.types';\nimport { ArrowRight, ArrowLeft } from '@fluentui/keyboard-keys';\n\n/**\n * Create the state required to render MenuSplitGroup.\n *\n * The returned state can be modified with hooks such as useMenuSplitGroupStyles_unstable,\n * before being passed to renderMenuSplitGroup_unstable.\n *\n * @param props - props from this instance of MenuSplitGroup\n * @param ref - reference to root HTMLElement of MenuSplitGroup\n */\nexport const useMenuSplitGroup_unstable = (\n  props: MenuSplitGroupProps,\n  ref: React.Ref<HTMLElement>,\n): MenuSplitGroupState => {\n  const innerRef = React.useRef<HTMLElement>();\n  const { dir, targetDocument } = useFluent();\n\n  const nextArrowKey = getRTLSafeKey(ArrowRight, dir);\n  const prevArrowKey = getRTLSafeKey(ArrowLeft, dir);\n\n  const { findNextFocusable, findPrevFocusable } = useFocusFinders();\n\n  const onKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      const activeElement = targetDocument?.activeElement;\n      if (!activeElement) {\n        return;\n      }\n\n      if (!innerRef.current?.contains(activeElement)) {\n        return;\n      }\n\n      if (e.key === nextArrowKey) {\n        const next = findNextFocusable(activeElement as HTMLElement, { container: innerRef.current });\n        next?.focus();\n      }\n\n      if (e.key === prevArrowKey) {\n        const prev = findPrevFocusable(activeElement as HTMLElement, { container: innerRef.current });\n        prev?.focus();\n      }\n    },\n    [findNextFocusable, findPrevFocusable, targetDocument, nextArrowKey, prevArrowKey],\n  );\n\n  return {\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      role: 'group',\n      ref: useMergedRefs(ref, innerRef),\n      onKeyDown,\n      ...props,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}