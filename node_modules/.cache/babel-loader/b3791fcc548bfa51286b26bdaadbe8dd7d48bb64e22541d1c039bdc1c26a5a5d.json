{"ast":null,"code":"import * as React from 'react';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useControllableState, useTimeout } from '@fluentui/react-utilities';\nimport * as Keys from '@fluentui/keyboard-keys';\nimport { calculatePrecision, precisionRound, getBound, clamp } from '../../utils/index';\nimport { ChevronUp16Regular, ChevronDown16Regular } from '@fluentui/react-icons';\nconst DEFAULT_SPIN_DELAY_MS = 150;\nconst MIN_SPIN_DELAY_MS = 80;\nconst MAX_SPIN_TIME_MS = 1000; // This is here to give an ease the mouse held down case.\n// Exact easing it to be defined. Once it is we'll likely\n// pull this out into a util function in the SpinButton package.\n\nconst lerp = (start, end, percent) => start + (end - start) * percent;\n/**\n * Create the state required to render SpinButton.\n *\n * The returned state can be modified with hooks such as useSpinButtonStyles_unstable,\n * before being passed to renderSpinButton_unstable.\n *\n * @param props - props from this instance of SpinButton\n * @param ref - reference to root HTMLElement of SpinButton\n */\n\nexport const useSpinButton_unstable = (props, ref) => {\n  var _a;\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['defaultValue', 'max', 'min', 'onChange', 'size', 'value']\n  });\n  const {\n    value,\n    displayValue,\n    defaultValue,\n    min,\n    max,\n    step = 1,\n    stepPage = 1,\n    precision: precisionFromProps,\n    onChange,\n    size = 'medium',\n    appearance = 'outline',\n    root,\n    input,\n    incrementButton,\n    decrementButton\n  } = props;\n  const precision = React.useMemo(() => {\n    return precisionFromProps !== null && precisionFromProps !== void 0 ? precisionFromProps : Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value,\n    defaultState: defaultValue,\n    initialState: 0\n  });\n  const isControlled = value !== undefined;\n  const [textValue, setTextValue] = React.useState(undefined);\n  const [keyboardSpinState, setKeyboardSpinState] = React.useState('rest');\n  const internalState = React.useRef({\n    value: currentValue,\n    spinState: 'rest',\n    spinTime: 0,\n    spinDelay: DEFAULT_SPIN_DELAY_MS,\n    atBound: currentValue !== null ? getBound(precisionRound(currentValue, precision), min, max) : 'none'\n  });\n  const [setStepTimeout, clearStepTimeout] = useTimeout();\n  const stepValue = (e, direction, startFrom) => {\n    let startValue = internalState.current.value;\n    if (startFrom) {\n      const num = parseFloat(startFrom);\n      if (!isNaN(num)) {\n        startValue = num;\n      }\n    }\n    const val = startValue;\n    const dir = direction === 'up' || direction === 'upPage' ? 1 : -1;\n    const stepSize = direction === 'upPage' || direction === 'downPage' ? stepPage : step;\n    if (val === null) {\n      const stepStart = min === undefined ? 0 : min;\n      const nullStep = clamp(stepStart + stepSize * dir, min, max);\n      commit(e, nullStep);\n      return;\n    }\n    let newValue = val + stepSize * dir;\n    if (!Number.isNaN(newValue)) {\n      newValue = clamp(newValue, min, max);\n    }\n    commit(e, newValue);\n    if (internalState.current.spinState !== 'rest') {\n      setStepTimeout(() => {\n        // Ease the step speed a bit\n        internalState.current.spinTime += internalState.current.spinDelay;\n        internalState.current.spinDelay = lerp(DEFAULT_SPIN_DELAY_MS, MIN_SPIN_DELAY_MS, internalState.current.spinTime / MAX_SPIN_TIME_MS);\n        stepValue(e, direction);\n      }, internalState.current.spinDelay);\n    }\n  };\n  const handleInputChange = e => {\n    if (!internalState.current.previousTextValue) {\n      internalState.current.previousTextValue = textValue;\n    }\n    const newValue = e.target.value;\n    setTextValue(newValue);\n  };\n  const handleIncrementMouseDown = e => {\n    internalState.current.spinState = 'up';\n    stepValue(e, 'up');\n  };\n  const handleDecrementMouseDown = e => {\n    internalState.current.spinState = 'down';\n    stepValue(e, 'down');\n  };\n  const handleStepMouseUpOrLeave = e => {\n    clearStepTimeout();\n    internalState.current.spinState = 'rest';\n    internalState.current.spinDelay = DEFAULT_SPIN_DELAY_MS;\n    internalState.current.spinTime = 0;\n  };\n  const handleBlur = e => {\n    commit(e, currentValue, textValue);\n    internalState.current.previousTextValue = undefined;\n  };\n  const handleKeyDown = e => {\n    let nextKeyboardSpinState = 'rest';\n    if (e.key === Keys.ArrowUp) {\n      stepValue(e, 'up', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.ArrowDown) {\n      stepValue(e, 'down', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (e.key === Keys.PageUp) {\n      e.preventDefault();\n      stepValue(e, 'upPage', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.PageDown) {\n      e.preventDefault();\n      stepValue(e, 'downPage', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Keys.Home && min !== undefined) {\n      commit(e, min);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Keys.End && max !== undefined) {\n      commit(e, max);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.Enter) {\n      commit(e, currentValue, textValue);\n      internalState.current.previousTextValue = undefined;\n    } else if (e.key === Keys.Escape) {\n      if (internalState.current.previousTextValue) {\n        setTextValue(undefined);\n        internalState.current.previousTextValue = undefined;\n      }\n    }\n    if (keyboardSpinState !== nextKeyboardSpinState) {\n      setKeyboardSpinState(nextKeyboardSpinState);\n    }\n  };\n  const handleKeyUp = e => {\n    if (keyboardSpinState !== 'rest') {\n      setKeyboardSpinState('rest');\n      internalState.current.spinState = 'rest';\n    }\n  };\n  const commit = (e, newValue, newDisplayValue) => {\n    const valueChanged = newValue !== undefined && currentValue !== newValue;\n    const displayValueChanged = newDisplayValue !== undefined && internalState.current.previousTextValue !== undefined && internalState.current.previousTextValue !== newDisplayValue;\n    let roundedValue;\n    if (valueChanged) {\n      roundedValue = precisionRound(newValue, precision);\n      setCurrentValue(roundedValue);\n    } else if (displayValueChanged && !isControlled) {\n      const nextValue = parseFloat(newDisplayValue);\n      if (!isNaN(nextValue)) {\n        setCurrentValue(precisionRound(nextValue, precision));\n      }\n    }\n    if (valueChanged || displayValueChanged) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(e, {\n        value: roundedValue,\n        displayValue: newDisplayValue\n      });\n    }\n    setTextValue(undefined);\n  };\n  const state = {\n    size,\n    appearance,\n    spinState: keyboardSpinState,\n    atBound: internalState.current.atBound,\n    components: {\n      root: 'span',\n      input: 'input',\n      incrementButton: 'button',\n      decrementButton: 'button'\n    },\n    root: resolveShorthand(root, {\n      required: true,\n      defaultProps: nativeProps.root\n    }),\n    input: resolveShorthand(input, {\n      required: true,\n      defaultProps: {\n        ref,\n        autoComplete: 'off',\n        role: 'spinbutton',\n        appearance,\n        type: 'text',\n        ...nativeProps.primary\n      }\n    }),\n    incrementButton: resolveShorthand(incrementButton, {\n      required: true,\n      defaultProps: {\n        tabIndex: -1,\n        children: /*#__PURE__*/React.createElement(ChevronUp16Regular, null),\n        disabled: nativeProps.primary.disabled,\n        'aria-label': 'Increment value',\n        type: 'button'\n      }\n    }),\n    decrementButton: resolveShorthand(decrementButton, {\n      required: true,\n      defaultProps: {\n        tabIndex: -1,\n        children: /*#__PURE__*/React.createElement(ChevronDown16Regular, null),\n        disabled: nativeProps.primary.disabled,\n        'aria-label': 'Decrement value',\n        type: 'button'\n      }\n    })\n  };\n  let valueToDisplay;\n  if (textValue !== undefined) {\n    valueToDisplay = textValue;\n  } else if (value === null || currentValue === null) {\n    valueToDisplay = displayValue !== null && displayValue !== void 0 ? displayValue : '';\n    internalState.current.value = null;\n    internalState.current.atBound = 'none';\n  } else {\n    const roundedValue = precisionRound(currentValue, precision);\n    internalState.current.value = roundedValue;\n    internalState.current.atBound = getBound(roundedValue, min, max);\n    if (isControlled) {\n      valueToDisplay = displayValue !== null && displayValue !== void 0 ? displayValue : String(roundedValue);\n    } else {\n      valueToDisplay = String(roundedValue);\n    }\n  }\n  state.input.value = valueToDisplay;\n  state.input['aria-valuemin'] = min;\n  state.input['aria-valuemax'] = max;\n  state.input['aria-valuenow'] = currentValue !== null && currentValue !== void 0 ? currentValue : undefined;\n  state.input['aria-valuetext'] = (_a = state.input['aria-valuetext']) !== null && _a !== void 0 ? _a : value !== undefined && displayValue || undefined;\n  state.input.onChange = mergeCallbacks(state.input.onChange, handleInputChange);\n  state.input.onBlur = mergeCallbacks(state.input.onBlur, handleBlur);\n  state.input.onKeyDown = mergeCallbacks(state.input.onKeyDown, handleKeyDown);\n  state.input.onKeyUp = mergeCallbacks(state.input.onKeyUp, handleKeyUp);\n  state.incrementButton.onMouseDown = mergeCallbacks(handleIncrementMouseDown, state.incrementButton.onMouseDown);\n  state.incrementButton.onMouseUp = mergeCallbacks(state.incrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.incrementButton.onMouseLeave = mergeCallbacks(state.incrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n  state.decrementButton.onMouseDown = mergeCallbacks(handleDecrementMouseDown, state.decrementButton.onMouseDown);\n  state.decrementButton.onMouseUp = mergeCallbacks(state.decrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.decrementButton.onMouseLeave = mergeCallbacks(state.decrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n  return state;\n};","map":{"version":3,"mappings":"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","names":["React","getPartitionedNativeProps","mergeCallbacks","resolveShorthand","useControllableState","useTimeout","Keys","calculatePrecision","precisionRound","getBound","clamp","ChevronUp16Regular","ChevronDown16Regular","DEFAULT_SPIN_DELAY_MS","MIN_SPIN_DELAY_MS","MAX_SPIN_TIME_MS","lerp","start","end","percent","useSpinButton_unstable","props","ref","nativeProps","primarySlotTagName","excludedPropNames","value","displayValue","defaultValue","min","max","step","stepPage","precision","precisionFromProps","onChange","size","appearance","root","input","incrementButton","decrementButton","useMemo","Math","currentValue","setCurrentValue","state","defaultState","initialState","isControlled","undefined","textValue","setTextValue","useState","keyboardSpinState","setKeyboardSpinState","internalState","useRef","spinState","spinTime","spinDelay","atBound","setStepTimeout","clearStepTimeout","stepValue","e","direction","startFrom","startValue","current","num","parseFloat","isNaN","val","dir","stepSize","stepStart","nullStep","commit","newValue","Number","handleInputChange","previousTextValue","target","handleIncrementMouseDown","handleDecrementMouseDown","handleStepMouseUpOrLeave","handleBlur","handleKeyDown","nextKeyboardSpinState","key","ArrowUp","ArrowDown","PageUp","preventDefault","PageDown","shiftKey","Home","End","Enter","Escape","handleKeyUp","newDisplayValue","valueChanged","displayValueChanged","roundedValue","nextValue","components","required","defaultProps","autoComplete","role","type","primary","tabIndex","children","disabled","valueToDisplay","String","_a","onBlur","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-spinbutton\\lib\\components\\src\\packages\\react-components\\react-spinbutton\\src\\components\\SpinButton\\useSpinButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getPartitionedNativeProps,\n  mergeCallbacks,\n  resolveShorthand,\n  useControllableState,\n  useTimeout,\n} from '@fluentui/react-utilities';\nimport * as Keys from '@fluentui/keyboard-keys';\nimport {\n  SpinButtonProps,\n  SpinButtonState,\n  SpinButtonSpinState,\n  SpinButtonChangeEvent,\n  SpinButtonBounds,\n} from './SpinButton.types';\nimport { calculatePrecision, precisionRound, getBound, clamp } from '../../utils/index';\nimport { ChevronUp16Regular, ChevronDown16Regular } from '@fluentui/react-icons';\n\ntype InternalState = {\n  value: number | null;\n  spinState: SpinButtonSpinState;\n  spinTime: number;\n  spinDelay: number;\n  previousTextValue?: string;\n  atBound: SpinButtonBounds;\n};\n\nconst DEFAULT_SPIN_DELAY_MS = 150;\nconst MIN_SPIN_DELAY_MS = 80;\nconst MAX_SPIN_TIME_MS = 1000;\n\n// This is here to give an ease the mouse held down case.\n// Exact easing it to be defined. Once it is we'll likely\n// pull this out into a util function in the SpinButton package.\nconst lerp = (start: number, end: number, percent: number): number => start + (end - start) * percent;\n\n/**\n * Create the state required to render SpinButton.\n *\n * The returned state can be modified with hooks such as useSpinButtonStyles_unstable,\n * before being passed to renderSpinButton_unstable.\n *\n * @param props - props from this instance of SpinButton\n * @param ref - reference to root HTMLElement of SpinButton\n */\nexport const useSpinButton_unstable = (props: SpinButtonProps, ref: React.Ref<HTMLInputElement>): SpinButtonState => {\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['defaultValue', 'max', 'min', 'onChange', 'size', 'value'],\n  });\n\n  const {\n    value,\n    displayValue,\n    defaultValue,\n    min,\n    max,\n    step = 1,\n    stepPage = 1,\n    precision: precisionFromProps,\n    onChange,\n    size = 'medium',\n    appearance = 'outline',\n    root,\n    input,\n    incrementButton,\n    decrementButton,\n  } = props;\n\n  const precision = React.useMemo(() => {\n    return precisionFromProps ?? Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value,\n    defaultState: defaultValue,\n    initialState: 0,\n  });\n\n  const isControlled = value !== undefined;\n\n  const [textValue, setTextValue] = React.useState<string | undefined>(undefined);\n  const [keyboardSpinState, setKeyboardSpinState] = React.useState<SpinButtonSpinState>('rest');\n\n  const internalState = React.useRef<InternalState>({\n    value: currentValue,\n    spinState: 'rest',\n    spinTime: 0,\n    spinDelay: DEFAULT_SPIN_DELAY_MS,\n    atBound: currentValue !== null ? getBound(precisionRound(currentValue, precision), min, max) : 'none',\n  });\n\n  const [setStepTimeout, clearStepTimeout] = useTimeout();\n\n  const stepValue = (\n    e: SpinButtonChangeEvent,\n    direction: 'up' | 'down' | 'upPage' | 'downPage',\n    startFrom?: string,\n  ) => {\n    let startValue = internalState.current.value;\n    if (startFrom) {\n      const num = parseFloat(startFrom);\n      if (!isNaN(num)) {\n        startValue = num;\n      }\n    }\n    const val = startValue;\n    const dir = direction === 'up' || direction === 'upPage' ? 1 : -1;\n    const stepSize = direction === 'upPage' || direction === 'downPage' ? stepPage : step;\n\n    if (val === null) {\n      const stepStart = min === undefined ? 0 : min;\n      const nullStep = clamp(stepStart + stepSize * dir, min, max);\n      commit(e, nullStep);\n      return;\n    }\n\n    let newValue = val + stepSize * dir;\n    if (!Number.isNaN(newValue)) {\n      newValue = clamp(newValue, min, max);\n    }\n\n    commit(e, newValue);\n\n    if (internalState.current.spinState !== 'rest') {\n      setStepTimeout(() => {\n        // Ease the step speed a bit\n        internalState.current.spinTime += internalState.current.spinDelay;\n        internalState.current.spinDelay = lerp(\n          DEFAULT_SPIN_DELAY_MS,\n          MIN_SPIN_DELAY_MS,\n          internalState.current.spinTime / MAX_SPIN_TIME_MS,\n        );\n        stepValue(e, direction);\n      }, internalState.current.spinDelay);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!internalState.current.previousTextValue) {\n      internalState.current.previousTextValue = textValue;\n    }\n    const newValue = e.target.value;\n    setTextValue(newValue);\n  };\n\n  const handleIncrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    internalState.current.spinState = 'up';\n    stepValue(e, 'up');\n  };\n\n  const handleDecrementMouseDown = (e: React.MouseEvent<HTMLButtonElement>) => {\n    internalState.current.spinState = 'down';\n    stepValue(e, 'down');\n  };\n\n  const handleStepMouseUpOrLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    clearStepTimeout();\n    internalState.current.spinState = 'rest';\n    internalState.current.spinDelay = DEFAULT_SPIN_DELAY_MS;\n    internalState.current.spinTime = 0;\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    commit(e, currentValue, textValue);\n    internalState.current.previousTextValue = undefined;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    let nextKeyboardSpinState: SpinButtonSpinState = 'rest';\n\n    if (e.key === Keys.ArrowUp) {\n      stepValue(e, 'up', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.ArrowDown) {\n      stepValue(e, 'down', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (e.key === Keys.PageUp) {\n      e.preventDefault();\n      stepValue(e, 'upPage', textValue);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.PageDown) {\n      e.preventDefault();\n      stepValue(e, 'downPage', textValue);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Keys.Home && min !== undefined) {\n      commit(e, min);\n      nextKeyboardSpinState = 'down';\n    } else if (!e.shiftKey && e.key === Keys.End && max !== undefined) {\n      commit(e, max);\n      nextKeyboardSpinState = 'up';\n    } else if (e.key === Keys.Enter) {\n      commit(e, currentValue, textValue);\n      internalState.current.previousTextValue = undefined;\n    } else if (e.key === Keys.Escape) {\n      if (internalState.current.previousTextValue) {\n        setTextValue(undefined);\n        internalState.current.previousTextValue = undefined;\n      }\n    }\n\n    if (keyboardSpinState !== nextKeyboardSpinState) {\n      setKeyboardSpinState(nextKeyboardSpinState);\n    }\n  };\n\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (keyboardSpinState !== 'rest') {\n      setKeyboardSpinState('rest');\n      internalState.current.spinState = 'rest';\n    }\n  };\n\n  const commit = (e: SpinButtonChangeEvent, newValue?: number | null, newDisplayValue?: string) => {\n    const valueChanged = newValue !== undefined && currentValue !== newValue;\n    const displayValueChanged =\n      newDisplayValue !== undefined &&\n      internalState.current.previousTextValue !== undefined &&\n      internalState.current.previousTextValue !== newDisplayValue;\n\n    let roundedValue;\n    if (valueChanged) {\n      roundedValue = precisionRound(newValue!, precision);\n      setCurrentValue(roundedValue);\n    } else if (displayValueChanged && !isControlled) {\n      const nextValue = parseFloat(newDisplayValue as string);\n      if (!isNaN(nextValue)) {\n        setCurrentValue(precisionRound(nextValue, precision));\n      }\n    }\n\n    if (valueChanged || displayValueChanged) {\n      onChange?.(e, { value: roundedValue, displayValue: newDisplayValue });\n    }\n\n    setTextValue(undefined);\n  };\n\n  const state: SpinButtonState = {\n    size,\n    appearance,\n    spinState: keyboardSpinState,\n    atBound: internalState.current.atBound,\n\n    components: {\n      root: 'span',\n      input: 'input',\n      incrementButton: 'button',\n      decrementButton: 'button',\n    },\n    root: resolveShorthand(root, {\n      required: true,\n      defaultProps: nativeProps.root,\n    }),\n    input: resolveShorthand(input, {\n      required: true,\n      defaultProps: {\n        ref,\n        autoComplete: 'off',\n        role: 'spinbutton',\n        appearance,\n        type: 'text',\n        ...nativeProps.primary,\n      },\n    }),\n    incrementButton: resolveShorthand(incrementButton, {\n      required: true,\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronUp16Regular />,\n        disabled: nativeProps.primary.disabled,\n        'aria-label': 'Increment value',\n        type: 'button',\n      },\n    }),\n    decrementButton: resolveShorthand(decrementButton, {\n      required: true,\n      defaultProps: {\n        tabIndex: -1,\n        children: <ChevronDown16Regular />,\n        disabled: nativeProps.primary.disabled,\n        'aria-label': 'Decrement value',\n        type: 'button',\n      },\n    }),\n  };\n\n  let valueToDisplay;\n  if (textValue !== undefined) {\n    valueToDisplay = textValue;\n  } else if (value === null || currentValue === null) {\n    valueToDisplay = displayValue ?? '';\n    internalState.current.value = null;\n    internalState.current.atBound = 'none';\n  } else {\n    const roundedValue = precisionRound(currentValue, precision);\n    internalState.current.value = roundedValue;\n    internalState.current.atBound = getBound(roundedValue, min, max);\n    if (isControlled) {\n      valueToDisplay = displayValue ?? String(roundedValue);\n    } else {\n      valueToDisplay = String(roundedValue);\n    }\n  }\n\n  state.input.value = valueToDisplay;\n  state.input['aria-valuemin'] = min;\n  state.input['aria-valuemax'] = max;\n  state.input['aria-valuenow'] = currentValue ?? undefined;\n  state.input['aria-valuetext'] = state.input['aria-valuetext'] ?? ((value !== undefined && displayValue) || undefined);\n  state.input.onChange = mergeCallbacks(state.input.onChange, handleInputChange);\n  state.input.onBlur = mergeCallbacks(state.input.onBlur, handleBlur);\n  state.input.onKeyDown = mergeCallbacks(state.input.onKeyDown, handleKeyDown);\n  state.input.onKeyUp = mergeCallbacks(state.input.onKeyUp, handleKeyUp);\n\n  state.incrementButton.onMouseDown = mergeCallbacks(handleIncrementMouseDown, state.incrementButton.onMouseDown);\n  state.incrementButton.onMouseUp = mergeCallbacks(state.incrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.incrementButton.onMouseLeave = mergeCallbacks(state.incrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  state.decrementButton.onMouseDown = mergeCallbacks(handleDecrementMouseDown, state.decrementButton.onMouseDown);\n  state.decrementButton.onMouseUp = mergeCallbacks(state.decrementButton.onMouseUp, handleStepMouseUpOrLeave);\n  state.decrementButton.onMouseLeave = mergeCallbacks(state.decrementButton.onMouseLeave, handleStepMouseUpOrLeave);\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}