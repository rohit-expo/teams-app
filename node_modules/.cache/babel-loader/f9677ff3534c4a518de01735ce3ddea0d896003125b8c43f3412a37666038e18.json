{"ast":null,"code":"import { createKeyborg } from 'keyborg';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { KEYBOARD_NAV_ATTRIBUTE } from '../focus/constants';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n/**\n * Instantiates [keyborg](https://github.com/microsoft/keyborg) and adds `data-keyboard-nav`\n * attribute to a referenced element to ensure keyboard navigation awareness\n * synced to keyborg logic without having to cause a re-render on react tree.\n */\n\nexport function useKeyboardNavAttribute() {\n  const {\n    targetDocument\n  } = useFluent();\n  const keyborg = useMemo(() => targetDocument && createKeyborg(targetDocument.defaultView), [targetDocument]);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (keyborg) {\n      setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, keyborg.isNavigatingWithKeyboard());\n      const cb = next => {\n        setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, next);\n      };\n      keyborg.subscribe(cb);\n      return () => keyborg.unsubscribe(cb);\n    }\n  }, [keyborg]);\n  return ref;\n}\nfunction setBooleanAttribute(elementRef, attribute, value) {\n  if (!elementRef.current) {\n    return;\n  }\n  if (value) {\n    elementRef.current.setAttribute(attribute, '');\n  } else {\n    elementRef.current.removeAttribute(attribute);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,SAA9B;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,SAASC,kBAAkB,IAAIC,SAA/B,QAAgD,iCAAhD;AAIA;;;;AAIG;;AACH,OAAM,SAAUC,uBAAV,GAAiC;EACrC,MAAM;IAAEC;EAAF,IAAqBF,SAAS,EAApC;EACA,MAAMG,OAAO,GAAGP,OAAO,CAAC,MAAMM,cAAc,IAAIR,aAAa,CAACQ,cAAc,CAACE,WAAhB,CAAtC,EAAqE,CAACF,cAAD,CAArE,CAAvB;EACA,MAAMG,GAAG,GAAGR,MAAM,CAAI,IAAJ,CAAlB;EACAF,SAAS,CAAC,MAAK;IACb,IAAIQ,OAAJ,EAAa;MACXG,mBAAmB,CAACD,GAAD,EAAMP,sBAAN,EAA8BK,OAAO,CAACI,wBAAR,EAA9B,CAAnB;MACA,MAAMC,EAAE,GAAoBC,IAAI,IAAG;QACjCH,mBAAmB,CAACD,GAAD,EAAMP,sBAAN,EAA8BW,IAA9B,CAAnB;MACD,CAFD;MAGAN,OAAO,CAACO,SAAR,CAAkBF,EAAlB;MACA,OAAO,MAAML,OAAO,CAACQ,WAAR,CAAoBH,EAApB,CAAb;IACD;EACF,CATQ,EASN,CAACL,OAAD,CATM,CAAT;EAUA,OAAOE,GAAP;AACD;AAED,SAASC,mBAAT,CAA6BM,UAA7B,EAAiEC,SAAjE,EAAoFC,KAApF,EAAkG;EAChG,IAAI,CAACF,UAAU,CAACG,OAAhB,EAAyB;IACvB;EACD;EACD,IAAID,KAAJ,EAAW;IACTF,UAAU,CAACG,OAAX,CAAmBC,YAAnB,CAAgCH,SAAhC,EAA2C,EAA3C;EACD,CAFD,MAEO;IACLD,UAAU,CAACG,OAAX,CAAmBE,eAAnB,CAAmCJ,SAAnC;EACD;AACF","names":["createKeyborg","useEffect","useMemo","useRef","KEYBOARD_NAV_ATTRIBUTE","useFluent_unstable","useFluent","useKeyboardNavAttribute","targetDocument","keyborg","defaultView","ref","setBooleanAttribute","isNavigatingWithKeyboard","cb","next","subscribe","unsubscribe","elementRef","attribute","value","current","setAttribute","removeAttribute"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\hooks\\useKeyboardNavAttribute.ts"],"sourcesContent":["import { createKeyborg } from 'keyborg';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { KEYBOARD_NAV_ATTRIBUTE } from '../focus/constants';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport type { KeyborgCallback } from 'keyborg';\nimport type { RefObject } from 'react';\n\n/**\n * Instantiates [keyborg](https://github.com/microsoft/keyborg) and adds `data-keyboard-nav`\n * attribute to a referenced element to ensure keyboard navigation awareness\n * synced to keyborg logic without having to cause a re-render on react tree.\n */\nexport function useKeyboardNavAttribute<E extends HTMLElement>() {\n  const { targetDocument } = useFluent();\n  const keyborg = useMemo(() => targetDocument && createKeyborg(targetDocument.defaultView!), [targetDocument]);\n  const ref = useRef<E>(null);\n  useEffect(() => {\n    if (keyborg) {\n      setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, keyborg.isNavigatingWithKeyboard());\n      const cb: KeyborgCallback = next => {\n        setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, next);\n      };\n      keyborg.subscribe(cb);\n      return () => keyborg.unsubscribe(cb);\n    }\n  }, [keyborg]);\n  return ref;\n}\n\nfunction setBooleanAttribute(elementRef: RefObject<HTMLElement>, attribute: string, value: boolean) {\n  if (!elementRef.current) {\n    return;\n  }\n  if (value) {\n    elementRef.current.setAttribute(attribute, '');\n  } else {\n    elementRef.current.removeAttribute(attribute);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}