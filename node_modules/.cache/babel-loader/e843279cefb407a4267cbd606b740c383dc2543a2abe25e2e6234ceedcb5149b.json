{"ast":null,"code":"import * as React from 'react';\nimport { CheckmarkCircle12Filled, ErrorCircle12Filled, Warning12Filled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';\nconst validationMessageIcons = {\n  error: /*#__PURE__*/React.createElement(ErrorCircle12Filled, null),\n  warning: /*#__PURE__*/React.createElement(Warning12Filled, null),\n  success: /*#__PURE__*/React.createElement(CheckmarkCircle12Filled, null)\n};\n/**\n * Partition the props used by the Field itself, from the props that are passed to the underlying field component.\n */\n\nexport const getPartitionedFieldProps = props => {\n  const {\n    className,\n    control,\n    hint,\n    label,\n    orientation,\n    root,\n    style,\n    validationMessage,\n    validationMessageIcon,\n    validationState,\n    ...restOfProps\n  } = props;\n  const fieldProps = {\n    className,\n    control,\n    hint,\n    label,\n    orientation,\n    root,\n    style,\n    validationMessage,\n    validationMessageIcon,\n    validationState\n  };\n  return [fieldProps, restOfProps];\n};\n/**\n * Create the state required to render Field.\n *\n * The returned state can be modified with hooks such as useFieldStyles_unstable,\n * before being passed to renderField_unstable.\n *\n * @param props - Props passed to this field\n * @param ref - Ref to the control slot (primary slot)\n * @param params - Configuration parameters for this Field\n */\n\nexport const useField_unstable = (props, ref, params) => {\n  var _a, _b, _c;\n  const [fieldProps, controlProps] = getPartitionedFieldProps(props);\n  const {\n    orientation = 'vertical',\n    validationState\n  } = fieldProps;\n  const {\n    labelConnection = 'htmlFor',\n    ariaInvalidOnError = true\n  } = params;\n  const baseId = useId('field-');\n  const root = resolveShorthand(fieldProps.root, {\n    required: true,\n    defaultProps: getNativeElementProps('div', fieldProps)\n  });\n  const label = resolveShorthand(fieldProps.label, {\n    defaultProps: {\n      id: baseId + '__label',\n      required: controlProps.required,\n      size: typeof controlProps.size === 'string' ? controlProps.size : undefined // htmlFor is handled below\n    }\n  });\n\n  const validationMessage = resolveShorthand(fieldProps.validationMessage, {\n    defaultProps: {\n      id: baseId + '__validationMessage'\n    }\n  });\n  const hint = resolveShorthand(fieldProps.hint, {\n    defaultProps: {\n      id: baseId + '__hint'\n    }\n  });\n  const validationMessageIcon = resolveShorthand(fieldProps.validationMessageIcon, {\n    required: !!validationState,\n    defaultProps: {\n      children: validationState ? validationMessageIcons[validationState] : undefined\n    }\n  }); // Hook up aria props on the control\n\n  if (label && labelConnection === 'aria-labelledby') {\n    (_a = controlProps['aria-labelledby']) !== null && _a !== void 0 ? _a : controlProps['aria-labelledby'] = label.id;\n  }\n  if (validationMessage || hint) {\n    // The control is described by the validation message, or hint, or both\n    // We also preserve and append any aria-describedby supplied by the user\n    // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933\n    controlProps['aria-describedby'] = [validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id, hint === null || hint === void 0 ? void 0 : hint.id, controlProps['aria-describedby']].filter(Boolean).join(' ');\n  }\n  if (validationState === 'error' && ariaInvalidOnError) {\n    (_b = controlProps['aria-invalid']) !== null && _b !== void 0 ? _b : controlProps['aria-invalid'] = true;\n  }\n  const control = resolveShorthand(fieldProps.control, {\n    required: true,\n    defaultProps: {\n      ref,\n      id: baseId + '__control',\n      ...controlProps\n    }\n  });\n  if (label && labelConnection === 'htmlFor') {\n    (_c = label.htmlFor) !== null && _c !== void 0 ? _c : label.htmlFor = control.id;\n  }\n  const state = {\n    orientation,\n    validationState,\n    classNames: params.classNames,\n    components: {\n      root: 'div',\n      control: params.component,\n      label: Label,\n      validationMessage: 'div',\n      validationMessageIcon: 'span',\n      hint: 'div'\n    },\n    root,\n    control,\n    label,\n    validationMessageIcon,\n    validationMessage,\n    hint\n  };\n  return state;\n};","map":{"version":3,"mappings":"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","names":["React","CheckmarkCircle12Filled","ErrorCircle12Filled","Warning12Filled","Label","getNativeElementProps","resolveShorthand","useId","validationMessageIcons","error","warning","success","getPartitionedFieldProps","props","className","control","hint","label","orientation","root","style","validationMessage","validationMessageIcon","validationState","restOfProps","fieldProps","useField_unstable","ref","params","controlProps","labelConnection","ariaInvalidOnError","baseId","required","defaultProps","id","size","undefined","children","_a","filter","Boolean","join","_b","htmlFor","_c","state","classNames","components","component"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-field\\lib\\components\\src\\packages\\react-components\\react-field\\src\\components\\Field\\useField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { CheckmarkCircle12Filled, ErrorCircle12Filled, Warning12Filled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport type { FieldConfig, FieldControl, FieldPropsWithOptionalComponentProps, FieldState } from './Field.types';\n\nconst validationMessageIcons = {\n  error: <ErrorCircle12Filled />,\n  warning: <Warning12Filled />,\n  success: <CheckmarkCircle12Filled />,\n} as const;\n\n/**\n * Partition the props used by the Field itself, from the props that are passed to the underlying field component.\n */\nexport const getPartitionedFieldProps = (props: FieldPropsWithOptionalComponentProps<FieldControl>) => {\n  const {\n    className,\n    control,\n    hint,\n    label,\n    orientation,\n    root,\n    style,\n    validationMessage,\n    validationMessageIcon,\n    validationState,\n    ...restOfProps\n  } = props;\n\n  const fieldProps = {\n    className,\n    control,\n    hint,\n    label,\n    orientation,\n    root,\n    style,\n    validationMessage,\n    validationMessageIcon,\n    validationState,\n  };\n\n  return [fieldProps, restOfProps] as const;\n};\n\n/**\n * Create the state required to render Field.\n *\n * The returned state can be modified with hooks such as useFieldStyles_unstable,\n * before being passed to renderField_unstable.\n *\n * @param props - Props passed to this field\n * @param ref - Ref to the control slot (primary slot)\n * @param params - Configuration parameters for this Field\n */\nexport const useField_unstable = <T extends FieldControl>(\n  props: FieldPropsWithOptionalComponentProps<T>,\n  ref: React.Ref<HTMLElement>,\n  params: FieldConfig<T>,\n): FieldState<T> => {\n  const [fieldProps, controlProps] = getPartitionedFieldProps(props);\n  const { orientation = 'vertical', validationState } = fieldProps;\n  const { labelConnection = 'htmlFor', ariaInvalidOnError = true } = params;\n\n  const baseId = useId('field-');\n\n  const root = resolveShorthand(fieldProps.root, {\n    required: true,\n    defaultProps: getNativeElementProps('div', fieldProps),\n  });\n\n  const label = resolveShorthand(fieldProps.label, {\n    defaultProps: {\n      id: baseId + '__label',\n      required: controlProps.required,\n      size: typeof controlProps.size === 'string' ? controlProps.size : undefined,\n      // htmlFor is handled below\n    },\n  });\n\n  const validationMessage = resolveShorthand(fieldProps.validationMessage, {\n    defaultProps: {\n      id: baseId + '__validationMessage',\n    },\n  });\n\n  const hint = resolveShorthand(fieldProps.hint, {\n    defaultProps: {\n      id: baseId + '__hint',\n    },\n  });\n\n  const validationMessageIcon = resolveShorthand(fieldProps.validationMessageIcon, {\n    required: !!validationState,\n    defaultProps: {\n      children: validationState ? validationMessageIcons[validationState] : undefined,\n    },\n  });\n\n  // Hook up aria props on the control\n  if (label && labelConnection === 'aria-labelledby') {\n    controlProps['aria-labelledby'] ??= label.id;\n  }\n\n  if (validationMessage || hint) {\n    // The control is described by the validation message, or hint, or both\n    // We also preserve and append any aria-describedby supplied by the user\n    // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933\n    controlProps['aria-describedby'] = [validationMessage?.id, hint?.id, controlProps['aria-describedby']]\n      .filter(Boolean)\n      .join(' ');\n  }\n\n  if (validationState === 'error' && ariaInvalidOnError) {\n    controlProps['aria-invalid'] ??= true;\n  }\n\n  const control = resolveShorthand(fieldProps.control, {\n    required: true,\n    defaultProps: {\n      ref,\n      id: baseId + '__control',\n      ...controlProps,\n    },\n  });\n\n  if (label && labelConnection === 'htmlFor') {\n    label.htmlFor ??= control.id;\n  }\n\n  const state: FieldState<FieldControl> = {\n    orientation,\n    validationState,\n    classNames: params.classNames,\n    components: {\n      root: 'div',\n      control: params.component,\n      label: Label,\n      validationMessage: 'div',\n      validationMessageIcon: 'span',\n      hint: 'div',\n    },\n    root,\n    control,\n    label,\n    validationMessageIcon,\n    validationMessage,\n    hint,\n  };\n\n  return state as FieldState<T>;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}