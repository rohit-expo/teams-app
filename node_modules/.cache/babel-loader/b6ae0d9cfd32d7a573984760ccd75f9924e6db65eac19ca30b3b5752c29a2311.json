{"ast":null,"code":"import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\n/**\n * Creates a MutableRef with ref change callback. Is useful as React.useRef() doesn't notify you when its content\n * changes and mutating the .current property doesn't cause a re-render. An opt-out will be use a callback ref via\n * React.useState(), but it will cause re-renders always.\n *\n * https://reactjs.org/docs/hooks-reference.html#useref\n * https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\n *\n * @param initialValue - initial ref value\n * @param callback - a callback to run when value changes\n * @param skipInitialResolve - a flag to skip an initial ref report\n *\n * @example\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\n * ref.current = 1;\n * // prints 0 -> 1\n */\n\nexport function useCallbackRef(initialValue, callback, skipInitialResolve) {\n  const isFirst = React.useRef(true);\n  const [ref] = React.useState(() => ({\n    // value\n    value: initialValue,\n    // last callback\n    callback,\n    // \"memoized\" public interface\n    facade: {\n      get current() {\n        return ref.value;\n      },\n      set current(value) {\n        const last = ref.value;\n        if (last !== value) {\n          ref.value = value;\n          if (skipInitialResolve && isFirst.current) {\n            return;\n          }\n          ref.callback(value, last);\n        }\n      }\n    }\n  }));\n  useIsomorphicLayoutEffect(() => {\n    isFirst.current = false;\n  }, []); // update callback\n\n  ref.callback = callback;\n  return ref.facade;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAT,QAA0C,2BAA1C;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAM,SAAUC,cAAV,CACJC,YADI,EAEJC,QAFI,EAGJC,kBAHI,EAGwB;EAE5B,MAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,CAAa,IAAb,CAAhB;EACA,MAAM,CAACC,GAAD,IAAQR,KAAK,CAACS,QAAN,CAAe,OAAO;IAClC;IACAC,KAAK,EAAEP,YAF2B;IAGlC;IACAC,QAJkC;IAKlC;IACAO,MAAM,EAAE;MACN,IAAIC,OAAJ,GAAW;QACT,OAAOJ,GAAG,CAACE,KAAX;MACD,CAHK;MAIN,IAAIE,OAAJ,CAAYF,KAAZ,EAAiB;QACf,MAAMG,IAAI,GAAGL,GAAG,CAACE,KAAjB;QAEA,IAAIG,IAAI,KAAKH,KAAb,EAAoB;UAClBF,GAAG,CAACE,KAAJ,GAAYA,KAAZ;UAEA,IAAIL,kBAAkB,IAAIC,OAAO,CAACM,OAAlC,EAA2C;YACzC;UACD;UAEDJ,GAAG,CAACJ,QAAJ,CAAaM,KAAb,EAAoBG,IAApB;QACD;MACF;IAhBK;EAN0B,CAAP,CAAf,CAAd;EA0BAZ,yBAAyB,CAAC,MAAK;IAC7BK,OAAO,CAACM,OAAR,GAAkB,KAAlB;EACD,CAFwB,EAEtB,EAFsB,CAAzB,CA7B4B,CAiC5B;;EACAJ,GAAG,CAACJ,QAAJ,GAAeA,QAAf;EAEA,OAAOI,GAAG,CAACG,MAAX;AACD","names":["React","useIsomorphicLayoutEffect","useCallbackRef","initialValue","callback","skipInitialResolve","isFirst","useRef","ref","useState","value","facade","current","last"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-positioning\\lib\\src\\packages\\react-components\\react-positioning\\src\\utils\\useCallbackRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-utilities';\n\n/**\n * Creates a MutableRef with ref change callback. Is useful as React.useRef() doesn't notify you when its content\n * changes and mutating the .current property doesn't cause a re-render. An opt-out will be use a callback ref via\n * React.useState(), but it will cause re-renders always.\n *\n * https://reactjs.org/docs/hooks-reference.html#useref\n * https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref\n *\n * @param initialValue - initial ref value\n * @param callback - a callback to run when value changes\n * @param skipInitialResolve - a flag to skip an initial ref report\n *\n * @example\n * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);\n * ref.current = 1;\n * // prints 0 -> 1\n */\nexport function useCallbackRef<T>(\n  initialValue: T | null,\n  callback: (newValue: T | null, lastValue: T | null) => void,\n  skipInitialResolve?: boolean,\n): React.MutableRefObject<T | null> {\n  const isFirst = React.useRef(true);\n  const [ref] = React.useState(() => ({\n    // value\n    value: initialValue,\n    // last callback\n    callback,\n    // \"memoized\" public interface\n    facade: {\n      get current() {\n        return ref.value;\n      },\n      set current(value) {\n        const last = ref.value;\n\n        if (last !== value) {\n          ref.value = value;\n\n          if (skipInitialResolve && isFirst.current) {\n            return;\n          }\n\n          ref.callback(value, last);\n        }\n      },\n    },\n  }));\n\n  useIsomorphicLayoutEffect(() => {\n    isFirst.current = false;\n  }, []);\n\n  // update callback\n  ref.callback = callback;\n\n  return ref.facade;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}