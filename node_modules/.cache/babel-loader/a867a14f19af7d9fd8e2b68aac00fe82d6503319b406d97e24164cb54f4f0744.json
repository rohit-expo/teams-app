{"ast":null,"code":"import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback } from '@fluentui/react-utilities';\nimport { useAccordionItemContext_unstable } from '../AccordionItem/index';\nimport { useARIAButtonShorthand } from '@fluentui/react-aria';\nimport { useAccordionContext_unstable } from '../Accordion/AccordionContext';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\n\nexport const useAccordionHeader_unstable = (props, ref) => {\n  const {\n    as,\n    icon,\n    button,\n    expandIcon,\n    inline = false,\n    size = 'medium',\n    expandIconPosition = 'start'\n  } = props;\n  const {\n    onHeaderClick: onAccordionHeaderClick,\n    disabled,\n    open\n  } = useAccordionItemContext_unstable();\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n  const {\n    dir\n  } = useFluent(); // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n\n  let expandIconRotation;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n  const buttonShorthand = useARIAButtonShorthand(button, {\n    required: true,\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button'\n    }\n  });\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div'\n    },\n    root: getNativeElementProps(as || 'div', {\n      ref,\n      ...props\n    }),\n    icon: resolveShorthand(icon),\n    expandIcon: resolveShorthand(expandIcon, {\n      required: true,\n      defaultProps: {\n        children: /*#__PURE__*/React.createElement(ChevronRightRegular, {\n          style: {\n            transform: `rotate(${expandIconRotation}deg)`\n          }\n        }),\n        'aria-hidden': true\n      }\n    }),\n    button: {\n      ...buttonShorthand,\n      onClick: useEventCallback(ev => {\n        var _a;\n        (_a = buttonShorthand.onClick) === null || _a === void 0 ? void 0 : _a.call(buttonShorthand, ev);\n        if (!ev.defaultPrevented) {\n          onAccordionHeaderClick(ev);\n        }\n      })\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,EAAkDC,gBAAlD,QAA0E,2BAA1E;AACA,SAASC,gCAAT,QAAiD,wBAAjD;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AAEA,SAASC,4BAAT,QAA6C,+BAA7C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,kBAAkB,IAAIC,SAA/B,QAAgD,iCAAhD;AAEA;;;;AAIG;;AACH,OAAO,MAAMC,2BAA2B,GAAG,CACzCC,KADyC,EAEzCC,GAFyC,KAGjB;EACxB,MAAM;IAAEC,EAAF;IAAMC,IAAN;IAAYC,MAAZ;IAAoBC,UAApB;IAAgCC,MAAM,GAAG,KAAzC;IAAgDC,IAAI,GAAG,QAAvD;IAAiEC,kBAAkB,GAAG;EAAtF,IAAkGR,KAAxG;EACA,MAAM;IAAES,aAAa,EAAEC,sBAAjB;IAAyCC,QAAzC;IAAmDC;EAAnD,IAA4DnB,gCAAgC,EAAlG;EAEA;;;AAGG;;EACH,MAAMoB,iBAAiB,GAAGlB,4BAA4B,CAACmB,GAAG,IAAI,CAACA,GAAG,CAACC,WAAL,IAAoBD,GAAG,CAACE,SAAJ,CAAcC,MAAd,KAAyB,CAA7C,IAAkDL,IAA1D,CAAtD;EAEA,MAAM;IAAEM;EAAF,IAAUpB,SAAS,EAAzB,CAVwB,CAYxB;;EACA,IAAIqB,kBAAJ;EACA,IAAIX,kBAAkB,KAAK,KAA3B,EAAkC;IAChC;IACAW,kBAAkB,GAAGP,IAAI,GAAG,CAAC,EAAJ,GAAS,EAAlC;EACD,CAHD,MAGO;IACL;IACAO,kBAAkB,GAAGP,IAAI,GAAG,EAAH,GAAQM,GAAG,KAAK,KAAR,GAAgB,CAAhB,GAAoB,GAArD;EACD;EAED,MAAME,eAAe,GAAG1B,sBAAsB,CAACU,MAAD,EAAS;IACrDiB,QAAQ,EAAE,IAD2C;IAErDC,YAAY,EAAE;MACZX,QADY;MAEZE,iBAFY;MAGZ,iBAAiBD,IAHL;MAIZW,IAAI,EAAE;IAJM;EAFuC,CAAT,CAA9C;EAUA,OAAO;IACLZ,QADK;IAELC,IAFK;IAGLL,IAHK;IAILD,MAJK;IAKLE,kBALK;IAMLgB,UAAU,EAAE;MACVC,IAAI,EAAE,KADI;MAEVrB,MAAM,EAAE,QAFE;MAGVC,UAAU,EAAE,MAHF;MAIVF,IAAI,EAAE;IAJI,CANP;IAYLsB,IAAI,EAAEnC,qBAAqB,CAACY,EAAE,IAAI,KAAP,EAAc;MACvCD,GADuC;MAEvC,GAAGD;IAFoC,CAAd,CAZtB;IAgBLG,IAAI,EAAEZ,gBAAgB,CAACY,IAAD,CAhBjB;IAiBLE,UAAU,EAAEd,gBAAgB,CAACc,UAAD,EAAa;MACvCgB,QAAQ,EAAE,IAD6B;MAEvCC,YAAY,EAAE;QACZI,QAAQ,eAAErC,oBAACO,mBAAD,EAAoB;UAAC+B,KAAK,EAAE;YAAEC,SAAS,EAAE,UAAUT,kBAAkB;UAAzC;QAAR,CAApB,CADE;QAEZ,eAAe;MAFH;IAFyB,CAAb,CAjBvB;IAwBLf,MAAM,EAAE;MACN,GAAGgB,eADG;MAENS,OAAO,EAAErC,gBAAgB,CACtBsC,EAAD,IAAmG;;QACjG,qBAAe,CAACD,OAAhB,MAAuB,IAAvB,IAAuBE,aAAvB,GAAuB,MAAvB,GAAuBA,QAAvBX,eAAuB,EAAGU,EAAH,CAAvB;QACA,IAAI,CAACA,EAAE,CAACE,gBAAR,EAA0B;UACxBtB,sBAAsB,CAACoB,EAAD,CAAtB;QACD;MACF,CANsB;IAFnB;EAxBH,CAAP;AAoCD,CAvEM","names":["React","getNativeElementProps","resolveShorthand","useEventCallback","useAccordionItemContext_unstable","useARIAButtonShorthand","useAccordionContext_unstable","ChevronRightRegular","useFluent_unstable","useFluent","useAccordionHeader_unstable","props","ref","as","icon","button","expandIcon","inline","size","expandIconPosition","onHeaderClick","onAccordionHeaderClick","disabled","open","disabledFocusable","ctx","collapsible","openItems","length","dir","expandIconRotation","buttonShorthand","required","defaultProps","type","components","root","children","style","transform","onClick","ev","_a","defaultPrevented"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-accordion\\lib\\components\\src\\packages\\react-components\\react-accordion\\src\\components\\AccordionHeader\\useAccordionHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback } from '@fluentui/react-utilities';\nimport { useAccordionItemContext_unstable } from '../AccordionItem/index';\nimport { useARIAButtonShorthand } from '@fluentui/react-aria';\nimport type { AccordionHeaderProps, AccordionHeaderState } from './AccordionHeader.types';\nimport { useAccordionContext_unstable } from '../Accordion/AccordionContext';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\nexport const useAccordionHeader_unstable = (\n  props: AccordionHeaderProps,\n  ref: React.Ref<HTMLElement>,\n): AccordionHeaderState => {\n  const { as, icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n  const { onHeaderClick: onAccordionHeaderClick, disabled, open } = useAccordionItemContext_unstable();\n\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n\n  const { dir } = useFluent();\n\n  // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n  let expandIconRotation: 0 | 90 | -90 | 180;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n\n  const buttonShorthand = useARIAButtonShorthand(button, {\n    required: true,\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button',\n    },\n  });\n\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div',\n    },\n    root: getNativeElementProps(as || 'div', {\n      ref,\n      ...props,\n    }),\n    icon: resolveShorthand(icon),\n    expandIcon: resolveShorthand(expandIcon, {\n      required: true,\n      defaultProps: {\n        children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n        'aria-hidden': true,\n      },\n    }),\n    button: {\n      ...buttonShorthand,\n      onClick: useEventCallback(\n        (ev: React.MouseEvent<HTMLButtonElement & HTMLDivElement & HTMLSpanElement & HTMLAnchorElement>) => {\n          buttonShorthand.onClick?.(ev);\n          if (!ev.defaultPrevented) {\n            onAccordionHeaderClick(ev);\n          }\n        },\n      ),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}