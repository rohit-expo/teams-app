{"ast":null,"code":"import { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport { useModalAttributes } from '@fluentui/react-tabster';\nimport { usePopoverContext_unstable } from '../../popoverContext';\n/**\n * Create the state required to render PopoverSurface.\n *\n * The returned state can be modified with hooks such as usePopoverSurfaceStyles_unstable,\n * before being passed to renderPopoverSurface_unstable.\n *\n * @param props - props from this instance of PopoverSurface\n * @param ref - reference to root HTMLDivElement of PopoverSurface\n */\n\nexport const usePopoverSurface_unstable = (props, ref) => {\n  const contentRef = usePopoverContext_unstable(context => context.contentRef);\n  const openOnHover = usePopoverContext_unstable(context => context.openOnHover);\n  const setOpen = usePopoverContext_unstable(context => context.setOpen);\n  const mountNode = usePopoverContext_unstable(context => context.mountNode);\n  const arrowRef = usePopoverContext_unstable(context => context.arrowRef);\n  const size = usePopoverContext_unstable(context => context.size);\n  const withArrow = usePopoverContext_unstable(context => context.withArrow);\n  const appearance = usePopoverContext_unstable(context => context.appearance);\n  const trapFocus = usePopoverContext_unstable(context => context.trapFocus);\n  const legacyTrapFocus = usePopoverContext_unstable(context => context.legacyTrapFocus);\n  const inline = usePopoverContext_unstable(context => context.inline);\n  const {\n    modalAttributes\n  } = useModalAttributes({\n    trapFocus,\n    legacyTrapFocus\n  });\n  const state = {\n    inline,\n    appearance,\n    withArrow,\n    size,\n    arrowRef,\n    mountNode,\n    components: {\n      root: 'div'\n    },\n    root: getNativeElementProps('div', {\n      ref: useMergedRefs(ref, contentRef),\n      role: trapFocus ? 'dialog' : 'group',\n      'aria-modal': trapFocus ? true : undefined,\n      ...modalAttributes,\n      ...props\n    })\n  };\n  const {\n    onMouseEnter: onMouseEnterOriginal,\n    onMouseLeave: onMouseLeaveOriginal,\n    onKeyDown: onKeyDownOriginal\n  } = state.root;\n  state.root.onMouseEnter = e => {\n    if (openOnHover) {\n      setOpen(e, true);\n    }\n    onMouseEnterOriginal === null || onMouseEnterOriginal === void 0 ? void 0 : onMouseEnterOriginal(e);\n  };\n  state.root.onMouseLeave = e => {\n    if (openOnHover) {\n      setOpen(e, false);\n    }\n    onMouseLeaveOriginal === null || onMouseLeaveOriginal === void 0 ? void 0 : onMouseLeaveOriginal(e);\n  };\n  state.root.onKeyDown = e => {\n    var _a; // only close if the event happened inside the current popover\n    // If using a stack of inline popovers, the user should call `stopPropagation` to avoid dismissing the entire stack\n\n    if (e.key === 'Escape' && ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {\n      setOpen(e, false);\n    }\n    onKeyDownOriginal === null || onKeyDownOriginal === void 0 ? void 0 : onKeyDownOriginal(e);\n  };\n  return state;\n};","map":{"version":3,"mappings":"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","names":["getNativeElementProps","useMergedRefs","useModalAttributes","usePopoverContext_unstable","usePopoverSurface_unstable","props","ref","contentRef","context","openOnHover","setOpen","mountNode","arrowRef","size","withArrow","appearance","trapFocus","legacyTrapFocus","inline","modalAttributes","state","components","root","role","undefined","onMouseEnter","onMouseEnterOriginal","onMouseLeave","onMouseLeaveOriginal","onKeyDown","onKeyDownOriginal","e","key","current","_a","contains","target"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-popover\\lib\\components\\src\\packages\\react-components\\react-popover\\src\\components\\PopoverSurface\\usePopoverSurface.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport { useModalAttributes } from '@fluentui/react-tabster';\nimport { usePopoverContext_unstable } from '../../popoverContext';\nimport type { PopoverSurfaceProps, PopoverSurfaceState } from './PopoverSurface.types';\n\n/**\n * Create the state required to render PopoverSurface.\n *\n * The returned state can be modified with hooks such as usePopoverSurfaceStyles_unstable,\n * before being passed to renderPopoverSurface_unstable.\n *\n * @param props - props from this instance of PopoverSurface\n * @param ref - reference to root HTMLDivElement of PopoverSurface\n */\nexport const usePopoverSurface_unstable = (\n  props: PopoverSurfaceProps,\n  ref: React.Ref<HTMLDivElement>,\n): PopoverSurfaceState => {\n  const contentRef = usePopoverContext_unstable(context => context.contentRef);\n  const openOnHover = usePopoverContext_unstable(context => context.openOnHover);\n  const setOpen = usePopoverContext_unstable(context => context.setOpen);\n  const mountNode = usePopoverContext_unstable(context => context.mountNode);\n  const arrowRef = usePopoverContext_unstable(context => context.arrowRef);\n  const size = usePopoverContext_unstable(context => context.size);\n  const withArrow = usePopoverContext_unstable(context => context.withArrow);\n  const appearance = usePopoverContext_unstable(context => context.appearance);\n  const trapFocus = usePopoverContext_unstable(context => context.trapFocus);\n  const legacyTrapFocus = usePopoverContext_unstable(context => context.legacyTrapFocus);\n  const inline = usePopoverContext_unstable(context => context.inline);\n  const { modalAttributes } = useModalAttributes({ trapFocus, legacyTrapFocus });\n\n  const state: PopoverSurfaceState = {\n    inline,\n    appearance,\n    withArrow,\n    size,\n    arrowRef,\n    mountNode,\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ref: useMergedRefs(ref, contentRef),\n      role: trapFocus ? 'dialog' : 'group',\n      'aria-modal': trapFocus ? true : undefined,\n      ...modalAttributes,\n      ...props,\n    }),\n  };\n\n  const {\n    onMouseEnter: onMouseEnterOriginal,\n    onMouseLeave: onMouseLeaveOriginal,\n    onKeyDown: onKeyDownOriginal,\n  } = state.root;\n  state.root.onMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (openOnHover) {\n      setOpen(e, true);\n    }\n\n    onMouseEnterOriginal?.(e);\n  };\n\n  state.root.onMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (openOnHover) {\n      setOpen(e, false);\n    }\n\n    onMouseLeaveOriginal?.(e);\n  };\n\n  state.root.onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // only close if the event happened inside the current popover\n    // If using a stack of inline popovers, the user should call `stopPropagation` to avoid dismissing the entire stack\n    if (e.key === 'Escape' && contentRef.current?.contains(e.target as HTMLDivElement)) {\n      setOpen(e, false);\n    }\n\n    onKeyDownOriginal?.(e);\n  };\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}