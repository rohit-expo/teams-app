{"ast":null,"code":"import { detectOverflow } from '@floating-ui/dom';\nimport { parseFloatingUIPlacement } from '../utils/index';\nexport function maxSize(autoSize) {\n  return {\n    name: 'maxSize',\n    fn: async middlewareArguments => {\n      const {\n        placement,\n        rects,\n        elements,\n        middlewareData\n      } = middlewareArguments;\n      const basePlacement = parseFloatingUIPlacement(placement).side;\n      const overflow = await detectOverflow(middlewareArguments);\n      const {\n        x,\n        y\n      } = middlewareData.shift || {\n        x: 0,\n        y: 0\n      };\n      const {\n        width,\n        height\n      } = rects.floating;\n      const widthProp = basePlacement === 'left' ? 'left' : 'right';\n      const heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n      const applyMaxWidth = autoSize === 'always' || autoSize === 'width-always' || overflow[widthProp] > 0 && (autoSize === true || autoSize === 'width');\n      const applyMaxHeight = autoSize === 'always' || autoSize === 'height-always' || overflow[heightProp] > 0 && (autoSize === true || autoSize === 'height');\n      if (applyMaxWidth) {\n        elements.floating.style.maxWidth = `${width - overflow[widthProp] - x}px`;\n      }\n      if (applyMaxHeight) {\n        elements.floating.style.maxHeight = `${height - overflow[heightProp] - y}px`;\n      }\n      return {};\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AAGA,SAASC,wBAAT,QAAyC,gBAAzC;AAEA,OAAM,SAAUC,OAAV,CAAkBC,QAAlB,EAA0D;EAC9D,OAAO;IACLC,IAAI,EAAE,SADD;IAELC,EAAE,EAAE,MAAMC,mBAAN,IAA4B;MAC9B,MAAM;QAAEC,SAAF;QAAaC,KAAb;QAAoBC,QAApB;QAA8BC;MAA9B,IAAiDJ,mBAAvD;MACA,MAAMK,aAAa,GAAGV,wBAAwB,CAACM,SAAD,CAAxB,CAAoCK,IAA1D;MAEA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACM,mBAAD,CAArC;MACA,MAAM;QAAEQ,CAAF;QAAKC;MAAL,IAAWL,cAAc,CAACM,KAAf,IAAwB;QAAEF,CAAC,EAAE,CAAL;QAAQC,CAAC,EAAE;MAAX,CAAzC;MACA,MAAM;QAAEE,KAAF;QAASC;MAAT,IAAoBV,KAAK,CAACW,QAAhC;MAEA,MAAMC,SAAS,GAAST,aAAa,KAAK,MAAlB,GAA2B,MAA3B,GAAoC,OAA5D;MACA,MAAMU,UAAU,GAASV,aAAa,KAAK,KAAlB,GAA0B,KAA1B,GAAkC,QAA3D;MAEA,MAAMW,aAAa,GACjBnB,QAAQ,KAAK,QAAb,IACAA,QAAQ,KAAK,cADb,IAECU,QAAQ,CAACO,SAAD,CAAR,GAAsB,CAAtB,KAA4BjB,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,OAA9D,CAHH;MAIA,MAAMoB,cAAc,GAClBpB,QAAQ,KAAK,QAAb,IACAA,QAAQ,KAAK,eADb,IAECU,QAAQ,CAACQ,UAAD,CAAR,GAAuB,CAAvB,KAA6BlB,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,QAA/D,CAHH;MAKA,IAAImB,aAAJ,EAAmB;QACjBb,QAAQ,CAACU,QAAT,CAAkBK,KAAlB,CAAwBC,QAAxB,GAAmC,GAAGR,KAAK,GAAGJ,QAAQ,CAACO,SAAD,CAAhB,GAA8BN,CAAC,IAArE;MACD;MACD,IAAIS,cAAJ,EAAoB;QAClBd,QAAQ,CAACU,QAAT,CAAkBK,KAAlB,CAAwBE,SAAxB,GAAoC,GAAGR,MAAM,GAAGL,QAAQ,CAACQ,UAAD,CAAjB,GAAgCN,CAAC,IAAxE;MACD;MAED,OAAO,EAAP;IACD;EA9BI,CAAP;AAgCD","names":["detectOverflow","parseFloatingUIPlacement","maxSize","autoSize","name","fn","middlewareArguments","placement","rects","elements","middlewareData","basePlacement","side","overflow","x","y","shift","width","height","floating","widthProp","heightProp","applyMaxWidth","applyMaxHeight","style","maxWidth","maxHeight"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-positioning\\lib\\src\\packages\\react-components\\react-positioning\\src\\middleware\\maxSize.ts"],"sourcesContent":["import { detectOverflow } from '@floating-ui/dom';\nimport type { Middleware, Side } from '@floating-ui/dom';\nimport type { PositioningOptions } from '../types';\nimport { parseFloatingUIPlacement } from '../utils/index';\n\nexport function maxSize(autoSize: PositioningOptions['autoSize']): Middleware {\n  return {\n    name: 'maxSize',\n    fn: async middlewareArguments => {\n      const { placement, rects, elements, middlewareData } = middlewareArguments;\n      const basePlacement = parseFloatingUIPlacement(placement).side;\n\n      const overflow = await detectOverflow(middlewareArguments);\n      const { x, y } = middlewareData.shift || { x: 0, y: 0 };\n      const { width, height } = rects.floating;\n\n      const widthProp: Side = basePlacement === 'left' ? 'left' : 'right';\n      const heightProp: Side = basePlacement === 'top' ? 'top' : 'bottom';\n\n      const applyMaxWidth =\n        autoSize === 'always' ||\n        autoSize === 'width-always' ||\n        (overflow[widthProp] > 0 && (autoSize === true || autoSize === 'width'));\n      const applyMaxHeight =\n        autoSize === 'always' ||\n        autoSize === 'height-always' ||\n        (overflow[heightProp] > 0 && (autoSize === true || autoSize === 'height'));\n\n      if (applyMaxWidth) {\n        elements.floating.style.maxWidth = `${width - overflow[widthProp] - x}px`;\n      }\n      if (applyMaxHeight) {\n        elements.floating.style.maxHeight = `${height - overflow[heightProp] - y}px`;\n      }\n\n      return {};\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}