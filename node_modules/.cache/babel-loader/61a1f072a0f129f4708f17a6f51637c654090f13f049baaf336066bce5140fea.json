{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 Device code client\r\n */\nvar DeviceCodeClient = /** @class */function (_super) {\n  __extends(DeviceCodeClient, _super);\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDeviceCode(request)];\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createExtraQueryParameters(request);\n        endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the device code request\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2 /*return*/, {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3 /*break*/, 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2 /*return*/, response.body];\n          case 7:\n            return [3 /*break*/, 1];\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return requestParameters.createQueryString();\n  };\n  return DeviceCodeClient;\n}(BaseClient);\nexport { DeviceCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","DeviceCodeClient","request","getDeviceCode","deviceCodeResponse","_a","deviceCodeCallback","reqTimestamp","TimeUtils","nowSeconds","acquireTokenWithDeviceCode","response","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryParametersString","createExtraQueryParameters","endpoint","UrlString","appendQueryString","deviceCodeEndpoint","queryString","createQueryString","headers","createTokenRequestHeaders","thumbprint","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostRequestToDeviceCodeEndpoint","parameterBuilder","RequestParameterBuilder","extraQueryParameters","addExtraQueryParameters","networkManager","sendPostRequest","body","userCode","deviceCode","verificationUri","expiresIn","interval","message","addScopes","addClientId","StringUtils","isEmpty","clientCapabilities","length","addClaims","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","ClientAuthError","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","createTokenQueryParameters","tokenEndpoint","requestBody","createTokenRequestBody","timeout","undefined","pollingIntervalMilli","continuePolling","cancel","executePostToTokenEndpoint","Constants","AUTHORIZATION_PENDING","info","delay","ServerError","createPostRequestFailed","createDeviceCodeUnknownError","requestParameters","addGrantType","GrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj","BaseClient"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\client\\DeviceCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { Constants, GrantType } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\n\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nexport class DeviceCodeClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\r\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\r\n        request.deviceCodeCallback(deviceCodeResponse);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\r\n            request,\r\n            deviceCodeResponse);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response);\r\n        return await responseHandler.handleServerTokenResponse(\r\n            response,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\r\n        const queryParametersString = this.createExtraQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\r\n        const queryString = this.createQueryString(request);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        return this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request\r\n     */\r\n    createExtraQueryParameters(request: CommonDeviceCodeRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    private async executePostRequestToDeviceCodeEndpoint(\r\n        deviceCodeEndpoint: string,\r\n        queryString: string,\r\n        headers: Record<string, string>,\r\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\r\n\r\n        const {\r\n            body: {\r\n                user_code: userCode,\r\n                device_code: deviceCode,\r\n                verification_uri: verificationUri,\r\n                expires_in: expiresIn,\r\n                interval,\r\n                message\r\n            }\r\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\r\n            thumbprint,\r\n            deviceCodeEndpoint,\r\n            {\r\n                body: queryString,\r\n                headers: headers\r\n            });\r\n\r\n        return {\r\n            userCode,\r\n            deviceCode,\r\n            verificationUri,\r\n            expiresIn,\r\n            interval,\r\n            message\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    private createQueryString(request: CommonDeviceCodeRequest): string {\r\n\r\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    private continuePolling(\r\n        deviceCodeExpirationTime: number,\r\n        userSpecifiedTimeout?: number,\r\n        userSpecifiedCancelFlag?: boolean,\r\n    ): boolean {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\r\n            }\r\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private async acquireTokenWithDeviceCode(\r\n        request: CommonDeviceCodeRequest,\r\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n\r\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n\r\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */\r\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes,\r\n                claims: request.claims,\r\n                authenticationScheme: request.authenticationScheme,\r\n                resourceRequestMethod: request.resourceRequestMethod,\r\n                resourceRequestUri: request.resourceRequestUri,\r\n                shrClaims: request.shrClaims,\r\n                sshKid: request.sshKid\r\n            };\r\n            const response = await this.executePostToTokenEndpoint(\r\n                endpoint,\r\n                requestBody,\r\n                headers,\r\n                thumbprint);\r\n\r\n            if (response.body && response.body.error) {\r\n                // user authorization is pending. Sleep for polling interval and try again\r\n                if(response.body.error === Constants.AUTHORIZATION_PENDING) {\r\n                    this.logger.info(\"Authorization pending. Continue polling.\");\r\n                    await TimeUtils.delay(pollingIntervalMilli);\r\n                } else {\r\n                    // for any other error, throw\r\n                    this.logger.info(\"Unexpected error in polling from the server\");\r\n                    throw ServerError.createPostRequestFailed(response.body.error);\r\n                }\r\n            } else {\r\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                return response.body;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n         */\r\n        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n        throw ClientAuthError.createDeviceCodeUnknownError();\r\n    }\r\n\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\r\n\r\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}