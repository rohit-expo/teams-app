{"ast":null,"code":"import * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\n\nexport function useMergedRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  const mergedCallback = React.useCallback(value => {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n    for (const ref of refs) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n  [...refs]);\n  return mergedCallback;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAQA;;;;;AAKG;;AACH,OAAM,SAAUC,aAAV,GAAgE;EAAA,kCAAlCC,IAA9B;IAA8BA,IAA9B;EAAA;EACJ,MAAMC,cAAc,GAA0BH,KAAK,CAACI,WAAN,CAC3CC,KAAD,IAAa;IACX;IACEF,cAAwD,CAACG,OAAzD,GAAmED,KAAnE;IAEF,KAAK,MAAME,GAAX,IAAkBL,IAAlB,EAAwB;MACtB,IAAI,OAAOK,GAAP,KAAe,UAAnB,EAA+B;QAC7BA,GAAG,CAACF,KAAD,CAAH;MACD,CAFD,MAEO,IAAIE,GAAJ,EAAS;QACd;QACEA,GAA6C,CAACD,OAA9C,GAAwDD,KAAxD;MACH;IACF;EACF,CAb2C;EAc5C;EACA,CAAC,GAAGH,IAAJ,CAf4C,CAA9C;EAkBA,OAAOC,cAAP;AACD","names":["React","useMergedRefs","refs","mergedCallback","useCallback","value","current","ref"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\hooks\\useMergedRefs.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = (React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      ((mergedCallback as unknown) as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          ((ref as unknown) as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown) as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}