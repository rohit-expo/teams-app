{"ast":null,"code":"import * as React from 'react';\nimport { mergeCallbacks, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nexport function useToggleState(props, state) {\n  const {\n    checked,\n    defaultChecked,\n    disabled,\n    disabledFocusable\n  } = props;\n  const {\n    onClick,\n    role\n  } = state.root;\n  const [checkedValue, setCheckedValue] = useControllableState({\n    state: checked,\n    defaultState: defaultChecked,\n    initialState: false\n  });\n  const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n  const onToggleClick = React.useCallback(ev => {\n    if (!disabled && !disabledFocusable) {\n      if (ev.defaultPrevented) {\n        return;\n      }\n      setCheckedValue(!checkedValue);\n    }\n  }, [checkedValue, disabled, disabledFocusable, setCheckedValue]);\n  return {\n    ...state,\n    checked: checkedValue,\n    root: {\n      ...state.root,\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedValue,\n      onClick: useEventCallback(mergeCallbacks(onClick, onToggleClick))\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,gBAA/C,QAAuE,2BAAvE;AAIA,OAAM,SAAUC,cAAV,CAIJC,KAJI,EAIuBC,KAJvB,EAI0C;EAC9C,MAAM;IAAEC,OAAF;IAAWC,cAAX;IAA2BC,QAA3B;IAAqCC;EAArC,IAA2DL,KAAjE;EACA,MAAM;IAAEM,OAAF;IAAWC;EAAX,IAAoBN,KAAK,CAACO,IAAhC;EAEA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,oBAAoB,CAAC;IAC3DI,KAAK,EAAEC,OADoD;IAE3DS,YAAY,EAAER,cAF6C;IAG3DS,YAAY,EAAE;EAH6C,CAAD,CAA5D;EAMA,MAAMC,kBAAkB,GAAGN,IAAI,KAAK,kBAAT,IAA+BA,IAAI,KAAK,UAAnE;EAEA,MAAMO,aAAa,GAAGnB,KAAK,CAACoB,WAAN,CACpBC,EAAE,IAAG;IACH,IAAI,CAACZ,QAAD,IAAa,CAACC,iBAAlB,EAAqC;MACnC,IAAIW,EAAE,CAACC,gBAAP,EAAyB;QACvB;MACD;MAEDP,eAAe,CAAC,CAACD,YAAF,CAAf;IACD;EACF,CATmB,EAUpB,CAACA,YAAD,EAAeL,QAAf,EAAyBC,iBAAzB,EAA4CK,eAA5C,CAVoB,CAAtB;EAaA,OAAO;IACL,GAAGT,KADE;IAGLC,OAAO,EAAEO,YAHJ;IAKLD,IAAI,EAAE;MACJ,GAAGP,KAAK,CAACO,IADL;MAEJ,CAACK,kBAAkB,GAAG,cAAH,GAAoB,cAAvC,GAAwDJ,YAFpD;MAGJH,OAAO,EAAER,gBAAgB,CACvBF,cAAc,CAACU,OAAD,EAA4EQ,aAA5E,CADS;IAHrB;EALD,CAAP;AAaD","names":["React","mergeCallbacks","useControllableState","useEventCallback","useToggleState","props","state","checked","defaultChecked","disabled","disabledFocusable","onClick","role","root","checkedValue","setCheckedValue","defaultState","initialState","isCheckboxTypeRole","onToggleClick","useCallback","ev","defaultPrevented"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-button\\lib\\src\\packages\\react-components\\react-button\\src\\utils\\useToggleState.ts"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type { ButtonState } from '../Button';\nimport type { ToggleButtonProps, ToggleButtonState } from '../ToggleButton';\n\nexport function useToggleState<\n  TToggleButtonProps extends Pick<ToggleButtonProps, 'checked' | 'defaultChecked' | 'disabled' | 'disabledFocusable'>,\n  TButtonState extends Pick<ButtonState, 'root'>,\n  TToggleButtonState extends Pick<ToggleButtonState, 'checked' | 'root'>\n>(props: TToggleButtonProps, state: TButtonState): TToggleButtonState {\n  const { checked, defaultChecked, disabled, disabledFocusable } = props;\n  const { onClick, role } = state.root;\n\n  const [checkedValue, setCheckedValue] = useControllableState({\n    state: checked,\n    defaultState: defaultChecked,\n    initialState: false,\n  });\n\n  const isCheckboxTypeRole = role === 'menuitemcheckbox' || role === 'checkbox';\n\n  const onToggleClick = React.useCallback(\n    ev => {\n      if (!disabled && !disabledFocusable) {\n        if (ev.defaultPrevented) {\n          return;\n        }\n\n        setCheckedValue(!checkedValue);\n      }\n    },\n    [checkedValue, disabled, disabledFocusable, setCheckedValue],\n  );\n\n  return {\n    ...state,\n\n    checked: checkedValue,\n\n    root: {\n      ...state.root,\n      [isCheckboxTypeRole ? 'aria-checked' : 'aria-pressed']: checkedValue,\n      onClick: useEventCallback(\n        mergeCallbacks(onClick as React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>, onToggleClick),\n      ),\n    },\n  } as TToggleButtonState;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}