{"ast":null,"code":"import { KEYBORG_FOCUSIN, createKeyborg, disposeKeyborg } from 'keyborg';\nimport { FOCUS_WITHIN_ATTR } from './constants';\n/**\n * A ponyfill that allows `:focus-within` to support visibility based on keyboard/mouse navigation\n * like `:focus-visible` https://github.com/WICG/focus-visible/issues/151\n * @returns ref to the element that uses `:focus-within` styles\n */\n\nexport function applyFocusWithinPolyfill(element, win) {\n  const keyborg = createKeyborg(win); // When navigation mode changes to mouse, remove the focus-within selector\n\n  keyborg.subscribe(isNavigatingWithKeyboard => {\n    if (!isNavigatingWithKeyboard) {\n      removeFocusWithinClass(element);\n    }\n  }); // Keyborg's focusin event is delegated so it's only registered once on the window\n  // and contains metadata about the focus event\n\n  const keyborgListener = e => {\n    if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e.target)) {\n      // Griffel can't create chained global styles so use the parent element for now\n      applyFocusWithinClass(element);\n    }\n  }; // Make sure that when focus leaves the scope, the focus within class is removed\n\n  const blurListener = e => {\n    if (!e.relatedTarget || isHTMLElement(e.relatedTarget) && !element.contains(e.relatedTarget)) {\n      removeFocusWithinClass(element);\n    }\n  };\n  element.addEventListener(KEYBORG_FOCUSIN, keyborgListener);\n  element.addEventListener('focusout', blurListener); // Return disposer\n\n  return () => {\n    element.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);\n    element.removeEventListener('focusout', blurListener);\n    disposeKeyborg(keyborg);\n  };\n}\nfunction applyFocusWithinClass(el) {\n  el.setAttribute(FOCUS_WITHIN_ATTR, '');\n}\nfunction removeFocusWithinClass(el) {\n  el.removeAttribute(FOCUS_WITHIN_ATTR);\n}\nfunction isHTMLElement(target) {\n  if (!target) {\n    return false;\n  }\n  return Boolean(target && typeof target === 'object' && 'classList' in target && 'contains' in target);\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,EAA+CC,aAA/C,EAA8DC,cAA9D,QAAoF,SAApF;AACA,SAASC,iBAAT,QAAkC,aAAlC;AASA;;;;AAIG;;AACH,OAAM,SAAUC,wBAAV,CAAmCC,OAAnC,EAAyDC,GAAzD,EAAoE;EACxE,MAAMC,OAAO,GAAGN,aAAa,CAACK,GAAD,CAA7B,CADwE,CAGxE;;EACAC,OAAO,CAACC,SAAR,CAAkBC,wBAAwB,IAAG;IAC3C,IAAI,CAACA,wBAAL,EAA+B;MAC7BC,sBAAsB,CAACL,OAAD,CAAtB;IACD;EACF,CAJD,EAJwE,CAUxE;EACA;;EACA,MAAMM,eAAe,GAAIC,CAAD,IAA2B;IACjD,IAAIL,OAAO,CAACE,wBAAR,MAAsCI,aAAa,CAACD,CAAC,CAACE,MAAH,CAAvD,EAAmE;MACjE;MACAC,qBAAqB,CAACV,OAAD,CAArB;IACD;EACF,CALD,CAZwE,CAmBxE;;EACA,MAAMW,YAAY,GAAIJ,CAAD,IAAkB;IACrC,IAAI,CAACA,CAAC,CAACK,aAAH,IAAqBJ,aAAa,CAACD,CAAC,CAACK,aAAH,CAAb,IAAkC,CAACZ,OAAO,CAACa,QAAR,CAAiBN,CAAC,CAACK,aAAnB,CAA5D,EAAgG;MAC9FP,sBAAsB,CAACL,OAAD,CAAtB;IACD;EACF,CAJD;EAMAA,OAAO,CAACc,gBAAR,CAAyBnB,eAAzB,EAA0CW,eAA1C;EACAN,OAAO,CAACc,gBAAR,CAAyB,UAAzB,EAAqCH,YAArC,EA3BwE,CA6BxE;;EACA,OAAO,MAAK;IACVX,OAAO,CAACe,mBAAR,CAA4BpB,eAA5B,EAA6CW,eAA7C;IACAN,OAAO,CAACe,mBAAR,CAA4B,UAA5B,EAAwCJ,YAAxC;IACAd,cAAc,CAACK,OAAD,CAAd;EACD,CAJD;AAKD;AAED,SAASQ,qBAAT,CAA+BM,EAA/B,EAA8C;EAC5CA,EAAE,CAACC,YAAH,CAAgBnB,iBAAhB,EAAmC,EAAnC;AACD;AAED,SAASO,sBAAT,CAAgCW,EAAhC,EAA+C;EAC7CA,EAAE,CAACE,eAAH,CAAmBpB,iBAAnB;AACD;AAED,SAASU,aAAT,CAAuBC,MAAvB,EAAiD;EAC/C,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,KAAP;EACD;EACD,OAAOU,OAAO,CAACV,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwC,eAAeA,MAAvD,IAAiE,cAAcA,MAAhF,CAAd;AACD","names":["KEYBORG_FOCUSIN","createKeyborg","disposeKeyborg","FOCUS_WITHIN_ATTR","applyFocusWithinPolyfill","element","win","keyborg","subscribe","isNavigatingWithKeyboard","removeFocusWithinClass","keyborgListener","e","isHTMLElement","target","applyFocusWithinClass","blurListener","relatedTarget","contains","addEventListener","removeEventListener","el","setAttribute","removeAttribute","Boolean"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\focus\\focusWithinPolyfill.ts"],"sourcesContent":["import { KEYBORG_FOCUSIN, KeyborgFocusInEvent, createKeyborg, disposeKeyborg } from 'keyborg';\nimport { FOCUS_WITHIN_ATTR } from './constants';\n\n/**\n * Because `addEventListener` type override falls back to 2nd definition (evt name is unknown string literal)\n * evt is being typed as a base class of MouseEvent -> `Event`.\n * This type is used to override `listener` calls to make TS happy\n */\ntype ListenerOverride = (evt: Event) => void;\n\n/**\n * A ponyfill that allows `:focus-within` to support visibility based on keyboard/mouse navigation\n * like `:focus-visible` https://github.com/WICG/focus-visible/issues/151\n * @returns ref to the element that uses `:focus-within` styles\n */\nexport function applyFocusWithinPolyfill(element: HTMLElement, win: Window): () => void {\n  const keyborg = createKeyborg(win);\n\n  // When navigation mode changes to mouse, remove the focus-within selector\n  keyborg.subscribe(isNavigatingWithKeyboard => {\n    if (!isNavigatingWithKeyboard) {\n      removeFocusWithinClass(element);\n    }\n  });\n\n  // Keyborg's focusin event is delegated so it's only registered once on the window\n  // and contains metadata about the focus event\n  const keyborgListener = (e: KeyborgFocusInEvent) => {\n    if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e.target)) {\n      // Griffel can't create chained global styles so use the parent element for now\n      applyFocusWithinClass(element);\n    }\n  };\n\n  // Make sure that when focus leaves the scope, the focus within class is removed\n  const blurListener = (e: FocusEvent) => {\n    if (!e.relatedTarget || (isHTMLElement(e.relatedTarget) && !element.contains(e.relatedTarget))) {\n      removeFocusWithinClass(element);\n    }\n  };\n\n  element.addEventListener(KEYBORG_FOCUSIN, keyborgListener as ListenerOverride);\n  element.addEventListener('focusout', blurListener);\n\n  // Return disposer\n  return () => {\n    element.removeEventListener(KEYBORG_FOCUSIN, keyborgListener as ListenerOverride);\n    element.removeEventListener('focusout', blurListener);\n    disposeKeyborg(keyborg);\n  };\n}\n\nfunction applyFocusWithinClass(el: HTMLElement) {\n  el.setAttribute(FOCUS_WITHIN_ATTR, '');\n}\n\nfunction removeFocusWithinClass(el: HTMLElement) {\n  el.removeAttribute(FOCUS_WITHIN_ATTR);\n}\n\nfunction isHTMLElement(target: EventTarget | null): target is HTMLElement {\n  if (!target) {\n    return false;\n  }\n  return Boolean(target && typeof target === 'object' && 'classList' in target && 'contains' in target);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}