{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PopupClient = /** @class */function (_super) {\n  __extends(PopupClient, _super);\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    // Properly sets this reference for the unload event.\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {};\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n        // Passes on popup position and dimensions if in request\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {};\n      // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\");\n        // Passes on popup position and dimensions if in request\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            // Create auth code request and generate PKCE params\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\n          case 3:\n            authCodeRequest = _a.sent();\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4 /*yield*/, this.monitorPopupForHash(popupWindow)];\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\n            // Remove throttle if it exists\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              // end measurement for server call with native brokering enabled\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n          case 7:\n            result = _a.sent();\n            return [2 /*return*/, result];\n          case 8:\n            e_1 = _a.sent();\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n            // Clear cache on logout\n            return [4 /*yield*/, this.clearCacheOnLogout(validRequest.account)];\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4 /*yield*/, this.waitForLogoutPopup(popupWindow)];\n          case 4:\n            _a.sent();\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n            return [3 /*break*/, 6];\n          case 5:\n            e_2 = _a.sent();\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl);\n      // Open the popup window to requestUrl.\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\n      var ticks = 0;\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n          _this.cleanPopup();\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n        ticks++;\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n          clearInterval(intervalId);\n          _this.cleanPopup(popupWindow);\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n          _this.cleanPopup();\n          clearInterval(intervalId);\n          resolve();\n        }\n        var href = Constants.EMPTY_STRING;\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n        clearInterval(intervalId);\n        _this.cleanPopup(popupWindow);\n        resolve();\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0;\n      // Popup window passed in, setting url to navigate to\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      }\n      // Popup will be null if popups are blocked\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    }\n    // Guarantees browser unload will happen, so no other errors will be thrown.\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    }\n    // Remove window unload function\n    window.removeEventListener(\"beforeunload\", this.unloadWindow);\n    // Interaction is completed - remove interaction status.\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n  return PopupClient;\n}(StandardInteractionClient);\nexport { PopupClient };","map":{"version":3,"mappings":"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","names":["__extends","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_super","_this","unloadWindow","bind","nativeStorage","PopupClient","request","popupName","generatePopupName","scopes","OIDC_DEFAULT_SCOPES","authority","auth","popupWindowAttributes","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","undefined","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenPopup","setPreQueueTime","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","InteractionType","Popup","validRequest","_a","browserStorage","updateCacheEntries","state","nonce","loginHint","Constants","EMPTY_STRING","account","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","authCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","authClient","isNativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","fetchNativeAccountIdMeasurement","startMeasurement","FetchAccountIdWithNativeBroker","getAuthCodeUrl","nativeBroker","navigateUrl","interactionHandler","InteractionHandler","popupParameters","popupWindow","initiateAuthRequest","emitEvent","EventType","POPUP_OPENED","monitorPopupForHash","hash","serverParams","UrlString","getDeserializedHash","state_1","validateAndExtractStateFromHash","ThrottlingUtils","removeThrottle","clientId","accountId","endMeasurement","success","BrowserAuthError","createNativeConnectionNotEstablishedError","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","acquireToken","prompt","finally","cleanRequestByState","handleCodeResponseFromHash","networkClient","result","close","e_1","AuthError","setCorrelationId","cacheFailedRequest","requestAuthority","LOGOUT_START","logoutPopup","clearCacheOnLogout","logoutUri","getLogoutUri","LOGOUT_SUCCESS","openPopup","waitForLogoutPopup","navigationOptions","apiId","timeout","redirectNavigationTimeout","noHistory","absoluteUrl","getAbsoluteUrl","BrowserUtils","getCurrentUri","verbosePii","navigateInternal","e_2","setInteractionInProgress","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","StringUtils","isEmpty","infoPii","error","createEmptyNavigationUriError","resolve","maxTicks","windowHashTimeout","pollIntervalMilliseconds","ticks","intervalId","setInterval","closed","cleanPopup","clearInterval","createUserCancelledError","href","location","hashContainsKnownProperties","errorPii","createHashDoesNotContainKnownPropertiesError","createMonitorPopupTimeoutError","urlNavigate","popupParams","assign","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","message","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","top","popupPosition","left","BrowserConstants","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","preventDefault","removeEventListener","POPUP_NAME_PREFIX","join","homeAccountId","StandardInteractionClient"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\PopupClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthenticationResult, CommonAuthorizationCodeRequest, AuthorizationCodeClient, ThrottlingUtils, CommonEndSessionRequest, UrlString, AuthError, OIDC_DEFAULT_SCOPES, Constants, ProtocolUtils, ServerAuthorizationCodeResponse, PerformanceEvents, StringUtils, IPerformanceClient, Logger, ICrypto } from \"@azure/msal-common\";\r\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { InteractionType, ApiId, BrowserConstants } from \"../utils/BrowserConstants\";\r\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\r\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { EventHandler } from \"../event/EventHandler\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserConfiguration } from \"../config/Configuration\";\r\nimport { InteractionHandler, InteractionParams } from \"../interaction_handler/InteractionHandler\";\r\nimport { PopupWindowAttributes } from \"../request/PopupWindowAttributes\";\r\n\r\nexport type PopupParams = InteractionParams & {\r\n    popup?: Window|null;\r\n    popupName: string;\r\n    popupWindowAttributes: PopupWindowAttributes\r\n};\r\n\r\nexport class PopupClient extends StandardInteractionClient {\r\n    private currentWindow: Window | undefined;\r\n    protected nativeStorage: BrowserCacheManager;\r\n\r\n    constructor(config: BrowserConfiguration, storageImpl: BrowserCacheManager, browserCrypto: ICrypto, logger: Logger, eventHandler: EventHandler, navigationClient: INavigationClient, performanceClient: IPerformanceClient, nativeStorageImpl: BrowserCacheManager, nativeMessageHandler?: NativeMessageHandler, correlationId?: string) {\r\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n        this.nativeStorage = nativeStorageImpl;\r\n    }\r\n\r\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */\r\n    acquireToken(request: PopupRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            const popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\r\n            const popupWindowAttributes = request.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\r\n            }\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    logout(logoutRequest?: EndSessionPopupRequest): Promise<void> {\r\n        try {\r\n            this.logger.verbose(\"logoutPopup called\");\r\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n\r\n            const popupName = this.generateLogoutPopupName(validLogoutRequest);\r\n            const authority = logoutRequest && logoutRequest.authority;\r\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\r\n            const popupWindowAttributes = logoutRequest?.popupWindowAttributes || {};\r\n\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\r\n            } else {\r\n                // asyncPopups flag is set to false. Opens popup before logging out.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\r\n                const popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\r\n            }\r\n        } catch (e) {\r\n            // Since this function is synchronous we need to reject\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    protected async acquireTokenPopupAsync(request: PopupRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, popup?: Window|null): Promise<AuthenticationResult> {\r\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\r\n\r\n        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n        const validRequest = await this.initializeAuthorizationRequest(request, InteractionType.Popup);\r\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n\r\n        try {\r\n            // Create auth code request and generate PKCE params\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n            const authCodeRequest: CommonAuthorizationCodeRequest = await this.initializeAuthorizationCodeRequest(validRequest);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n            const authClient: AuthorizationCodeClient = await this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            const isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\r\n            // Start measurement for server calls with native brokering enabled\r\n            let fetchNativeAccountIdMeasurement;\r\n            if (isNativeBroker) {\r\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\r\n            }\r\n\r\n            // Create acquire token url.\r\n            const navigateUrl = await authClient.getAuthCodeUrl({\r\n                ...validRequest,\r\n                nativeBroker: isNativeBroker\r\n            });\r\n\r\n            // Create popup interaction handler.\r\n            const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\r\n\r\n            // Show the UI once the url has been created. Get the window handle for the popup.\r\n            const popupParameters: PopupParams = {\r\n                popup,\r\n                popupName,\r\n                popupWindowAttributes\r\n            };\r\n            const popupWindow: Window = this.initiateAuthRequest(navigateUrl, popupParameters);\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\r\n            const hash = await this.monitorPopupForHash(popupWindow);\r\n            // Deserialize hash fragment response parameters.\r\n            const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n            const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\r\n            // Remove throttle if it exists\r\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\r\n\r\n            if (serverParams.accountId) {\r\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                // end measurement for server call with native brokering enabled\r\n                if (fetchNativeAccountIdMeasurement) {\r\n                    fetchNativeAccountIdMeasurement.endMeasurement({\r\n                        success: true,\r\n                        isNativeBroker: true\r\n                    });\r\n                }\r\n\r\n                if (!this.nativeMessageHandler) {\r\n                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                }\r\n                const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\r\n                const { userRequestState } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\r\n                return nativeInteractionClient.acquireToken({\r\n                    ...validRequest,\r\n                    state: userRequestState,\r\n                    prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                }).finally(() => {\r\n                    this.browserStorage.cleanRequestByState(state);\r\n                });\r\n            }\r\n\r\n            // Handle response from hash string.\r\n            const result = await interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient);\r\n\r\n            return result;\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            this.browserStorage.cleanRequestByState(validRequest.state);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */\r\n    protected async logoutPopupAsync(validRequest: CommonEndSessionRequest, popupName: string, popupWindowAttributes: PopupWindowAttributes, requestAuthority?: string, popup?: Window|null, mainWindowRedirectUri?: string): Promise<void> {\r\n        this.logger.verbose(\"logoutPopupAsync called\");\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\r\n\r\n        const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\r\n\r\n        try {\r\n            // Clear cache on logout\r\n            await this.clearCacheOnLogout(validRequest.account);\r\n\r\n            // Initialize the client\r\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\r\n            const authClient = await this.createAuthCodeClient(serverTelemetryManager, requestAuthority);\r\n            this.logger.verbose(\"Auth code client created\");\r\n\r\n            // Create logout string and navigate user window to logout.\r\n            const logoutUri: string = authClient.getLogoutUri(validRequest);\r\n\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\r\n\r\n            // Open the popup window to requestUrl.\r\n            const popupWindow = this.openPopup(logoutUri, {popupName, popupWindowAttributes, popup});\r\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {popupWindow}, null);\r\n\r\n            await this.waitForLogoutPopup(popupWindow);\r\n\r\n            if (mainWindowRedirectUri) {\r\n                const navigationOptions: NavigationOptions = {\r\n                    apiId: ApiId.logoutPopup,\r\n                    timeout: this.config.system.redirectNavigationTimeout,\r\n                    noHistory: false\r\n                };\r\n                const absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\r\n\r\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\r\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\r\n                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\r\n            } else {\r\n                this.logger.verbose(\"No main window navigation requested\");\r\n            }\r\n        } catch (e) {\r\n            if (popup) {\r\n                // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                popup.close();\r\n            }\r\n\r\n            if (e instanceof AuthError) {\r\n                (e as AuthError).setCorrelationId(this.correlationId);\r\n            }\r\n\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e);\r\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n            serverTelemetryManager.cacheFailedRequest(e);\r\n            throw e;\r\n        }\r\n\r\n        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n    }\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\r\n            // Open the popup window to requestUrl.\r\n            return this.openPopup(requestUrl, params);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.logger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */\r\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            /*\r\n             * Polling for popups needs to be tick-based,\r\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n             */\r\n            const maxTicks = this.config.system.windowHashTimeout / this.config.system.pollIntervalMilliseconds;\r\n            let ticks = 0;\r\n\r\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                let hash: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                    hash = popupWindow.location.hash;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\r\n\r\n                /*\r\n                 * Only run clock when we are on same domain for popups\r\n                 * as popup operations can take a long time.\r\n                 */\r\n                ticks++;\r\n\r\n                if (hash) {\r\n                    this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\r\n                    clearInterval(intervalId);\r\n                    this.cleanPopup(popupWindow);\r\n\r\n                    if (UrlString.hashContainsKnownProperties(hash)) {\r\n                        this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\r\n                        resolve(hash);\r\n                    } else {\r\n                        this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\r\n                        this.logger.errorPii(`PopupHandler.monitorPopupForHash - hash found: ${hash}`);\r\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\r\n                    }\r\n                } else if (ticks > maxTicks) {\r\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\r\n                }\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Waits for user interaction in logout popup window\r\n     * @param popupWindow\r\n     * @returns\r\n     */\r\n    waitForLogoutPopup(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\r\n\r\n            const intervalId = setInterval(() => {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    resolve();\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\r\n\r\n                clearInterval(intervalId);\r\n                this.cleanPopup(popupWindow);\r\n                resolve();\r\n            }, this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupParams: PopupParams): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popupParams.popup) {\r\n                popupWindow = popupParams.popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popupParams.popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + (e as AuthError).message);\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            throw BrowserAuthError.createPopupWindowError((e as AuthError).toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */\r\n    openSizedPopup(urlNavigate: string, popupName: string, popupWindowAttributes: PopupWindowAttributes): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n\r\n        let width = popupWindowAttributes.popupSize?.width;\r\n        let height = popupWindowAttributes.popupSize?.height;\r\n        let top = popupWindowAttributes.popupPosition?.top;\r\n        let left = popupWindowAttributes.popupPosition?.left;\r\n\r\n        if (!width || width < 0 || width > winWidth) {\r\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\r\n            width = BrowserConstants.POPUP_WIDTH;\r\n        }\r\n\r\n        if (!height || height < 0 || height > winHeight) {\r\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\r\n            height = BrowserConstants.POPUP_HEIGHT;\r\n        }\r\n\r\n        if (!top || top < 0 || top > winHeight) {\r\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\r\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n        }\r\n\r\n        if (!left || left < 0 || left > winWidth) {\r\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\r\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        }\r\n\r\n        return window.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.setInteractionInProgress(false);\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generatePopupName(scopes: Array<string>, authority: string): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    generateLogoutPopupName(request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}