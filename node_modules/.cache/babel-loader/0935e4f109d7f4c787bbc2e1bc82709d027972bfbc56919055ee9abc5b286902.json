{"ast":null,"code":"import { resolveShorthand } from '@fluentui/react-utilities';\nimport { useARIAButtonProps } from './useARIAButtonProps';\n/**\n * @internal\n *\n * This function expects to receive a slot, if `as` property is not desired use `useARIAButtonProps` instead\n *\n * Button keyboard handling, role, disabled and tabIndex implementation that ensures ARIA spec\n * for multiple scenarios of shorthand properties. Ensuring 1st rule of ARIA for cases\n * where no attribute addition is required.\n */\n\nexport const useARIAButtonShorthand = (slot, options) => {\n  var _a;\n  const shorthand = resolveShorthand(slot, options);\n  const shorthandARIAButton = useARIAButtonProps((_a = shorthand === null || shorthand === void 0 ? void 0 : shorthand.as) !== null && _a !== void 0 ? _a : 'button', shorthand);\n  return shorthand && shorthandARIAButton;\n};","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,2BAAjC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAIA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,sBAAsB,GAAkD,CAACC,IAAD,EAAOC,OAAP,KAAkB;;EACrG,MAAMC,SAAS,GAAGL,gBAAgB,CAACG,IAAD,EAAOC,OAAP,CAAlC;EACA,MAAME,mBAAmB,GAAGL,kBAAkB,CAAkC,eAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAEM,EAAX,MAAa,IAAb,IAAaC,aAAb,GAAaA,EAAb,GAAiB,QAAnD,EAA6DH,SAA7D,CAA9C;EACA,OAAOA,SAAS,IAAIC,mBAApB;AACD,CAJM","names":["resolveShorthand","useARIAButtonProps","useARIAButtonShorthand","slot","options","shorthand","shorthandARIAButton","as","_a"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-aria\\lib\\src\\packages\\react-components\\react-aria\\src\\button\\useARIAButtonShorthand.ts"],"sourcesContent":["import { resolveShorthand } from '@fluentui/react-utilities';\nimport { useARIAButtonProps } from './useARIAButtonProps';\nimport type { ResolveShorthandFunction } from '@fluentui/react-utilities';\nimport type { ARIAButtonProps, ARIAButtonSlotProps, ARIAButtonType } from './types';\n\n/**\n * @internal\n *\n * This function expects to receive a slot, if `as` property is not desired use `useARIAButtonProps` instead\n *\n * Button keyboard handling, role, disabled and tabIndex implementation that ensures ARIA spec\n * for multiple scenarios of shorthand properties. Ensuring 1st rule of ARIA for cases\n * where no attribute addition is required.\n */\nexport const useARIAButtonShorthand: ResolveShorthandFunction<ARIAButtonSlotProps> = (slot, options) => {\n  const shorthand = resolveShorthand(slot, options);\n  const shorthandARIAButton = useARIAButtonProps<ARIAButtonType, ARIAButtonProps>(shorthand?.as ?? 'button', shorthand);\n  return shorthand && shorthandARIAButton;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}