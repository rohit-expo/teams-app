{"ast":null,"code":"import * as React from 'react';\nimport { CircleFilled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { useRadioGroupContext_unstable } from '../../contexts/RadioGroupContext';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n/**\n * Create the state required to render Radio.\n *\n * The returned state can be modified with hooks such as useRadioStyles_unstable,\n * before being passed to renderRadio_unstable.\n *\n * @param props - props from this instance of Radio\n * @param ref - reference to `<input>` element of Radio\n */\n\nexport const useRadio_unstable = (props, ref) => {\n  const nameGroup = useRadioGroupContext_unstable(ctx => ctx.name);\n  const value = useRadioGroupContext_unstable(ctx => ctx.value);\n  const defaultValue = useRadioGroupContext_unstable(ctx => ctx.defaultValue);\n  const disabledGroup = useRadioGroupContext_unstable(ctx => ctx.disabled);\n  const layout = useRadioGroupContext_unstable(ctx => ctx.layout);\n  const requiredGroup = useRadioGroupContext_unstable(ctx => ctx.required);\n  const {\n    name = nameGroup,\n    checked = value !== undefined ? value === props.value : undefined,\n    defaultChecked = defaultValue !== undefined ? defaultValue === props.value : undefined,\n    labelPosition = layout === 'horizontal-stacked' ? 'below' : 'after',\n    disabled = disabledGroup,\n    required = requiredGroup,\n    onChange\n  } = props;\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'onChange']\n  });\n  const root = resolveShorthand(props.root, {\n    required: true,\n    defaultProps: {\n      ref: useFocusWithin(),\n      ...nativeProps.root\n    }\n  });\n  const input = resolveShorthand(props.input, {\n    required: true,\n    defaultProps: {\n      ref,\n      type: 'radio',\n      id: useId('radio-', nativeProps.primary.id),\n      name,\n      checked,\n      defaultChecked,\n      disabled,\n      required,\n      ...nativeProps.primary\n    }\n  });\n  input.onChange = mergeCallbacks(input.onChange, ev => onChange === null || onChange === void 0 ? void 0 : onChange(ev, {\n    value: ev.currentTarget.value\n  }));\n  const label = resolveShorthand(props.label, {\n    defaultProps: {\n      htmlFor: input.id,\n      disabled\n    }\n  });\n  const indicator = resolveShorthand(props.indicator, {\n    required: true,\n    defaultProps: {\n      'aria-hidden': true,\n      children: /*#__PURE__*/React.createElement(CircleFilled, null)\n    }\n  });\n  return {\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      label: Label,\n      indicator: 'div'\n    },\n    root,\n    input,\n    label,\n    indicator\n  };\n};","map":{"version":3,"mappings":"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","names":["React","CircleFilled","Label","getPartitionedNativeProps","mergeCallbacks","resolveShorthand","useId","useRadioGroupContext_unstable","useFocusWithin","useRadio_unstable","props","ref","nameGroup","ctx","name","value","defaultValue","disabledGroup","disabled","layout","requiredGroup","required","checked","undefined","defaultChecked","labelPosition","onChange","nativeProps","primarySlotTagName","excludedPropNames","root","defaultProps","input","type","id","primary","ev","currentTarget","label","htmlFor","indicator","children","components"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-radio\\lib\\components\\src\\packages\\react-components\\react-radio\\src\\components\\Radio\\useRadio.tsx"],"sourcesContent":["import * as React from 'react';\nimport { CircleFilled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport { useRadioGroupContext_unstable } from '../../contexts/RadioGroupContext';\nimport { useFocusWithin } from '@fluentui/react-tabster';\nimport type { RadioProps, RadioState } from './Radio.types';\n\n/**\n * Create the state required to render Radio.\n *\n * The returned state can be modified with hooks such as useRadioStyles_unstable,\n * before being passed to renderRadio_unstable.\n *\n * @param props - props from this instance of Radio\n * @param ref - reference to `<input>` element of Radio\n */\nexport const useRadio_unstable = (props: RadioProps, ref: React.Ref<HTMLInputElement>): RadioState => {\n  const nameGroup = useRadioGroupContext_unstable(ctx => ctx.name);\n  const value = useRadioGroupContext_unstable(ctx => ctx.value);\n  const defaultValue = useRadioGroupContext_unstable(ctx => ctx.defaultValue);\n  const disabledGroup = useRadioGroupContext_unstable(ctx => ctx.disabled);\n  const layout = useRadioGroupContext_unstable(ctx => ctx.layout);\n  const requiredGroup = useRadioGroupContext_unstable(ctx => ctx.required);\n\n  const {\n    name = nameGroup,\n    checked = value !== undefined ? value === props.value : undefined,\n    defaultChecked = defaultValue !== undefined ? defaultValue === props.value : undefined,\n    labelPosition = layout === 'horizontal-stacked' ? 'below' : 'after',\n    disabled = disabledGroup,\n    required = requiredGroup,\n    onChange,\n  } = props;\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'onChange'],\n  });\n\n  const root = resolveShorthand(props.root, {\n    required: true,\n    defaultProps: {\n      ref: useFocusWithin<HTMLSpanElement>(),\n      ...nativeProps.root,\n    },\n  });\n\n  const input = resolveShorthand(props.input, {\n    required: true,\n    defaultProps: {\n      ref,\n      type: 'radio',\n      id: useId('radio-', nativeProps.primary.id),\n      name,\n      checked,\n      defaultChecked,\n      disabled,\n      required,\n      ...nativeProps.primary,\n    },\n  });\n\n  input.onChange = mergeCallbacks(input.onChange, ev => onChange?.(ev, { value: ev.currentTarget.value }));\n\n  const label = resolveShorthand(props.label, {\n    defaultProps: {\n      htmlFor: input.id,\n      disabled,\n    },\n  });\n\n  const indicator = resolveShorthand(props.indicator, {\n    required: true,\n    defaultProps: {\n      'aria-hidden': true,\n      children: <CircleFilled />,\n    },\n  });\n\n  return {\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      label: Label,\n      indicator: 'div',\n    },\n    root,\n    input,\n    label,\n    indicator,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}