{"ast":null,"code":"import * as React from 'react';\nimport { CircleFilled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\n/**\n * Create the state required to render Switch.\n *\n * The returned state can be modified with hooks such as useSwitchStyles_unstable,\n * before being passed to renderSwitch_unstable.\n *\n * @param props - props from this instance of Switch\n * @param ref - reference to `<input>` element of Switch\n */\n\nexport const useSwitch_unstable = (props, ref) => {\n  const {\n    checked,\n    defaultChecked,\n    disabled,\n    labelPosition = 'after',\n    onChange,\n    required\n  } = props;\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'onChange']\n  });\n  const id = useId('switch-', nativeProps.primary.id);\n  const root = resolveShorthand(props.root, {\n    defaultProps: {\n      ref: useFocusWithin(),\n      ...nativeProps.root\n    },\n    required: true\n  });\n  const indicator = resolveShorthand(props.indicator, {\n    defaultProps: {\n      'aria-hidden': true,\n      children: /*#__PURE__*/React.createElement(CircleFilled, null)\n    },\n    required: true\n  });\n  const input = resolveShorthand(props.input, {\n    defaultProps: {\n      checked,\n      defaultChecked,\n      id,\n      ref,\n      role: 'switch',\n      type: 'checkbox',\n      ...nativeProps.primary\n    },\n    required: true\n  });\n  input.onChange = mergeCallbacks(input.onChange, ev => onChange === null || onChange === void 0 ? void 0 : onChange(ev, {\n    checked: ev.currentTarget.checked\n  }));\n  const label = resolveShorthand(props.label, {\n    defaultProps: {\n      disabled,\n      htmlFor: id,\n      required,\n      size: 'medium'\n    }\n  });\n  return {\n    labelPosition,\n    //Slots definition\n    components: {\n      root: 'div',\n      indicator: 'div',\n      input: 'input',\n      label: Label\n    },\n    root,\n    indicator,\n    input,\n    label\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,yBAAT,EAAoCC,cAApC,EAAoDC,gBAApD,EAAsEC,KAAtE,QAAmF,2BAAnF;AAGA;;;;;;;;AAQG;;AACH,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAqBC,GAArB,KAAsE;EACtG,MAAM;IAAEC,OAAF;IAAWC,cAAX;IAA2BC,QAA3B;IAAqCC,aAAa,GAAG,OAArD;IAA8DC,QAA9D;IAAwEC;EAAxE,IAAqFP,KAA3F;EAEA,MAAMQ,WAAW,GAAGb,yBAAyB,CAAC;IAC5CK,KAD4C;IAE5CS,kBAAkB,EAAE,OAFwB;IAG5CC,iBAAiB,EAAE,CAAC,SAAD,EAAY,gBAAZ,EAA8B,UAA9B;EAHyB,CAAD,CAA7C;EAMA,MAAMC,EAAE,GAAGb,KAAK,CAAC,SAAD,EAAYU,WAAW,CAACI,OAAZ,CAAoBD,EAAhC,CAAhB;EAEA,MAAME,IAAI,GAAGhB,gBAAgB,CAACG,KAAK,CAACa,IAAP,EAAa;IACxCC,YAAY,EAAE;MAAEb,GAAG,EAAEP,cAAc,EAArB;MAAyC,GAAGc,WAAW,CAACK;IAAxD,CAD0B;IAExCN,QAAQ,EAAE;EAF8B,CAAb,CAA7B;EAKA,MAAMQ,SAAS,GAAGlB,gBAAgB,CAACG,KAAK,CAACe,SAAP,EAAkB;IAClDD,YAAY,EAAE;MACZ,eAAe,IADH;MAEZE,QAAQ,eAAEzB,oBAACC,YAAD,EAAa,IAAb;IAFE,CADoC;IAKlDe,QAAQ,EAAE;EALwC,CAAlB,CAAlC;EAQA,MAAMU,KAAK,GAAGpB,gBAAgB,CAACG,KAAK,CAACiB,KAAP,EAAc;IAC1CH,YAAY,EAAE;MACZZ,OADY;MAEZC,cAFY;MAGZQ,EAHY;MAIZV,GAJY;MAKZiB,IAAI,EAAE,QALM;MAMZC,IAAI,EAAE,UANM;MAOZ,GAAGX,WAAW,CAACI;IAPH,CAD4B;IAU1CL,QAAQ,EAAE;EAVgC,CAAd,CAA9B;EAYAU,KAAK,CAACX,QAAN,GAAiBV,cAAc,CAACqB,KAAK,CAACX,QAAP,EAAiBc,EAAE,IAAId,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGc,EAAH,EAAO;IAAElB,OAAO,EAAEkB,EAAE,CAACC,aAAH,CAAiBnB;EAA5B,CAAP,CAA/B,CAA/B;EAEA,MAAMoB,KAAK,GAAGzB,gBAAgB,CAACG,KAAK,CAACsB,KAAP,EAAc;IAC1CR,YAAY,EAAE;MACZV,QADY;MAEZmB,OAAO,EAAEZ,EAFG;MAGZJ,QAHY;MAIZiB,IAAI,EAAE;IAJM;EAD4B,CAAd,CAA9B;EASA,OAAO;IACLnB,aADK;IAGL;IACAoB,UAAU,EAAE;MACVZ,IAAI,EAAE,KADI;MAEVE,SAAS,EAAE,KAFD;MAGVE,KAAK,EAAE,OAHG;MAIVK,KAAK,EAAE7B;IAJG,CAJP;IAWLoB,IAXK;IAYLE,SAZK;IAaLE,KAbK;IAcLK;EAdK,CAAP;AAgBD,CA/DM","names":["React","CircleFilled","Label","useFocusWithin","getPartitionedNativeProps","mergeCallbacks","resolveShorthand","useId","useSwitch_unstable","props","ref","checked","defaultChecked","disabled","labelPosition","onChange","required","nativeProps","primarySlotTagName","excludedPropNames","id","primary","root","defaultProps","indicator","children","input","role","type","ev","currentTarget","label","htmlFor","size","components"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-switch\\lib\\components\\src\\packages\\react-components\\react-switch\\src\\components\\Switch\\useSwitch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { CircleFilled } from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\nimport { getPartitionedNativeProps, mergeCallbacks, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport type { SwitchProps, SwitchState } from './Switch.types';\n\n/**\n * Create the state required to render Switch.\n *\n * The returned state can be modified with hooks such as useSwitchStyles_unstable,\n * before being passed to renderSwitch_unstable.\n *\n * @param props - props from this instance of Switch\n * @param ref - reference to `<input>` element of Switch\n */\nexport const useSwitch_unstable = (props: SwitchProps, ref: React.Ref<HTMLInputElement>): SwitchState => {\n  const { checked, defaultChecked, disabled, labelPosition = 'after', onChange, required } = props;\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'onChange'],\n  });\n\n  const id = useId('switch-', nativeProps.primary.id);\n\n  const root = resolveShorthand(props.root, {\n    defaultProps: { ref: useFocusWithin<HTMLDivElement>(), ...nativeProps.root },\n    required: true,\n  });\n\n  const indicator = resolveShorthand(props.indicator, {\n    defaultProps: {\n      'aria-hidden': true,\n      children: <CircleFilled />,\n    },\n    required: true,\n  });\n\n  const input = resolveShorthand(props.input, {\n    defaultProps: {\n      checked,\n      defaultChecked,\n      id,\n      ref,\n      role: 'switch',\n      type: 'checkbox',\n      ...nativeProps.primary,\n    },\n    required: true,\n  });\n  input.onChange = mergeCallbacks(input.onChange, ev => onChange?.(ev, { checked: ev.currentTarget.checked }));\n\n  const label = resolveShorthand(props.label, {\n    defaultProps: {\n      disabled,\n      htmlFor: id,\n      required,\n      size: 'medium',\n    },\n  });\n\n  return {\n    labelPosition,\n\n    //Slots definition\n    components: {\n      root: 'div',\n      indicator: 'div',\n      input: 'input',\n      label: Label,\n    },\n\n    root,\n    indicator,\n    input,\n    label,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}