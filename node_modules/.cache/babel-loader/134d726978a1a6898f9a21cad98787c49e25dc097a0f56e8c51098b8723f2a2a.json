{"ast":null,"code":"import { clamp, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { sliderCSSVars } from './useSliderStyles';\nconst {\n  sliderStepsPercentVar,\n  sliderProgressVar,\n  sliderDirectionVar\n} = sliderCSSVars;\nconst getPercent = (value, min, max) => {\n  return max === min ? 0 : (value - min) / (max - min) * 100;\n};\nexport const useSliderState_unstable = (state, props) => {\n  const {\n    defaultValue = 0,\n    min = 0,\n    max = 100,\n    step,\n    value\n  } = props;\n  const {\n    dir\n  } = useFluent();\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value !== undefined ? clamp(value, min, max) : undefined,\n    defaultState: clamp(defaultValue, min, max),\n    initialState: 0\n  });\n  const valuePercent = getPercent(currentValue, min, max);\n  const inputOnChange = state.input.onChange;\n  const propsOnChange = props.onChange;\n  const onChange = useEventCallback(ev => {\n    const newValue = Number(ev.target.value);\n    setCurrentValue(clamp(newValue, min, max));\n    if (inputOnChange && inputOnChange !== propsOnChange) {\n      inputOnChange(ev);\n    } else if (propsOnChange) {\n      propsOnChange(ev, {\n        value: newValue\n      });\n    }\n  });\n  const rootVariables = {\n    [sliderDirectionVar]: state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',\n    [sliderStepsPercentVar]: step && step > 0 ? `${step * 100 / (max - min)}%` : '',\n    [sliderProgressVar]: `${valuePercent}%`\n  }; // Root props\n\n  state.root.style = {\n    ...rootVariables,\n    ...state.root.style\n  }; // Input Props\n\n  state.input.value = currentValue;\n  state.input.onChange = onChange;\n  return state;\n};","map":{"version":3,"mappings":"AACA,SAASA,KAAT,EAAgBC,oBAAhB,EAAsCC,gBAAtC,QAA8D,2BAA9D;AACA,SAASC,kBAAkB,IAAIC,SAA/B,QAAgD,iCAAhD;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAGA,MAAM;EAAEC,qBAAF;EAAyBC,iBAAzB;EAA4CC;AAA5C,IAAmEH,aAAzE;AAEA,MAAMI,UAAU,GAAG,CAACC,KAAD,EAAgBC,GAAhB,EAA6BC,GAA7B,KAA4C;EAC7D,OAAOA,GAAG,KAAKD,GAAR,GAAc,CAAd,GAAmB,CAACD,KAAK,GAAGC,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAD,GAAgC,GAAzD;AACD,CAFD;AAIA,OAAO,MAAME,uBAAuB,GAAG,CAACC,KAAD,EAAqBC,KAArB,KAA2C;EAChF,MAAM;IAAEC,YAAY,GAAG,CAAjB;IAAoBL,GAAG,GAAG,CAA1B;IAA6BC,GAAG,GAAG,GAAnC;IAAwCK,IAAxC;IAA8CP;EAA9C,IAAwDK,KAA9D;EACA,MAAM;IAAEG;EAAF,IAAUd,SAAS,EAAzB;EACA,MAAM,CAACe,YAAD,EAAeC,eAAf,IAAkCnB,oBAAoB,CAAC;IAC3Da,KAAK,EAAEJ,KAAK,KAAKW,SAAV,GAAsBrB,KAAK,CAACU,KAAD,EAAQC,GAAR,EAAaC,GAAb,CAA3B,GAA+CS,SADK;IAE3DC,YAAY,EAAEtB,KAAK,CAACgB,YAAD,EAAeL,GAAf,EAAoBC,GAApB,CAFwC;IAG3DW,YAAY,EAAE;EAH6C,CAAD,CAA5D;EAKA,MAAMC,YAAY,GAAGf,UAAU,CAACU,YAAD,EAAeR,GAAf,EAAoBC,GAApB,CAA/B;EAEA,MAAMa,aAAa,GAAGX,KAAK,CAACY,KAAN,CAAYC,QAAlC;EACA,MAAMC,aAAa,GAAGb,KAAK,CAACY,QAA5B;EAEA,MAAMA,QAAQ,GAA+CzB,gBAAgB,CAAC2B,EAAE,IAAG;IACjF,MAAMC,QAAQ,GAAGC,MAAM,CAACF,EAAE,CAACG,MAAH,CAAUtB,KAAX,CAAvB;IACAU,eAAe,CAACpB,KAAK,CAAC8B,QAAD,EAAWnB,GAAX,EAAgBC,GAAhB,CAAN,CAAf;IAEA,IAAIa,aAAa,IAAIA,aAAa,KAAKG,aAAvC,EAAsD;MACpDH,aAAa,CAACI,EAAD,CAAb;IACD,CAFD,MAEO,IAAID,aAAJ,EAAmB;MACxBA,aAAa,CAACC,EAAD,EAAK;QAAEnB,KAAK,EAAEoB;MAAT,CAAL,CAAb;IACD;EACF,CAT4E,CAA7E;EAWA,MAAMG,aAAa,GAAG;IACpB,CAACzB,kBAAD,GAAsBM,KAAK,CAACoB,QAAN,GAAiB,MAAjB,GAA0BhB,GAAG,KAAK,KAAR,GAAgB,OAAhB,GAA0B,QADtD;IAEpB,CAACZ,qBAAD,GAAyBW,IAAI,IAAIA,IAAI,GAAG,CAAf,GAAmB,GAAIA,IAAI,GAAG,GAAR,IAAgBL,GAAG,GAAGD,GAAtB,CAA0B,GAAhD,GAAsD,EAF3D;IAGpB,CAACJ,iBAAD,GAAqB,GAAGiB,YAAY;EAHhB,CAAtB,CAxBgF,CA8BhF;;EACAV,KAAK,CAACqB,IAAN,CAAWC,KAAX,GAAmB;IACjB,GAAGH,aADc;IAEjB,GAAGnB,KAAK,CAACqB,IAAN,CAAWC;EAFG,CAAnB,CA/BgF,CAoChF;;EACAtB,KAAK,CAACY,KAAN,CAAYhB,KAAZ,GAAoBS,YAApB;EACAL,KAAK,CAACY,KAAN,CAAYC,QAAZ,GAAuBA,QAAvB;EAEA,OAAOb,KAAP;AACD,CAzCM","names":["clamp","useControllableState","useEventCallback","useFluent_unstable","useFluent","sliderCSSVars","sliderStepsPercentVar","sliderProgressVar","sliderDirectionVar","getPercent","value","min","max","useSliderState_unstable","state","props","defaultValue","step","dir","currentValue","setCurrentValue","undefined","defaultState","initialState","valuePercent","inputOnChange","input","onChange","propsOnChange","ev","newValue","Number","target","rootVariables","vertical","root","style"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-slider\\lib\\components\\src\\packages\\react-components\\react-slider\\src\\components\\Slider\\useSliderState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { clamp, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { sliderCSSVars } from './useSliderStyles';\nimport type { SliderState, SliderProps } from './Slider.types';\n\nconst { sliderStepsPercentVar, sliderProgressVar, sliderDirectionVar } = sliderCSSVars;\n\nconst getPercent = (value: number, min: number, max: number) => {\n  return max === min ? 0 : ((value - min) / (max - min)) * 100;\n};\n\nexport const useSliderState_unstable = (state: SliderState, props: SliderProps) => {\n  const { defaultValue = 0, min = 0, max = 100, step, value } = props;\n  const { dir } = useFluent();\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value !== undefined ? clamp(value, min, max) : undefined,\n    defaultState: clamp(defaultValue, min, max),\n    initialState: 0,\n  });\n  const valuePercent = getPercent(currentValue, min, max);\n\n  const inputOnChange = state.input.onChange;\n  const propsOnChange = props.onChange;\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = useEventCallback(ev => {\n    const newValue = Number(ev.target.value);\n    setCurrentValue(clamp(newValue, min, max));\n\n    if (inputOnChange && inputOnChange !== propsOnChange) {\n      inputOnChange(ev);\n    } else if (propsOnChange) {\n      propsOnChange(ev, { value: newValue });\n    }\n  });\n\n  const rootVariables = {\n    [sliderDirectionVar]: state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',\n    [sliderStepsPercentVar]: step && step > 0 ? `${(step * 100) / (max - min)}%` : '',\n    [sliderProgressVar]: `${valuePercent}%`,\n  };\n\n  // Root props\n  state.root.style = {\n    ...rootVariables,\n    ...state.root.style,\n  };\n\n  // Input Props\n  state.input.value = currentValue;\n  state.input.onChange = onChange;\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}