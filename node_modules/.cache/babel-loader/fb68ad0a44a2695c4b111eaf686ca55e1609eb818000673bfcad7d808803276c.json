{"ast":null,"code":"import * as React from 'react';\nimport { defaultSSRContextValue, useSSRContext } from '../ssr/index';\n/**\n * Resets generated IDs, should be used only in tests.\n */\n\nexport function resetIdsForTests() {\n  defaultSSRContextValue.current = 0;\n}\n/**\n * Hook to generate a unique ID.\n *\n * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\n\nexport function useId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'fui-';\n  let providedId = arguments.length > 1 ? arguments[1] : undefined;\n  const contextValue = useSSRContext();\n  return React.useMemo(() => {\n    if (providedId) {\n      return providedId;\n    }\n    return `${prefix}${++contextValue.current}`;\n  }, [prefix, providedId, contextValue]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,EAAiCC,aAAjC,QAAsD,cAAtD;AAEA;;AAEG;;AACH,OAAM,SAAUC,gBAAV,GAA0B;EAC9BF,sBAAsB,CAACG,OAAvB,GAAiC,CAAjC;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAUC,KAAV,GAA4D;EAAA,IAA5CC,6EAAiB,MAAjC;EAAA,IAAyCC,UAAzC;EACJ,MAAMC,YAAY,GAAGN,aAAa,EAAlC;EAEA,OAAOF,KAAK,CAACS,OAAN,CAAc,MAAK;IACxB,IAAIF,UAAJ,EAAgB;MACd,OAAOA,UAAP;IACD;IAED,OAAO,GAAGD,MAAM,GAAG,EAAEE,YAAY,CAACJ,OAAO,EAAzC;EACD,CANM,EAMJ,CAACE,MAAD,EAASC,UAAT,EAAqBC,YAArB,CANI,CAAP;AAOD","names":["React","defaultSSRContextValue","useSSRContext","resetIdsForTests","current","useId","prefix","providedId","contextValue","useMemo"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\hooks\\useId.ts"],"sourcesContent":["import * as React from 'react';\nimport { defaultSSRContextValue, useSSRContext } from '../ssr/index';\n\n/**\n * Resets generated IDs, should be used only in tests.\n */\nexport function resetIdsForTests(): void {\n  defaultSSRContextValue.current = 0;\n}\n\n/**\n * Hook to generate a unique ID.\n *\n * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix: string = 'fui-', providedId?: string): string {\n  const contextValue = useSSRContext();\n\n  return React.useMemo(() => {\n    if (providedId) {\n      return providedId;\n    }\n\n    return `${prefix}${++contextValue.current}`;\n  }, [prefix, providedId, contextValue]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}