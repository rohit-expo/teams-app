{"ast":null,"code":"/**\n * @internal\n * Combine two event callbacks into a single callback function that calls each one in order.\n *\n * Usage example:\n * ```ts\n * state.slot.onChange = mergeCallbacks(state.slot.onChange, ev => {\n *   // Handle onChange\n * });\n * ```\n *\n * The primary use is to avoid the need to capture an existing callback (`state.slot.onChange` in the example) to a\n * local variable before replacing with a new listener that calls the existing one. This helps avoid bugs like:\n * * Infinite recursion by calling the re-assigned state.slot.onChange if it's not captured to a local variable.\n * * Missing a call to the original onChange due to an early return or other conditional.\n *\n * If you need a callback that is stable between renders, wrap the result in {@link useEventCallback}.\n *\n * @param callback1 - The first callback to be called, or undefined\n * @param callback2 - The second callback to be called, or undefined\n *\n * @returns A function that that calls the provided functions in order\n */\nexport function mergeCallbacks(callback1, callback2) {\n  return function () {\n    callback1 === null || callback1 === void 0 ? void 0 : callback1(...arguments);\n    callback2 === null || callback2 === void 0 ? void 0 : callback2(...arguments);\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACH,OAAM,SAAUA,cAAV,CACJC,SADI,EAEJC,SAFI,EAE4C;EAEhD,OAAO,YAAkB;IACvBD,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAG,YAAH,CAAT;IACAC,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAG,YAAH,CAAT;EACD,CAHD;AAID","names":["mergeCallbacks","callback1","callback2"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\utils\\mergeCallbacks.ts"],"sourcesContent":["/**\n * @internal\n * Combine two event callbacks into a single callback function that calls each one in order.\n *\n * Usage example:\n * ```ts\n * state.slot.onChange = mergeCallbacks(state.slot.onChange, ev => {\n *   // Handle onChange\n * });\n * ```\n *\n * The primary use is to avoid the need to capture an existing callback (`state.slot.onChange` in the example) to a\n * local variable before replacing with a new listener that calls the existing one. This helps avoid bugs like:\n * * Infinite recursion by calling the re-assigned state.slot.onChange if it's not captured to a local variable.\n * * Missing a call to the original onChange due to an early return or other conditional.\n *\n * If you need a callback that is stable between renders, wrap the result in {@link useEventCallback}.\n *\n * @param callback1 - The first callback to be called, or undefined\n * @param callback2 - The second callback to be called, or undefined\n *\n * @returns A function that that calls the provided functions in order\n */\nexport function mergeCallbacks<Args extends unknown[]>(\n  callback1: ((...args: Args) => void) | undefined,\n  callback2: ((...args: Args) => void) | undefined,\n) {\n  return (...args: Args) => {\n    callback1?.(...args);\n    callback2?.(...args);\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}