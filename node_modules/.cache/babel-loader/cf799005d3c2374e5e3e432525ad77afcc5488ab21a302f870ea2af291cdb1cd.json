{"ast":null,"code":"import { useTooltip_unstable } from './useTooltip';\nimport { renderTooltip_unstable } from './renderTooltip';\nimport { useTooltipStyles_unstable } from './useTooltipStyles';\n/**\n * A tooltip provides light weight contextual information on top of its target element.\n */\n\nexport const Tooltip = props => {\n  const state = useTooltip_unstable(props);\n  useTooltipStyles_unstable(state);\n  return renderTooltip_unstable(state);\n};\nTooltip.displayName = 'Tooltip'; // type casting here is required to ensure internal type FluentTriggerComponent is not leaked\n\nTooltip.isFluentTriggerComponent = true;","map":{"version":3,"mappings":"AACA,SAASA,mBAAT,QAAoC,cAApC;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,yBAAT,QAA0C,oBAA1C;AAIA;;AAEG;;AACH,OAAO,MAAMC,OAAO,GAA2BC,KAAK,IAAG;EACrD,MAAMC,KAAK,GAAGL,mBAAmB,CAACI,KAAD,CAAjC;EAEAF,yBAAyB,CAACG,KAAD,CAAzB;EACA,OAAOJ,sBAAsB,CAACI,KAAD,CAA7B;AACD,CALM;AAOPF,OAAO,CAACG,WAAR,GAAsB,SAAtB,C,CACA;;AACCH,OAAkC,CAACI,wBAAnC,GAA8D,IAA9D","names":["useTooltip_unstable","renderTooltip_unstable","useTooltipStyles_unstable","Tooltip","props","state","displayName","isFluentTriggerComponent"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tooltip\\lib\\components\\src\\packages\\react-components\\react-tooltip\\src\\components\\Tooltip\\Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useTooltip_unstable } from './useTooltip';\nimport { renderTooltip_unstable } from './renderTooltip';\nimport { useTooltipStyles_unstable } from './useTooltipStyles';\nimport type { TooltipProps } from './Tooltip.types';\nimport type { FluentTriggerComponent } from '@fluentui/react-utilities';\n\n/**\n * A tooltip provides light weight contextual information on top of its target element.\n */\nexport const Tooltip: React.FC<TooltipProps> = props => {\n  const state = useTooltip_unstable(props);\n\n  useTooltipStyles_unstable(state);\n  return renderTooltip_unstable(state);\n};\n\nTooltip.displayName = 'Tooltip';\n// type casting here is required to ensure internal type FluentTriggerComponent is not leaked\n(Tooltip as FluentTriggerComponent).isFluentTriggerComponent = true;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}