{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserPerformanceClient = /** @class */function (_super) {\n  __extends(BrowserPerformanceClient, _super);\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    // Capture page visibilityState and then invoke start/end measurement\n    var startPageVisibility = this.getPageVisibility();\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    var currentTime = window.performance.now();\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n  return BrowserPerformanceClient;\n}(PerformanceClient);\nexport { BrowserPerformanceClient };","map":{"version":3,"mappings":"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","names":["__extends","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_super","_this","browserCrypto","BrowserCrypto","guidGenerator","GuidGenerator","BrowserPerformanceClient","measureName","correlationId","BrowserPerformanceMeasurement","generateGuid","visibilityState","toString","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","window","performance","now","startPageVisibility","getPageVisibility","startMeasurement","endMeasurement","res","endPageVisibility","deleteIncompleteSubMeasurements","discardMeasurement","measurement","flushMeasurement","eventName","supportsBrowserPerformanceNow","trace","preQueueEvent","preQueueTimeByCorrelationId","name","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime","PerformanceClient"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\telemetry\\BrowserPerformanceClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Logger,\r\n    PerformanceEvent,\r\n    PerformanceEvents,\r\n    IPerformanceClient,\r\n    PerformanceClient,\r\n    IPerformanceMeasurement,\r\n    InProgressPerformanceEvent,\r\n    ApplicationTelemetry,\r\n    SubMeasurement,\r\n    PreQueueEvent\r\n} from \"@azure/msal-common\";\r\nimport { CryptoOptions } from \"../config/Configuration\";\r\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\r\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\r\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\r\n\r\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n\r\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry, cryptoOptions: CryptoOptions) {\r\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoOptions);\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n    }\r\n\r\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\r\n    }\r\n\r\n    generateId() : string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    private getPageVisibility(): string | null {\r\n        return document.visibilityState?.toString() || null;\r\n    }\r\n\r\n    private deleteIncompleteSubMeasurements(inProgressEvent: InProgressPerformanceEvent): void {\r\n        const rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\r\n        const isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\r\n        const incompleteMeasurements: SubMeasurement[] = [];\r\n        if (isRootEvent && rootEvent?.incompleteSubMeasurements) {\r\n            rootEvent.incompleteSubMeasurements.forEach((subMeasurement) => {\r\n                incompleteMeasurements.push({...subMeasurement});\r\n            });\r\n        }\r\n        // Clean up remaining marks for incomplete sub-measurements\r\n        if (incompleteMeasurements.length > 0) {\r\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\r\n        }\r\n    }\r\n\r\n    supportsBrowserPerformanceNow(): boolean {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.now === \"function\";\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        const startPageVisibility = this.getPageVisibility();\r\n\r\n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\r\n\r\n        return {\r\n            ...inProgressEvent,\r\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\r\n                const res = inProgressEvent.endMeasurement({\r\n                    startPageVisibility,\r\n                    endPageVisibility: this.getPageVisibility(),\r\n                    ...event\r\n                });\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n\r\n                return res;\r\n            },\r\n            discardMeasurement: () => {\r\n                inProgressEvent.discardMeasurement();\r\n                this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                inProgressEvent.measurement.flushMeasurement();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to set telemetry queue time`);\r\n            return;\r\n        }\r\n\r\n        const preQueueEvent: PreQueueEvent | undefined = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(`BrowserPerformanceClient: Incomplete pre-queue ${preQueueEvent.name} found`, correlationId);\r\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });\r\n    }\r\n\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(`BrowserPerformanceClient: window performance API not available, unable to add queue measurement for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        if (!correlationId) {\r\n            this.logger.trace(`BrowserPerformanceClient: correlationId for ${eventName} not provided, unable to add queue measurement`);\r\n            return;\r\n        }\r\n\r\n        const preQueueTime = super.getPreQueueTime(eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = window.performance.now();\r\n        const resQueueTime = queueTime || super.calculateQueuedTime(preQueueTime, currentTime);\r\n\r\n        return super.addQueueMeasurement(eventName, correlationId, resQueueTime, manuallyCompleted);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}