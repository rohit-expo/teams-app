{"ast":null,"code":"/*! @azure/msal-browser v2.38.0 2023-07-05 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ModernBrowserCrypto = /** @class */function () {\n  function ModernBrowserCrypto() {}\n  ModernBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n  };\n  ModernBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.crypto.subtle.generateKey(algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  ModernBrowserCrypto.prototype.exportKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n  ModernBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n  ModernBrowserCrypto.prototype.sign = function (algorithm, key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.crypto.subtle.sign(algorithm, key, data)];\n      });\n    });\n  };\n  ModernBrowserCrypto.prototype.digest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n  return ModernBrowserCrypto;\n}();\nexport { ModernBrowserCrypto };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;EAQA;EACIA,6CAAe,GAAf,UAAgBC,UAAsB;IAClC,OAAOC,MAAM,CAACC,MAAM,CAACC,eAAe,CAACH,UAAU,CAAC;GACnD;EAEKD,yCAAW,GAAjB,UAAkBK,SAAgC,EAAEC,WAAoB,EAAEC,SAAqB;;;QAC3F,sBAAOL,MAAM,CAACC,MAAM,CAACK,MAAM,CAACC,WAAW,CAACJ,SAAS,EAAEC,WAAW,EAAEC,SAAS,CAA2B;;;GACvG;EAEKP,uCAAS,GAAf,UAAgBU,GAAc;;;QAC1B,sBAAOR,MAAM,CAACC,MAAM,CAACK,MAAM,CAACG,SAAS,CAACC,cAAc,EAAEF,GAAG,CAAwB;;;GACpF;EAEKV,uCAAS,GAAf,UAAgBa,OAAmB,EAAER,SAAgC,EAAEC,WAAoB,EAAEC,SAAqB;;;QAC9G,sBAAOL,MAAM,CAACC,MAAM,CAACK,MAAM,CAACM,SAAS,CAACF,cAAc,EAAEC,OAAO,EAAER,SAAS,EAAEC,WAAW,EAAEC,SAAS,CAAuB;;;GAC1H;EAEKP,kCAAI,GAAV,UAAWK,SAA8B,EAAEK,GAAc,EAAEK,IAAiB;;;QACxE,sBAAOb,MAAM,CAACC,MAAM,CAACK,MAAM,CAACQ,IAAI,CAACX,SAAS,EAAEK,GAAG,EAAEK,IAAI,CAAyB;;;GACjF;EAEKf,oCAAM,GAAZ,UAAaK,SAA8B,EAAEU,IAAgB;;;QACzD,sBAAOb,MAAM,CAACC,MAAM,CAACK,MAAM,CAACS,MAAM,CAACZ,SAAS,EAAEU,IAAI,CAAyB;;;GAC9E;EACL,0BAAC;AAAD,CAAC","names":["ModernBrowserCrypto","dataBuffer","window","crypto","getRandomValues","algorithm","extractable","keyUsages","subtle","generateKey","key","exportKey","KEY_FORMAT_JWK","keyData","importKey","data","sign","digest"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-browser\\src\\crypto\\ModernBrowserCrypto.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\r\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\r\n\r\nexport class ModernBrowserCrypto implements ISubtleCrypto {\r\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\r\n        return window.crypto.getRandomValues(dataBuffer);\r\n    }\r\n\r\n    async generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair> {\r\n        return window.crypto.subtle.generateKey(algorithm, extractable, keyUsages) as Promise<CryptoKeyPair>;\r\n    }\r\n\r\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\r\n        return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key) as Promise<JsonWebKey>;\r\n    }\r\n\r\n    async importKey(keyData: JsonWebKey, algorithm: RsaHashedImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\r\n        return window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages) as Promise<CryptoKey>;\r\n    }\r\n\r\n    async sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\r\n        return window.crypto.subtle.sign(algorithm, key, data) as Promise<ArrayBuffer>;\r\n    }\r\n\r\n    async digest(algorithm: AlgorithmIdentifier, data: Uint8Array): Promise<ArrayBuffer> {\r\n        return window.crypto.subtle.digest(algorithm, data) as Promise<ArrayBuffer>;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}