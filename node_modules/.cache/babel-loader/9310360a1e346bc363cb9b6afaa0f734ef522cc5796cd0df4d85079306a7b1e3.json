{"ast":null,"code":"import * as React from 'react';\nimport { useTabster } from './useTabster';\n/**\n * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element\n */\n\nexport const useFocusFinders = () => {\n  const tabster = useTabster(); // Narrow props for now and let need dictate additional props in the future\n\n  const findAllFocusable = React.useCallback((container, acceptCondition) => (tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findAll({\n    container,\n    acceptCondition\n  })) || [], [tabster]);\n  const findFirstFocusable = React.useCallback(container => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findFirst({\n    container\n  }), [tabster]);\n  const findLastFocusable = React.useCallback(container => tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findLast({\n    container\n  }), [tabster]);\n  const findNextFocusable = React.useCallback(function (currentElement) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findNext({\n      currentElement,\n      ...options\n    });\n  }, [tabster]);\n  const findPrevFocusable = React.useCallback(function (currentElement) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findPrev({\n      currentElement,\n      ...options\n    });\n  }, [tabster]);\n  return {\n    findAllFocusable,\n    findFirstFocusable,\n    findLastFocusable,\n    findNextFocusable,\n    findPrevFocusable\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAEA;;AAEG;;AACH,OAAO,MAAMC,eAAe,GAAG,MAAK;EAClC,MAAMC,OAAO,GAAGF,UAAU,EAA1B,CADkC,CAGlC;;EACA,MAAMG,gBAAgB,GAAGJ,KAAK,CAACK,WAAN,CACvB,CAACC,SAAD,EAAyBC,eAAzB,KACE,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,SAAT,CAAmBC,OAAnB,CAA2B;IAAEH,SAAF;IAAaC;EAAb,CAA3B,MAA8D,EAFzC,EAGvB,CAACJ,OAAD,CAHuB,CAAzB;EAMA,MAAMO,kBAAkB,GAAGV,KAAK,CAACK,WAAN,CACxBC,SAAD,IAA4BH,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEK,SAAT,CAAmBG,SAAnB,CAA6B;IAAEL;EAAF,CAA7B,CADH,EAEzB,CAACH,OAAD,CAFyB,CAA3B;EAKA,MAAMS,iBAAiB,GAAGZ,KAAK,CAACK,WAAN,CAAmBC,SAAD,IAA4BH,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEK,SAAT,CAAmBK,QAAnB,CAA4B;IAAEP;EAAF,CAA5B,CAA9C,EAA0F,CAClHH,OADkH,CAA1F,CAA1B;EAIA,MAAMW,iBAAiB,GAAGd,KAAK,CAACK,WAAN,CACxB,UAACU,cAAD;IAAA,IAA8BC,8EAAyD,EAAvF;IAAA,OACEb,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEK,SAAT,CAAmBS,QAAnB,CAA4B;MAAEF,cAAF;MAAkB,GAAGC;IAArB,CAA5B,CAFsB;EAAA,GAGxB,CAACb,OAAD,CAHwB,CAA1B;EAMA,MAAMe,iBAAiB,GAAGlB,KAAK,CAACK,WAAN,CACxB,UAACU,cAAD;IAAA,IAA8BC,8EAAyD,EAAvF;IAAA,OACEb,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEK,SAAT,CAAmBW,QAAnB,CAA4B;MAAEJ,cAAF;MAAkB,GAAGC;IAArB,CAA5B,CAFsB;EAAA,GAGxB,CAACb,OAAD,CAHwB,CAA1B;EAMA,OAAO;IACLC,gBADK;IAELM,kBAFK;IAGLE,iBAHK;IAILE,iBAJK;IAKLI;EALK,CAAP;AAOD,CAtCM","names":["React","useTabster","useFocusFinders","tabster","findAllFocusable","useCallback","container","acceptCondition","focusable","findAll","findFirstFocusable","findFirst","findLastFocusable","findLast","findNextFocusable","currentElement","options","findNext","findPrevFocusable","findPrev"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-tabster\\lib\\src\\packages\\react-components\\react-tabster\\src\\hooks\\useFocusFinders.ts"],"sourcesContent":["import * as React from 'react';\nimport { Types as TabsterTypes } from 'tabster';\nimport { useTabster } from './useTabster';\n\n/**\n * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element\n */\nexport const useFocusFinders = () => {\n  const tabster = useTabster();\n\n  // Narrow props for now and let need dictate additional props in the future\n  const findAllFocusable = React.useCallback(\n    (container: HTMLElement, acceptCondition?: (el: HTMLElement) => boolean) =>\n      tabster?.focusable.findAll({ container, acceptCondition }) || [],\n    [tabster],\n  );\n\n  const findFirstFocusable = React.useCallback(\n    (container: HTMLElement) => tabster?.focusable.findFirst({ container }),\n    [tabster],\n  );\n\n  const findLastFocusable = React.useCallback((container: HTMLElement) => tabster?.focusable.findLast({ container }), [\n    tabster,\n  ]);\n\n  const findNextFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<TabsterTypes.FindNextProps, 'container'> = {}) =>\n      tabster?.focusable.findNext({ currentElement, ...options }),\n    [tabster],\n  );\n\n  const findPrevFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<TabsterTypes.FindNextProps, 'container'> = {}) =>\n      tabster?.focusable.findPrev({ currentElement, ...options }),\n    [tabster],\n  );\n\n  return {\n    findAllFocusable,\n    findFirstFocusable,\n    findLastFocusable,\n    findNextFocusable,\n    findPrevFocusable,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}