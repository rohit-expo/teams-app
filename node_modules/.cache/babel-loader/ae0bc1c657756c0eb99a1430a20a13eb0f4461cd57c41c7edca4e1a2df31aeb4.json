{"ast":null,"code":"/*! @azure/msal-common v13.2.0 2023-07-05 */\n'use strict';\n\nimport { __assign } from '../../_virtual/_tslib.js';\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PerformanceClient = /** @class */function () {\n  /**\r\n   * Creates an instance of PerformanceClient,\r\n   * an abstract class containing core performance telemetry logic.\r\n   *\r\n   * @constructor\r\n   * @param {string} clientId Client ID of the application\r\n   * @param {string} authority Authority used by the application\r\n   * @param {Logger} logger Logger used by the application\r\n   * @param {string} libraryName Name of the library\r\n   * @param {string} libraryVersion Version of the library\r\n   */\n  function PerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\n    this.authority = authority;\n    this.libraryName = libraryName;\n    this.libraryVersion = libraryVersion;\n    this.applicationTelemetry = applicationTelemetry;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.callbacks = new Map();\n    this.eventsByCorrelationId = new Map();\n    this.queueMeasurements = new Map();\n    this.preQueueTimeByCorrelationId = new Map();\n  }\n  /**\r\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n   * Note: this function can be changed to abstract at the next major version bump.\r\n   *\r\n   * @param {string} measureName\r\n   * @param {string} correlationId\r\n   * @returns {IPerformanceMeasurement}\r\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  PerformanceClient.prototype.startPerformanceMeasurement = function (measureName, correlationId) {\n    return {};\n  };\n  /**\r\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n   * Note: this incorrectly-named function will be removed at the next major version bump.\r\n   *\r\n   * @param {string} measureName\r\n   * @param {string} correlationId\r\n   * @returns {IPerformanceMeasurement}\r\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  PerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return {};\n  };\n  /**\r\n   * Get integral fields.\r\n   * Override to change the set.\r\n   */\n  PerformanceClient.prototype.getIntFields = function () {\n    return IntFields;\n  };\n  /**\r\n   * Gets map of pre-queue times by correlation Id\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {string} correlationId\r\n   * @returns {number}\r\n   */\n  PerformanceClient.prototype.getPreQueueTime = function (eventName, correlationId) {\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    if (!preQueueEvent) {\n      this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: \" + correlationId + \", unable to add queue measurement\");\n      return;\n    } else if (preQueueEvent.name !== eventName) {\n      this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue time found for \" + eventName + \", unable to add queue measurement\");\n      return;\n    }\n    return preQueueEvent.time;\n  };\n  /**\r\n   * Calculates the difference between current time and time when function was queued.\r\n   * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n   *\r\n   * @param {number} preQueueTime\r\n   * @param {number} currentTime\r\n   * @returns {number}\r\n   */\n  PerformanceClient.prototype.calculateQueuedTime = function (preQueueTime, currentTime) {\n    if (preQueueTime < 1) {\n      this.logger.trace(\"PerformanceClient: preQueueTime should be a positive integer and not \" + preQueueTime);\n      return 0;\n    }\n    if (currentTime < 1) {\n      this.logger.trace(\"PerformanceClient: currentTime should be a positive integer and not \" + currentTime);\n      return 0;\n    }\n    if (currentTime < preQueueTime) {\n      this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n      return 0;\n    }\n    return currentTime - preQueueTime;\n  };\n  /**\r\n   * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  PerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!correlationId) {\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: correlationId not provided for \" + eventName + \", cannot add queue measurement\");\n      return;\n    }\n    if (queueTime === 0) {\n      // Possible for there to be no queue time after calculation\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: queue time provided for \" + eventName + \" is \" + queueTime);\n    } else if (!queueTime) {\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: no queue time provided for \" + eventName);\n      return;\n    }\n    var queueMeasurement = {\n      eventName: eventName,\n      queueTime: queueTime,\n      manuallyCompleted: manuallyCompleted\n    };\n    // Adds to existing correlation Id if present in queueMeasurements\n    var existingMeasurements = this.queueMeasurements.get(correlationId);\n    if (existingMeasurements) {\n      existingMeasurements.push(queueMeasurement);\n      this.queueMeasurements.set(correlationId, existingMeasurements);\n    } else {\n      // Sets new correlation Id if not present in queueMeasurements\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: adding correlationId \" + correlationId + \" to queue measurements\");\n      var measurementArray = [queueMeasurement];\n      this.queueMeasurements.set(correlationId, measurementArray);\n    }\n    // Delete processed pre-queue event.\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {InProgressPerformanceEvent}\r\n   */\n  PerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    var _a, _b;\n    // Generate a placeholder correlation if the request does not provide one\n    var eventCorrelationId = correlationId || this.generateId();\n    if (!correlationId) {\n      this.logger.info(\"PerformanceClient: No correlation id provided for \" + measureName + \", generating\", eventCorrelationId);\n    }\n    // Duplicate code to address spelling error will be removed at the next major version bump.\n    this.logger.trace(\"PerformanceClient: Performance measurement started for \" + measureName, eventCorrelationId);\n    var performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\n    performanceMeasurement.startMeasurement();\n    var inProgressEvent = {\n      eventId: this.generateId(),\n      status: PerformanceEventStatus.InProgress,\n      authority: this.authority,\n      libraryName: this.libraryName,\n      libraryVersion: this.libraryVersion,\n      clientId: this.clientId,\n      name: measureName,\n      startTimeMs: Date.now(),\n      correlationId: eventCorrelationId,\n      appName: (_a = this.applicationTelemetry) === null || _a === void 0 ? void 0 : _a.appName,\n      appVersion: (_b = this.applicationTelemetry) === null || _b === void 0 ? void 0 : _b.appVersion\n    };\n    // Store in progress events so they can be discarded if not ended properly\n    this.cacheEventByCorrelationId(inProgressEvent);\n    // Return the event and functions the caller can use to properly end/flush the measurement\n    return {\n      endMeasurement: function (event) {\n        return _this.endMeasurement(__assign(__assign({}, inProgressEvent), event), performanceMeasurement);\n      },\n      discardMeasurement: function () {\n        return _this.discardMeasurements(inProgressEvent.correlationId);\n      },\n      addStaticFields: function (fields) {\n        return _this.addStaticFields(fields, inProgressEvent.correlationId);\n      },\n      increment: function (counters) {\n        return _this.increment(counters, inProgressEvent.correlationId);\n      },\n      measurement: performanceMeasurement,\n      event: inProgressEvent\n    };\n  };\n  /**\r\n   * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n   * as consumers should instead use the function returned by startMeasurement.\r\n   * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n   * otherwise.\r\n   *\r\n   * @param {PerformanceEvent} event\r\n   * @param {IPerformanceMeasurement} measurement\r\n   * @returns {(PerformanceEvent | null)}\r\n   */\n  PerformanceClient.prototype.endMeasurement = function (event, measurement) {\n    var _this = this;\n    var _a, _b;\n    var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (!rootEvent) {\n      this.logger.trace(\"PerformanceClient: Measurement not found for \" + event.eventId, event.correlationId);\n      return null;\n    }\n    var isRoot = event.eventId === rootEvent.eventId;\n    var queueInfo = {\n      totalQueueTime: 0,\n      totalQueueCount: 0,\n      manuallyCompletedCount: 0\n    };\n    if (isRoot) {\n      queueInfo = this.getQueueInfo(event.correlationId);\n      this.discardCache(rootEvent.correlationId);\n    } else {\n      (_a = rootEvent.incompleteSubMeasurements) === null || _a === void 0 ? void 0 : _a.delete(event.eventId);\n    }\n    measurement === null || measurement === void 0 ? void 0 : measurement.endMeasurement();\n    var durationMs = measurement === null || measurement === void 0 ? void 0 : measurement.flushMeasurement();\n    // null indicates no measurement was taken (e.g. needed performance APIs not present)\n    if (!durationMs) {\n      this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\n      return null;\n    }\n    this.logger.trace(\"PerformanceClient: Performance measurement ended for \" + event.name + \": \" + durationMs + \" ms\", event.correlationId);\n    // Add sub-measurement attribute to root event.\n    if (!isRoot) {\n      rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\n      return __assign({}, rootEvent);\n    }\n    var finalEvent = __assign(__assign({}, rootEvent), event);\n    var incompleteSubsCount = 0;\n    // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n    (_b = finalEvent.incompleteSubMeasurements) === null || _b === void 0 ? void 0 : _b.forEach(function (subMeasurement) {\n      _this.logger.trace(\"PerformanceClient: Incomplete submeasurement \" + subMeasurement.name + \" found for \" + event.name, finalEvent.correlationId);\n      incompleteSubsCount++;\n    });\n    finalEvent.incompleteSubMeasurements = undefined;\n    finalEvent = __assign(__assign({}, finalEvent), {\n      durationMs: Math.round(durationMs),\n      queuedTimeMs: queueInfo.totalQueueTime,\n      queuedCount: queueInfo.totalQueueCount,\n      queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n      status: PerformanceEventStatus.Completed,\n      incompleteSubsCount: incompleteSubsCount\n    });\n    this.truncateIntegralFields(finalEvent, this.getIntFields());\n    this.emitEvents([finalEvent], event.correlationId);\n    return finalEvent;\n  };\n  /**\r\n   * Saves extra information to be emitted when the measurements are flushed\r\n   * @param fields\r\n   * @param correlationId\r\n   */\n  PerformanceClient.prototype.addStaticFields = function (fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating static fields\");\n    var event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      this.eventsByCorrelationId.set(correlationId, __assign(__assign({}, event), fields));\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  };\n  /**\r\n   * Increment counters to be emitted when the measurements are flushed\r\n   * @param counters {Counters}\r\n   * @param correlationId {string} correlation identifier\r\n   */\n  PerformanceClient.prototype.increment = function (counters, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating counters\");\n    var event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      for (var counter in counters) {\n        if (!event.hasOwnProperty(counter)) {\n          event[counter] = 0;\n        }\n        event[counter] += counters[counter];\n      }\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  };\n  /**\r\n   * Upserts event into event cache.\r\n   * First key is the correlation id, second key is the event id.\r\n   * Allows for events to be grouped by correlation id,\r\n   * and to easily allow for properties on them to be updated.\r\n   *\r\n   * @private\r\n   * @param {PerformanceEvent} event\r\n   */\n  PerformanceClient.prototype.cacheEventByCorrelationId = function (event) {\n    var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (rootEvent) {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" added/updated\", event.correlationId);\n      rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\n      rootEvent.incompleteSubMeasurements.set(event.eventId, {\n        name: event.name,\n        startTimeMs: event.startTimeMs\n      });\n    } else {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" started\", event.correlationId);\n      this.eventsByCorrelationId.set(event.correlationId, __assign({}, event));\n    }\n  };\n  PerformanceClient.prototype.getQueueInfo = function (correlationId) {\n    var queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n    if (!queueMeasurementForCorrelationId) {\n      this.logger.trace(\"PerformanceClient: no queue measurements found for for correlationId: \" + correlationId);\n    }\n    var totalQueueTime = 0;\n    var totalQueueCount = 0;\n    var manuallyCompletedCount = 0;\n    queueMeasurementForCorrelationId === null || queueMeasurementForCorrelationId === void 0 ? void 0 : queueMeasurementForCorrelationId.forEach(function (measurement) {\n      totalQueueTime += measurement.queueTime;\n      totalQueueCount++;\n      manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n    });\n    return {\n      totalQueueTime: totalQueueTime,\n      totalQueueCount: totalQueueCount,\n      manuallyCompletedCount: manuallyCompletedCount\n    };\n  };\n  /**\r\n   * Removes measurements for a given correlation id.\r\n   *\r\n   * @param {string} correlationId\r\n   */\n  PerformanceClient.prototype.discardMeasurements = function (correlationId) {\n    this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n    this.eventsByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Removes cache for a given correlation id.\r\n   *\r\n   * @param {string} correlationId correlation identifier\r\n   */\n  PerformanceClient.prototype.discardCache = function (correlationId) {\n    this.discardMeasurements(correlationId);\n    this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n    this.queueMeasurements.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Registers a callback function to receive performance events.\r\n   *\r\n   * @param {PerformanceCallbackFunction} callback\r\n   * @returns {string}\r\n   */\n  PerformanceClient.prototype.addPerformanceCallback = function (callback) {\n    var callbackId = this.generateId();\n    this.callbacks.set(callbackId, callback);\n    this.logger.verbose(\"PerformanceClient: Performance callback registered with id: \" + callbackId);\n    return callbackId;\n  };\n  /**\r\n   * Removes a callback registered with addPerformanceCallback.\r\n   *\r\n   * @param {string} callbackId\r\n   * @returns {boolean}\r\n   */\n  PerformanceClient.prototype.removePerformanceCallback = function (callbackId) {\n    var result = this.callbacks.delete(callbackId);\n    if (result) {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" removed.\");\n    } else {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" not removed.\");\n    }\n    return result;\n  };\n  /**\r\n   * Emits events to all registered callbacks.\r\n   *\r\n   * @param {PerformanceEvent[]} events\r\n   * @param {?string} [correlationId]\r\n   */\n  PerformanceClient.prototype.emitEvents = function (events, correlationId) {\n    var _this = this;\n    this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n    this.callbacks.forEach(function (callback, callbackId) {\n      _this.logger.trace(\"PerformanceClient: Emitting event to callback \" + callbackId, correlationId);\n      callback.apply(null, [events]);\n    });\n  };\n  /**\r\n   * Enforce truncation of integral fields in performance event.\r\n   * @param {PerformanceEvent} event performance event to update.\r\n   * @param {Set<string>} intFields integral fields.\r\n   */\n  PerformanceClient.prototype.truncateIntegralFields = function (event, intFields) {\n    intFields.forEach(function (key) {\n      if (key in event && typeof event[key] === \"number\") {\n        event[key] = Math.floor(event[key]);\n      }\n    });\n  };\n  return PerformanceClient;\n}();\nexport { PerformanceClient };","map":{"version":3,"mappings":"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","names":["PerformanceClient","authority","logger","libraryName","libraryVersion","applicationTelemetry","clientId","callbacks","Map","eventsByCorrelationId","queueMeasurements","preQueueTimeByCorrelationId","measureName","correlationId","IntFields","eventName","preQueueEvent","get","trace","name","time","preQueueTime","currentTime","queueTime","manuallyCompleted","queueMeasurement","existingMeasurements","push","set","measurementArray","delete","_this","eventCorrelationId","generateId","info","performanceMeasurement","startPerformanceMeasuremeant","startMeasurement","inProgressEvent","eventId","status","PerformanceEventStatus","InProgress","startTimeMs","Date","now","appName","appVersion","cacheEventByCorrelationId","endMeasurement","event","__assign","discardMeasurement","discardMeasurements","addStaticFields","fields","increment","counters","measurement","rootEvent","isRoot","queueInfo","totalQueueTime","totalQueueCount","manuallyCompletedCount","getQueueInfo","discardCache","incompleteSubMeasurements","durationMs","flushMeasurement","Math","floor","finalEvent","incompleteSubsCount","forEach","subMeasurement","undefined","round","queuedTimeMs","queuedCount","queuedManuallyCompletedCount","Completed","truncateIntegralFields","getIntFields","emitEvents","counter","hasOwnProperty","queueMeasurementForCorrelationId","callback","callbackId","verbose","result","events","apply","intFields","key"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@azure\\msal-common\\src\\telemetry\\performance\\PerformanceClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ApplicationTelemetry } from \"../../config/ClientConfiguration\";\r\nimport { Logger } from \"../../logger/Logger\";\r\nimport {\r\n    InProgressPerformanceEvent,\r\n    IPerformanceClient,\r\n    PerformanceCallbackFunction,\r\n    QueueMeasurement\r\n} from \"./IPerformanceClient\";\r\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\r\nimport {\r\n    Counters,\r\n    IntFields,\r\n    PerformanceEvent,\r\n    PerformanceEvents,\r\n    PerformanceEventStatus,\r\n    StaticFields\r\n} from \"./PerformanceEvent\";\r\n\r\nexport interface PreQueueEvent {\r\n    name: PerformanceEvents;\r\n    time: number;\r\n}\r\n\r\nexport abstract class PerformanceClient implements IPerformanceClient {\r\n    protected authority: string;\r\n    protected libraryName: string;\r\n    protected libraryVersion: string;\r\n    protected applicationTelemetry: ApplicationTelemetry;\r\n    protected clientId: string;\r\n    protected logger: Logger;\r\n    protected callbacks: Map<string, PerformanceCallbackFunction>;\r\n\r\n    /**\r\n     * Multiple events with the same correlation id.\r\n     * @protected\r\n     * @type {Map<string, PerformanceEvent>}\r\n     */\r\n    protected eventsByCorrelationId: Map<string, PerformanceEvent>;\r\n\r\n    /**\r\n     * Map of pre-queue times by correlation Id\r\n     *\r\n     * @protected\r\n     * @type {Map<string, PreQueueEvent>}\r\n     */\r\n    protected preQueueTimeByCorrelationId: Map<string, PreQueueEvent>;\r\n\r\n    /**\r\n     * Map of queue measurements by correlation Id\r\n     *\r\n     * @protected\r\n     * @type {Map<string, Array<QueueMeasurement>>}\r\n     */\r\n    protected queueMeasurements: Map<string, Array<QueueMeasurement>>;\r\n\r\n    /**\r\n     * Creates an instance of PerformanceClient,\r\n     * an abstract class containing core performance telemetry logic.\r\n     *\r\n     * @constructor\r\n     * @param {string} clientId Client ID of the application\r\n     * @param {string} authority Authority used by the application\r\n     * @param {Logger} logger Logger used by the application\r\n     * @param {string} libraryName Name of the library\r\n     * @param {string} libraryVersion Version of the library\r\n     */\r\n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\r\n        this.authority = authority;\r\n        this.libraryName = libraryName;\r\n        this.libraryVersion = libraryVersion;\r\n        this.applicationTelemetry = applicationTelemetry;\r\n        this.clientId = clientId;\r\n        this.logger = logger;\r\n        this.callbacks = new Map();\r\n        this.eventsByCorrelationId = new Map();\r\n        this.queueMeasurements = new Map();\r\n        this.preQueueTimeByCorrelationId = new Map();\r\n    }\r\n\r\n    /**\r\n     * Generates and returns a unique id, typically a guid.\r\n     *\r\n     * @abstract\r\n     * @returns {string}\r\n     */\r\n    abstract generateId(): string;\r\n\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this function can be changed to abstract at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    startPerformanceMeasurement(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return {} as IPerformanceMeasurement;\r\n    }\r\n\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this incorrectly-named function will be removed at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\r\n        return {} as IPerformanceMeasurement;\r\n    }\r\n\r\n    /**\r\n     * Sets pre-queue time by correlation Id\r\n     *\r\n     * @abstract\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {string} correlationId\r\n     * @returns\r\n     */\r\n    abstract setPreQueueTime(eventName: PerformanceEvents, correlationId?: string): void;\r\n\r\n    /**\r\n     * Get integral fields.\r\n     * Override to change the set.\r\n     */\r\n    getIntFields(): ReadonlySet<string> {\r\n        return IntFields;\r\n    }\r\n\r\n    /**\r\n     * Gets map of pre-queue times by correlation Id\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {string} correlationId\r\n     * @returns {number}\r\n     */\r\n    getPreQueueTime(eventName: PerformanceEvents, correlationId: string): number | void {\r\n        const preQueueEvent: PreQueueEvent | undefined = this.preQueueTimeByCorrelationId.get(correlationId);\r\n\r\n        if (!preQueueEvent) {\r\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: ${correlationId}, unable to add queue measurement`);\r\n            return;\r\n        } else if (preQueueEvent.name !== eventName) {\r\n            this.logger.trace(`PerformanceClient.getPreQueueTime: no pre-queue time found for ${eventName}, unable to add queue measurement`);\r\n            return;\r\n        }\r\n\r\n        return preQueueEvent.time;\r\n    }\r\n\r\n    /**\r\n     * Calculates the difference between current time and time when function was queued.\r\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n     *\r\n     * @param {number} preQueueTime\r\n     * @param {number} currentTime\r\n     * @returns {number}\r\n     */\r\n    calculateQueuedTime(preQueueTime: number, currentTime: number): number {\r\n        if (preQueueTime < 1) {\r\n            this.logger.trace(`PerformanceClient: preQueueTime should be a positive integer and not ${preQueueTime}`);\r\n            return 0;\r\n        }\r\n\r\n        if (currentTime < 1) {\r\n            this.logger.trace(`PerformanceClient: currentTime should be a positive integer and not ${currentTime}`);\r\n            return 0;\r\n        }\r\n\r\n        if (currentTime < preQueueTime) {\r\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\r\n            return 0;\r\n        }\r\n\r\n        return currentTime-preQueueTime;\r\n    }\r\n\r\n    /**\r\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    addQueueMeasurement(eventName: PerformanceEvents, correlationId?: string, queueTime?: number, manuallyCompleted?: boolean): void {\r\n        if (!correlationId) {\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: correlationId not provided for ${eventName}, cannot add queue measurement`);\r\n            return;\r\n        }\r\n\r\n        if (queueTime === 0) {\r\n            // Possible for there to be no queue time after calculation\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: queue time provided for ${eventName} is ${queueTime}`);\r\n        } else if (!queueTime) {\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: no queue time provided for ${eventName}`);\r\n            return;\r\n        }\r\n\r\n        const queueMeasurement: QueueMeasurement = {eventName, queueTime, manuallyCompleted};\r\n\r\n        // Adds to existing correlation Id if present in queueMeasurements\r\n        const existingMeasurements = this.queueMeasurements.get(correlationId);\r\n        if (existingMeasurements) {\r\n            existingMeasurements.push(queueMeasurement);\r\n            this.queueMeasurements.set(correlationId, existingMeasurements);\r\n        } else {\r\n            // Sets new correlation Id if not present in queueMeasurements\r\n            this.logger.trace(`PerformanceClient.addQueueMeasurement: adding correlationId ${correlationId} to queue measurements`);\r\n            const measurementArray = [queueMeasurement];\r\n            this.queueMeasurements.set(correlationId, measurementArray);\r\n        }\r\n        // Delete processed pre-queue event.\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n    }\r\n\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {InProgressPerformanceEvent}\r\n     */\r\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\r\n        // Generate a placeholder correlation if the request does not provide one\r\n        const eventCorrelationId = correlationId || this.generateId();\r\n        if (!correlationId) {\r\n            this.logger.info(`PerformanceClient: No correlation id provided for ${measureName}, generating`, eventCorrelationId);\r\n        }\r\n\r\n        // Duplicate code to address spelling error will be removed at the next major version bump.\r\n        this.logger.trace(`PerformanceClient: Performance measurement started for ${measureName}`, eventCorrelationId);\r\n        const performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\r\n        performanceMeasurement.startMeasurement();\r\n\r\n        const inProgressEvent: PerformanceEvent = {\r\n            eventId: this.generateId(),\r\n            status: PerformanceEventStatus.InProgress,\r\n            authority: this.authority,\r\n            libraryName: this.libraryName,\r\n            libraryVersion: this.libraryVersion,\r\n            clientId: this.clientId,\r\n            name: measureName,\r\n            startTimeMs: Date.now(),\r\n            correlationId: eventCorrelationId,\r\n            appName: this.applicationTelemetry?.appName,\r\n            appVersion: this.applicationTelemetry?.appVersion,\r\n        };\r\n\r\n        // Store in progress events so they can be discarded if not ended properly\r\n        this.cacheEventByCorrelationId(inProgressEvent);\r\n\r\n        // Return the event and functions the caller can use to properly end/flush the measurement\r\n        return {\r\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\r\n                return this.endMeasurement({\r\n                    // Initial set of event properties\r\n                    ...inProgressEvent,\r\n                    // Properties set when event ends\r\n                    ...event\r\n                },\r\n                performanceMeasurement);\r\n            },\r\n            discardMeasurement: () => {\r\n                return this.discardMeasurements(inProgressEvent.correlationId);\r\n            },\r\n            addStaticFields: (fields: StaticFields) => {\r\n                return this.addStaticFields(fields, inProgressEvent.correlationId);\r\n            },\r\n            increment: (counters: Counters) => {\r\n                return this.increment(counters, inProgressEvent.correlationId);\r\n            },\r\n            measurement: performanceMeasurement,\r\n            event: inProgressEvent\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n     * as consumers should instead use the function returned by startMeasurement.\r\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n     * otherwise.\r\n     *\r\n     * @param {PerformanceEvent} event\r\n     * @param {IPerformanceMeasurement} measurement\r\n     * @returns {(PerformanceEvent | null)}\r\n     */\r\n    endMeasurement(event: PerformanceEvent, measurement?: IPerformanceMeasurement): PerformanceEvent | null {\r\n        const rootEvent: PerformanceEvent | undefined = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (!rootEvent) {\r\n            this.logger.trace(`PerformanceClient: Measurement not found for ${event.eventId}`, event.correlationId);\r\n            return null;\r\n        }\r\n\r\n        const isRoot = event.eventId === rootEvent.eventId;\r\n        let queueInfo = {\r\n            totalQueueTime: 0,\r\n            totalQueueCount: 0,\r\n            manuallyCompletedCount: 0\r\n        };\r\n        if (isRoot) {\r\n            queueInfo = this.getQueueInfo(event.correlationId);\r\n            this.discardCache(rootEvent.correlationId);\r\n        } else {\r\n            rootEvent.incompleteSubMeasurements?.delete(event.eventId);\r\n        }\r\n\r\n        measurement?.endMeasurement();\r\n        const durationMs = measurement?.flushMeasurement();\r\n        // null indicates no measurement was taken (e.g. needed performance APIs not present)\r\n        if (!durationMs) {\r\n            this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(`PerformanceClient: Performance measurement ended for ${event.name}: ${durationMs} ms`, event.correlationId);\r\n\r\n        // Add sub-measurement attribute to root event.\r\n        if (!isRoot) {\r\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\r\n            return { ...rootEvent };\r\n        }\r\n\r\n        let finalEvent: PerformanceEvent = { ...rootEvent, ...event };\r\n        let incompleteSubsCount: number = 0;\r\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\r\n        finalEvent.incompleteSubMeasurements?.forEach(subMeasurement => {\r\n            this.logger.trace(`PerformanceClient: Incomplete submeasurement ${subMeasurement.name} found for ${event.name}`, finalEvent.correlationId);\r\n            incompleteSubsCount++;\r\n        });\r\n        finalEvent.incompleteSubMeasurements = undefined;\r\n\r\n        finalEvent = {\r\n            ...finalEvent,\r\n            durationMs: Math.round(durationMs),\r\n            queuedTimeMs: queueInfo.totalQueueTime,\r\n            queuedCount: queueInfo.totalQueueCount,\r\n            queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\r\n            status: PerformanceEventStatus.Completed,\r\n            incompleteSubsCount\r\n        };\r\n        this.truncateIntegralFields(finalEvent, this.getIntFields());\r\n        this.emitEvents([finalEvent], event.correlationId);\r\n\r\n        return finalEvent;\r\n    }\r\n\r\n    /**\r\n     * Saves extra information to be emitted when the measurements are flushed\r\n     * @param fields\r\n     * @param correlationId\r\n     */\r\n    addStaticFields(fields: StaticFields, correlationId: string) : void {\r\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\r\n        const event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            this.eventsByCorrelationId.set(correlationId, {...event, ...fields});\r\n        } else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment counters to be emitted when the measurements are flushed\r\n     * @param counters {Counters}\r\n     * @param correlationId {string} correlation identifier\r\n     */\r\n    increment(counters: Counters, correlationId: string): void {\r\n        this.logger.trace(\"PerformanceClient: Updating counters\");\r\n        const event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            for (const counter in counters) {\r\n                if (!event.hasOwnProperty(counter)) {\r\n                    event[counter] = 0;\r\n                }\r\n                event[counter] += counters[counter];\r\n            }\r\n        } else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upserts event into event cache.\r\n     * First key is the correlation id, second key is the event id.\r\n     * Allows for events to be grouped by correlation id,\r\n     * and to easily allow for properties on them to be updated.\r\n     *\r\n     * @private\r\n     * @param {PerformanceEvent} event\r\n     */\r\n    private cacheEventByCorrelationId(event: PerformanceEvent) {\r\n        const rootEvent = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (rootEvent) {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} added/updated`, event.correlationId);\r\n            rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\r\n            rootEvent.incompleteSubMeasurements.set(event.eventId, {name: event.name, startTimeMs: event.startTimeMs });\r\n        } else {\r\n            this.logger.trace(`PerformanceClient: Performance measurement for ${event.name} started`, event.correlationId);\r\n            this.eventsByCorrelationId.set(event.correlationId, { ...event });\r\n        }\r\n    }\r\n\r\n    private getQueueInfo(correlationId: string): { totalQueueTime: number, totalQueueCount: number, manuallyCompletedCount: number } {\r\n        const queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\r\n        if (!queueMeasurementForCorrelationId) {\r\n            this.logger.trace(`PerformanceClient: no queue measurements found for for correlationId: ${correlationId}`);\r\n        }\r\n\r\n        let totalQueueTime = 0;\r\n        let totalQueueCount = 0;\r\n        let manuallyCompletedCount = 0;\r\n        queueMeasurementForCorrelationId?.forEach((measurement) => {\r\n            totalQueueTime += measurement.queueTime;\r\n            totalQueueCount++;\r\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\r\n        });\r\n\r\n        return {\r\n            totalQueueTime,\r\n            totalQueueCount,\r\n            manuallyCompletedCount\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes measurements for a given correlation id.\r\n     *\r\n     * @param {string} correlationId\r\n     */\r\n    discardMeasurements(correlationId: string): void {\r\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\r\n        this.eventsByCorrelationId.delete(correlationId);\r\n    }\r\n\r\n    /**\r\n     * Removes cache for a given correlation id.\r\n     *\r\n     * @param {string} correlationId correlation identifier\r\n     */\r\n    private discardCache(correlationId: string): void {\r\n        this.discardMeasurements(correlationId);\r\n\r\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\r\n        this.queueMeasurements.delete(correlationId);\r\n\r\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n    }\r\n\r\n    /**\r\n     * Registers a callback function to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\r\n        const callbackId = this.generateId();\r\n        this.callbacks.set(callbackId, callback);\r\n        this.logger.verbose(`PerformanceClient: Performance callback registered with id: ${callbackId}`);\r\n\r\n        return callbackId;\r\n    }\r\n\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    removePerformanceCallback(callbackId: string): boolean {\r\n        const result = this.callbacks.delete(callbackId);\r\n\r\n        if (result) {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} removed.`);\r\n        } else {\r\n            this.logger.verbose(`PerformanceClient: Performance callback ${callbackId} not removed.`);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Emits events to all registered callbacks.\r\n     *\r\n     * @param {PerformanceEvent[]} events\r\n     * @param {?string} [correlationId]\r\n     */\r\n    emitEvents(events: PerformanceEvent[], correlationId: string): void {\r\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\r\n\r\n        this.callbacks.forEach((callback: PerformanceCallbackFunction, callbackId: string) => {\r\n            this.logger.trace(`PerformanceClient: Emitting event to callback ${callbackId}`, correlationId);\r\n            callback.apply(null, [events]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Enforce truncation of integral fields in performance event.\r\n     * @param {PerformanceEvent} event performance event to update.\r\n     * @param {Set<string>} intFields integral fields.\r\n     */\r\n    private truncateIntegralFields(event: PerformanceEvent, intFields: ReadonlySet<string>): void {\r\n        intFields.forEach((key) => {\r\n            if (key in event && typeof event[key] === \"number\") {\r\n                event[key] = Math.floor(event[key]);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}