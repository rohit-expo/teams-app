{"ast":null,"code":"import * as React from 'react';\nimport { useAvatarGroupContext_unstable } from '../../contexts/AvatarGroupContext';\nimport { defaultAvatarGroupSize } from '../AvatarGroup/useAvatarGroup';\nimport { resolveShorthand, useControllableState } from '@fluentui/react-utilities';\nimport { MoreHorizontalRegular } from '@fluentui/react-icons';\nimport { Popover, PopoverSurface } from '@fluentui/react-popover';\nimport { Tooltip } from '@fluentui/react-tooltip';\n/**\n * Create the state required to render AvatarGroupPopover.\n *\n * The returned state can be modified with hooks such as useAvatarGroupPopoverStyles_unstable,\n * before being passed to renderAvatarGroupPopover_unstable.\n *\n * @param props - props from this instance of AvatarGroupPopover\n */\n\nexport const useAvatarGroupPopover_unstable = props => {\n  var _a;\n  const size = (_a = useAvatarGroupContext_unstable(ctx => ctx.size)) !== null && _a !== void 0 ? _a : defaultAvatarGroupSize;\n  const layout = useAvatarGroupContext_unstable(ctx => ctx.layout);\n  const {\n    indicator = size < 24 ? 'icon' : 'count',\n    count = React.Children.count(props.children),\n    children,\n    ...restOfProps\n  } = props;\n  const [popoverOpen, setPopoverOpen] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false\n  });\n  const handleOnPopoverChange = (e, data) => {\n    var _a;\n    (_a = restOfProps.onOpenChange) === null || _a === void 0 ? void 0 : _a.call(restOfProps, e, data);\n    setPopoverOpen(data.open);\n  };\n  let triggerButtonChildren;\n  if (layout === 'pie') {\n    triggerButtonChildren = null;\n  } else if (indicator === 'icon') {\n    triggerButtonChildren = /*#__PURE__*/React.createElement(MoreHorizontalRegular, null);\n  } else {\n    triggerButtonChildren = count > 99 ? '99+' : `+${count}`;\n  }\n  return {\n    count,\n    indicator,\n    layout,\n    popoverOpen,\n    size,\n    components: {\n      root: Popover,\n      triggerButton: 'button',\n      content: 'ul',\n      popoverSurface: PopoverSurface,\n      tooltip: Tooltip\n    },\n    root: {\n      // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.\n      children: /*#__PURE__*/React.createElement(React.Fragment, null),\n      size: 'small',\n      trapFocus: true,\n      ...restOfProps,\n      open: popoverOpen,\n      onOpenChange: handleOnPopoverChange\n    },\n    triggerButton: resolveShorthand(props.triggerButton, {\n      required: true,\n      defaultProps: {\n        children: triggerButtonChildren,\n        type: 'button'\n      }\n    }),\n    content: resolveShorthand(props.content, {\n      required: true,\n      defaultProps: {\n        children,\n        role: 'list'\n      }\n    }),\n    popoverSurface: resolveShorthand(props.popoverSurface, {\n      required: true,\n      defaultProps: {\n        'aria-label': 'Overflow',\n        tabIndex: 0\n      }\n    }),\n    tooltip: resolveShorthand(props.tooltip, {\n      required: true,\n      defaultProps: {\n        content: 'View more people.',\n        relationship: 'label'\n      }\n    })\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useAvatarGroupContext_unstable","defaultAvatarGroupSize","resolveShorthand","useControllableState","MoreHorizontalRegular","Popover","PopoverSurface","Tooltip","useAvatarGroupPopover_unstable","props","size","ctx","_a","layout","indicator","count","Children","children","restOfProps","popoverOpen","setPopoverOpen","state","open","defaultState","defaultOpen","initialState","handleOnPopoverChange","e","data","onOpenChange","triggerButtonChildren","components","root","triggerButton","content","popoverSurface","tooltip","trapFocus","required","defaultProps","type","role","tabIndex","relationship"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-avatar\\lib\\components\\src\\packages\\react-components\\react-avatar\\src\\components\\AvatarGroupPopover\\useAvatarGroupPopover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useAvatarGroupContext_unstable } from '../../contexts/AvatarGroupContext';\nimport { defaultAvatarGroupSize } from '../AvatarGroup/useAvatarGroup';\nimport { resolveShorthand, useControllableState } from '@fluentui/react-utilities';\nimport { MoreHorizontalRegular } from '@fluentui/react-icons';\nimport { OnOpenChangeData, OpenPopoverEvents, Popover, PopoverSurface } from '@fluentui/react-popover';\nimport type { AvatarGroupPopoverProps, AvatarGroupPopoverState } from './AvatarGroupPopover.types';\nimport { Tooltip } from '@fluentui/react-tooltip';\n\n/**\n * Create the state required to render AvatarGroupPopover.\n *\n * The returned state can be modified with hooks such as useAvatarGroupPopoverStyles_unstable,\n * before being passed to renderAvatarGroupPopover_unstable.\n *\n * @param props - props from this instance of AvatarGroupPopover\n */\nexport const useAvatarGroupPopover_unstable = (props: AvatarGroupPopoverProps): AvatarGroupPopoverState => {\n  const size = useAvatarGroupContext_unstable(ctx => ctx.size) ?? defaultAvatarGroupSize;\n  const layout = useAvatarGroupContext_unstable(ctx => ctx.layout);\n  const {\n    indicator = size < 24 ? 'icon' : 'count',\n    count = React.Children.count(props.children),\n    children,\n    ...restOfProps\n  } = props;\n\n  const [popoverOpen, setPopoverOpen] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false,\n  });\n\n  const handleOnPopoverChange = (e: OpenPopoverEvents, data: OnOpenChangeData) => {\n    restOfProps.onOpenChange?.(e, data);\n    setPopoverOpen(data.open);\n  };\n\n  let triggerButtonChildren;\n  if (layout === 'pie') {\n    triggerButtonChildren = null;\n  } else if (indicator === 'icon') {\n    triggerButtonChildren = <MoreHorizontalRegular />;\n  } else {\n    triggerButtonChildren = count > 99 ? '99+' : `+${count}`;\n  }\n\n  return {\n    count,\n    indicator,\n    layout,\n    popoverOpen,\n    size,\n\n    components: {\n      root: Popover,\n      triggerButton: 'button',\n      content: 'ul',\n      popoverSurface: PopoverSurface,\n      tooltip: Tooltip,\n    },\n    root: {\n      // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.\n      children: <></>,\n      size: 'small',\n      trapFocus: true,\n      ...restOfProps,\n      open: popoverOpen,\n      onOpenChange: handleOnPopoverChange,\n    },\n    triggerButton: resolveShorthand(props.triggerButton, {\n      required: true,\n      defaultProps: {\n        children: triggerButtonChildren,\n        type: 'button',\n      },\n    }),\n    content: resolveShorthand(props.content, {\n      required: true,\n      defaultProps: {\n        children,\n        role: 'list',\n      },\n    }),\n    popoverSurface: resolveShorthand(props.popoverSurface, {\n      required: true,\n      defaultProps: {\n        'aria-label': 'Overflow',\n        tabIndex: 0,\n      },\n    }),\n    tooltip: resolveShorthand(props.tooltip, {\n      required: true,\n      defaultProps: {\n        content: 'View more people.',\n        relationship: 'label',\n      },\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}