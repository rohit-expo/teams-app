{"ast":null,"code":"/**\n * Regular expressions matching characters to ignore when calculating the initials.\n */\n\n/**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */\nconst UNWANTED_ENCLOSURES_REGEX = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\n\nconst UNWANTED_CHARS_REGEX = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\n\nconst PHONENUMBER_REGEX = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n/** Regular expression matching one or more spaces. */\n\nconst MULTIPLE_WHITESPACES_REGEX = /\\s+/g;\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\n// eslint-disable-next-line @fluentui/max-len\n\nconst UNSUPPORTED_TEXT_REGEX = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\nfunction getInitialsLatin(displayName, isRtl, firstInitialOnly) {\n  let initials = '';\n  const splits = displayName.split(' ');\n  if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n  if (!firstInitialOnly) {\n    if (splits.length === 2) {\n      initials += splits[1].charAt(0).toUpperCase();\n    } else if (splits.length === 3) {\n      initials += splits[2].charAt(0).toUpperCase();\n    }\n  }\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n  return initials;\n}\nfunction cleanupDisplayName(displayName) {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n  return displayName;\n}\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @param displayName - The full name of the person or entity\n * @param isRtl - Whether the display is in RTL\n * @param options - Extra options to control the behavior of getInitials\n *\n * @returns The 1 or 2 character initials based on the name. Or an empty string if no initials\n * could be derived from the name.\n *\n * @internal\n */\n\nexport function getInitials(displayName, isRtl, options) {\n  if (!displayName) {\n    return '';\n  }\n  displayName = cleanupDisplayName(displayName); // For names containing CJK characters, and phone numbers, we don't display initials\n\n  if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !(options === null || options === void 0 ? void 0 : options.allowPhoneInitials) && PHONENUMBER_REGEX.test(displayName)) {\n    return '';\n  }\n  return getInitialsLatin(displayName, isRtl, options === null || options === void 0 ? void 0 : options.firstInitialOnly);\n}","map":{"version":3,"mappings":"AAAA;;AAEG;;AAEH;;;AAGG;AACH,MAAMA,yBAAyB,GAAW,6BAA1C;AAEA;;;AAGG;;AACH,MAAMC,oBAAoB,GAAW,4DAArC;AAEA;;;AAGG;;AACH,MAAMC,iBAAiB,GAAW,+BAAlC;AAEA;;AACA,MAAMC,0BAA0B,GAAW,MAA3C;AAEA;;;;;;;AAOG;AACH;;AACA,MAAMC,sBAAsB,GAAW,4MAAvC;AAEA,SAASC,gBAAT,CAA0BC,WAA1B,EAA+CC,KAA/C,EAA+DC,gBAA/D,EAAyF;EACvF,IAAIC,QAAQ,GAAG,EAAf;EAEA,MAAMC,MAAM,GAAaJ,WAAW,CAACK,KAAZ,CAAkB,GAAlB,CAAzB;EACA,IAAID,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;IACvBH,QAAQ,IAAIC,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAZ;EACD;EAED,IAAI,CAACN,gBAAL,EAAuB;IACrB,IAAIE,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;MACvBH,QAAQ,IAAIC,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAZ;IACD,CAFD,MAEO,IAAIJ,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;MAC9BH,QAAQ,IAAIC,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAZ;IACD;EACF;EAED,IAAIP,KAAK,IAAIE,QAAQ,CAACG,MAAT,GAAkB,CAA/B,EAAkC;IAChC,OAAOH,QAAQ,CAACI,MAAT,CAAgB,CAAhB,IAAqBJ,QAAQ,CAACI,MAAT,CAAgB,CAAhB,CAA5B;EACD;EAED,OAAOJ,QAAP;AACD;AAED,SAASM,kBAAT,CAA4BT,WAA5B,EAA+C;EAC7CA,WAAW,GAAGA,WAAW,CAACU,OAAZ,CAAoBhB,yBAApB,EAA+C,EAA/C,CAAd;EACAM,WAAW,GAAGA,WAAW,CAACU,OAAZ,CAAoBf,oBAApB,EAA0C,EAA1C,CAAd;EACAK,WAAW,GAAGA,WAAW,CAACU,OAAZ,CAAoBb,0BAApB,EAAgD,GAAhD,CAAd;EACAG,WAAW,GAAGA,WAAW,CAACW,IAAZ,EAAd;EAEA,OAAOX,WAAP;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAUY,WAAV,CACJZ,WADI,EAEJC,KAFI,EAGJY,OAHI,EASH;EAED,IAAI,CAACb,WAAL,EAAkB;IAChB,OAAO,EAAP;EACD;EAEDA,WAAW,GAAGS,kBAAkB,CAACT,WAAD,CAAhC,CANC,CAQD;;EACA,IACEF,sBAAsB,CAACgB,IAAvB,CAA4Bd,WAA5B,KACC,EAACa,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEE,kBAAV,KAAgCnB,iBAAiB,CAACkB,IAAlB,CAAuBd,WAAvB,CAFnC,EAGE;IACA,OAAO,EAAP;EACD;EAED,OAAOD,gBAAgB,CAACC,WAAD,EAAcC,KAAd,EAAqBY,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEX,gBAA9B,CAAvB;AACD","names":["UNWANTED_ENCLOSURES_REGEX","UNWANTED_CHARS_REGEX","PHONENUMBER_REGEX","MULTIPLE_WHITESPACES_REGEX","UNSUPPORTED_TEXT_REGEX","getInitialsLatin","displayName","isRtl","firstInitialOnly","initials","splits","split","length","charAt","toUpperCase","cleanupDisplayName","replace","trim","getInitials","options","test","allowPhoneInitials"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-avatar\\lib\\src\\packages\\react-components\\react-avatar\\src\\utils\\getInitials.ts"],"sourcesContent":["/**\n * Regular expressions matching characters to ignore when calculating the initials.\n */\n\n/**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */\nconst UNWANTED_ENCLOSURES_REGEX: RegExp = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\nconst UNWANTED_CHARS_REGEX: RegExp = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\nconst PHONENUMBER_REGEX: RegExp = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n\n/** Regular expression matching one or more spaces. */\nconst MULTIPLE_WHITESPACES_REGEX: RegExp = /\\s+/g;\n\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\n// eslint-disable-next-line @fluentui/max-len\nconst UNSUPPORTED_TEXT_REGEX: RegExp = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\n\nfunction getInitialsLatin(displayName: string, isRtl: boolean, firstInitialOnly?: boolean): string {\n  let initials = '';\n\n  const splits: string[] = displayName.split(' ');\n  if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n\n  if (!firstInitialOnly) {\n    if (splits.length === 2) {\n      initials += splits[1].charAt(0).toUpperCase();\n    } else if (splits.length === 3) {\n      initials += splits[2].charAt(0).toUpperCase();\n    }\n  }\n\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n\n  return initials;\n}\n\nfunction cleanupDisplayName(displayName: string): string {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n\n  return displayName;\n}\n\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @param displayName - The full name of the person or entity\n * @param isRtl - Whether the display is in RTL\n * @param options - Extra options to control the behavior of getInitials\n *\n * @returns The 1 or 2 character initials based on the name. Or an empty string if no initials\n * could be derived from the name.\n *\n * @internal\n */\nexport function getInitials(\n  displayName: string | undefined | null,\n  isRtl: boolean,\n  options?: {\n    /** Should initials be generated from phone numbers (default false) */\n    allowPhoneInitials?: boolean;\n\n    /** Returns only the first initial */\n    firstInitialOnly?: boolean;\n  },\n): string {\n  if (!displayName) {\n    return '';\n  }\n\n  displayName = cleanupDisplayName(displayName);\n\n  // For names containing CJK characters, and phone numbers, we don't display initials\n  if (\n    UNSUPPORTED_TEXT_REGEX.test(displayName) ||\n    (!options?.allowPhoneInitials && PHONENUMBER_REGEX.test(displayName))\n  ) {\n    return '';\n  }\n\n  return getInitialsLatin(displayName, isRtl, options?.firstInitialOnly);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}