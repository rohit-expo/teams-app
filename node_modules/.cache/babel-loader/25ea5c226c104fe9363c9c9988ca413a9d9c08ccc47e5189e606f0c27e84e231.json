{"ast":null,"code":"import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\n/**\n * @internal\n * resolve the trigger props to the children, either by calling the render function, or cloning with the new props.\n */\n\nexport function applyTriggerPropsToChildren(children, triggerChildProps) {\n  if (typeof children === 'function') {\n    return children(triggerChildProps);\n  } else if (children) {\n    return cloneTriggerTree(children, triggerChildProps);\n  } // Components in React should return either JSX elements or \"null\", otherwise React will throw:\n  //   Nothing was returned from render.\n  //   This usually means a return statement is missing. Or, to render nothing, return null.\n\n  return children || null;\n}\n/**\n * Clones a React element tree, and applies the given props to the first grandchild that is not\n * a FluentTriggerComponent or React Fragment (the same element returned by {@link getTriggerChild}).\n */\n\nfunction cloneTriggerTree(child, triggerProps) {\n  if (! /*#__PURE__*/React.isValidElement(child) || child.type === React.Fragment) {\n    throw new Error('A trigger element must be a single element for this component. ' + \"Please ensure that you're not using React Fragments.\");\n  }\n  if (isFluentTrigger(child)) {\n    const grandchild = cloneTriggerTree(child.props.children, triggerProps);\n    return /*#__PURE__*/React.cloneElement(child, undefined, grandchild);\n  } else {\n    return /*#__PURE__*/React.cloneElement(child, triggerProps);\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAGA;;;AAGG;;AACH,OAAM,SAAUC,2BAAV,CACJC,QADI,EAEJC,iBAFI,EAEgC;EAEpC,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAOA,QAAQ,CAACC,iBAAD,CAAf;EACD,CAFD,MAEO,IAAID,QAAJ,EAAc;IACnB,OAAOE,gBAAgB,CAACF,QAAD,EAAWC,iBAAX,CAAvB;EACD,CANmC,CAQpC;EACA;EACA;;EACA,OAAOD,QAAQ,IAAI,IAAnB;AACD;AAED;;;AAGG;;AACH,SAASE,gBAAT,CACEC,KADF,EAEEC,YAFF,EAEiC;EAE/B,IAAI,eAACP,KAAK,CAACQ,cAAN,CAAqBF,KAArB,CAAD,IAAgCA,KAAK,CAACG,IAAN,KAAeT,KAAK,CAACU,QAAzD,EAAmE;IACjE,MAAM,IAAIC,KAAJ,CACJ,oEACE,sDAFE,CAAN;EAID;EAED,IAAIV,eAAe,CAACK,KAAD,CAAnB,EAA4B;IAC1B,MAAMM,UAAU,GAAGP,gBAAgB,CAACC,KAAK,CAACO,KAAN,CAAYV,QAAb,EAAuBI,YAAvB,CAAnC;IACA,oBAAOP,KAAK,CAACc,YAAN,CAAmBR,KAAnB,EAA0BS,SAA1B,EAAqCH,UAArC,CAAP;EACD,CAHD,MAGO;IACL,oBAAOZ,KAAK,CAACc,YAAN,CAAmBR,KAAnB,EAA0BC,YAA1B,CAAP;EACD;AACF","names":["React","isFluentTrigger","applyTriggerPropsToChildren","children","triggerChildProps","cloneTriggerTree","child","triggerProps","isValidElement","type","Fragment","Error","grandchild","props","cloneElement","undefined"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\@fluentui\\react-utilities\\lib\\src\\packages\\react-components\\react-utilities\\src\\trigger\\applyTriggerPropsToChildren.ts"],"sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\nimport type { TriggerProps } from './types';\n\n/**\n * @internal\n * resolve the trigger props to the children, either by calling the render function, or cloning with the new props.\n */\nexport function applyTriggerPropsToChildren<TriggerChildProps>(\n  children: TriggerProps<TriggerChildProps>['children'],\n  triggerChildProps: TriggerChildProps,\n): React.ReactElement | null {\n  if (typeof children === 'function') {\n    return children(triggerChildProps);\n  } else if (children) {\n    return cloneTriggerTree(children, triggerChildProps);\n  }\n\n  // Components in React should return either JSX elements or \"null\", otherwise React will throw:\n  //   Nothing was returned from render.\n  //   This usually means a return statement is missing. Or, to render nothing, return null.\n  return children || null;\n}\n\n/**\n * Clones a React element tree, and applies the given props to the first grandchild that is not\n * a FluentTriggerComponent or React Fragment (the same element returned by {@link getTriggerChild}).\n */\nfunction cloneTriggerTree<TriggerChildProps>(\n  child: React.ReactNode,\n  triggerProps: TriggerChildProps,\n): React.ReactElement {\n  if (!React.isValidElement(child) || child.type === React.Fragment) {\n    throw new Error(\n      'A trigger element must be a single element for this component. ' +\n        \"Please ensure that you're not using React Fragments.\",\n    );\n  }\n\n  if (isFluentTrigger(child)) {\n    const grandchild = cloneTriggerTree(child.props.children, triggerProps);\n    return React.cloneElement(child, undefined, grandchild);\n  } else {\n    return React.cloneElement(child, triggerProps as TriggerChildProps & React.Attributes);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}