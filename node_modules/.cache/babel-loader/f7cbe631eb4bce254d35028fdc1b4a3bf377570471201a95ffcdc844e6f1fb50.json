{"ast":null,"code":"import { createKeyborg, disposeKeyborg, nativeFocus, KEYBORG_FOCUSIN } from 'keyborg';\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst TabsterAttributeName = \"data-tabster\";\nconst TabsterDummyInputAttributeName = \"data-tabster-dummy\";\nconst DeloserEventName = \"tabster:deloser\";\nconst ModalizerEventName = \"tabster:modalizer\";\nconst MoverEventName = \"tabster:mover\";\nconst ObservedElementAccesibilities = {\n  Any: 0,\n  Accessible: 1,\n  Focusable: 2\n};\nconst RestoreFocusOrders = {\n  History: 0,\n  DeloserDefault: 1,\n  RootDefault: 2,\n  DeloserFirst: 3,\n  RootFirst: 4\n};\nconst Visibilities = {\n  Invisible: 0,\n  PartiallyVisible: 1,\n  Visible: 2\n};\nconst MoverDirections = {\n  Both: 0,\n  Vertical: 1,\n  Horizontal: 2,\n  Grid: 3\n};\nconst GroupperTabbabilities = {\n  Unlimited: 0,\n  Limited: 1,\n  LimitedTrapFocus: 2\n};\nvar Types = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TabsterAttributeName: TabsterAttributeName,\n  TabsterDummyInputAttributeName: TabsterDummyInputAttributeName,\n  DeloserEventName: DeloserEventName,\n  ModalizerEventName: ModalizerEventName,\n  MoverEventName: MoverEventName,\n  ObservedElementAccesibilities: ObservedElementAccesibilities,\n  RestoreFocusOrders: RestoreFocusOrders,\n  Visibilities: Visibilities,\n  MoverDirections: MoverDirections,\n  GroupperTabbabilities: GroupperTabbabilities\n});\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction getTabsterOnElement(tabster, element) {\n  var _a;\n  return (_a = tabster.storageEntry(element)) === null || _a === void 0 ? void 0 : _a.tabster;\n}\nfunction updateTabsterByAttribute(tabster, element, dispose) {\n  var _a, _b;\n  const newAttrValue = dispose || tabster._noop ? undefined : element.getAttribute(TabsterAttributeName);\n  let entry = tabster.storageEntry(element);\n  let newAttr;\n  if (newAttrValue) {\n    if (newAttrValue !== ((_a = entry === null || entry === void 0 ? void 0 : entry.attr) === null || _a === void 0 ? void 0 : _a.string)) {\n      try {\n        const newValue = JSON.parse(newAttrValue);\n        if (typeof newValue !== \"object\") {\n          throw new Error(`Value is not a JSON object, got '${newAttrValue}'.`);\n        }\n        newAttr = {\n          string: newAttrValue,\n          object: newValue\n        };\n      } catch (e) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error(`data-tabster attribute error: ${e}`, element);\n        }\n      }\n    } else {\n      return;\n    }\n  } else if (!entry) {\n    return;\n  }\n  if (!entry) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    entry = tabster.storageEntry(element, true);\n  }\n  if (!entry.tabster) {\n    entry.tabster = {};\n  }\n  const tabsterOnElement = entry.tabster || {};\n  const oldTabsterProps = ((_b = entry.attr) === null || _b === void 0 ? void 0 : _b.object) || {};\n  const newTabsterProps = (newAttr === null || newAttr === void 0 ? void 0 : newAttr.object) || {};\n  for (const key of Object.keys(oldTabsterProps)) {\n    if (!newTabsterProps[key]) {\n      if (key === \"root\") {\n        const root = tabsterOnElement[key];\n        if (root) {\n          tabster.root.onRoot(root, true);\n        }\n      } else if (key === \"modalizer\") {\n        const modalizer = tabsterOnElement.modalizer;\n        if (tabster.modalizer && modalizer) {\n          tabster.modalizer.updateModalizer(modalizer, true);\n        }\n      }\n      switch (key) {\n        case \"deloser\":\n        case \"root\":\n        case \"groupper\":\n        case \"modalizer\":\n        case \"mover\":\n          // eslint-disable-next-line no-case-declarations\n          const part = tabsterOnElement[key];\n          if (part) {\n            part.dispose();\n            delete tabsterOnElement[key];\n          }\n          break;\n        case \"observed\":\n          delete tabsterOnElement[key];\n          if (tabster.observedElement) {\n            tabster.observedElement.onObservedElementUpdate(element);\n          }\n          break;\n        case \"focusable\":\n        case \"outline\":\n        case \"uncontrolled\":\n          delete tabsterOnElement[key];\n          break;\n      }\n    }\n  }\n  for (const key of Object.keys(newTabsterProps)) {\n    switch (key) {\n      case \"deloser\":\n        if (tabsterOnElement.deloser) {\n          tabsterOnElement.deloser.setProps(newTabsterProps.deloser);\n        } else {\n          if (tabster.deloser) {\n            tabsterOnElement.deloser = tabster.deloser.createDeloser(element, newTabsterProps.deloser);\n          } else if (process.env.NODE_ENV === 'development') {\n            console.error(\"Deloser API used before initializing, please call `getDeloser()`\");\n          }\n        }\n        break;\n      case \"root\":\n        if (tabsterOnElement.root) {\n          tabsterOnElement.root.setProps(newTabsterProps.root);\n        } else {\n          tabsterOnElement.root = tabster.root.createRoot(element, newTabsterProps.root);\n        }\n        tabster.root.onRoot(tabsterOnElement.root);\n        break;\n      case \"modalizer\":\n        if (tabsterOnElement.modalizer) {\n          tabsterOnElement.modalizer.setProps(newTabsterProps.modalizer);\n        } else {\n          if (tabster.modalizer) {\n            tabsterOnElement.modalizer = tabster.modalizer.createModalizer(element, newTabsterProps.modalizer);\n          } else if (process.env.NODE_ENV === 'development') {\n            console.error(\"Modalizer API used before initializing, please call `getModalizer()`\");\n          }\n        }\n        break;\n      case \"focusable\":\n        tabsterOnElement.focusable = newTabsterProps.focusable;\n        break;\n      case \"groupper\":\n        if (tabsterOnElement.groupper) {\n          tabsterOnElement.groupper.setProps(newTabsterProps.groupper);\n        } else {\n          if (tabster.groupper) {\n            tabsterOnElement.groupper = tabster.groupper.createGroupper(element, newTabsterProps.groupper);\n          } else if (process.env.NODE_ENV === 'development') {\n            console.error(\"Groupper API used before initializing, please call `getGroupper()`\");\n          }\n        }\n        break;\n      case \"mover\":\n        if (tabsterOnElement.mover) {\n          tabsterOnElement.mover.setProps(newTabsterProps.mover);\n        } else {\n          if (tabster.mover) {\n            tabsterOnElement.mover = tabster.mover.createMover(element, newTabsterProps.mover);\n          } else if (process.env.NODE_ENV === 'development') {\n            console.error(\"Mover API used before initializing, please call `getMover()`\");\n          }\n        }\n        break;\n      case \"observed\":\n        if (tabster.observedElement) {\n          tabsterOnElement.observed = newTabsterProps.observed;\n          tabster.observedElement.onObservedElementUpdate(element);\n        } else if (process.env.NODE_ENV === 'development') {\n          console.error(\"ObservedElement API used before initializing, please call `getObservedElement()`\");\n        }\n        break;\n      case \"uncontrolled\":\n        tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;\n        break;\n      case \"outline\":\n        if (tabster.outline) {\n          tabsterOnElement.outline = newTabsterProps.outline;\n        } else if (process.env.NODE_ENV === 'development') {\n          console.error(\"Outline API used before initializing, please call `getOutline()`\");\n        }\n        break;\n      default:\n        console.error(`Unknown key '${key}' in data-tabster attribute value.`);\n    }\n  }\n  if (newAttr) {\n    entry.attr = newAttr;\n  } else {\n    if (Object.keys(tabsterOnElement).length === 0) {\n      delete entry.tabster;\n      delete entry.attr;\n    }\n    tabster.storageEntry(element, false);\n  }\n}\nfunction augmentAttribute(tabster, element, name, value // Restore original value when undefined.\n) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const entry = tabster.storageEntry(element, true);\n  if (!entry.aug) {\n    if (value === undefined) {\n      return;\n    }\n    entry.aug = {};\n  }\n  if (value === undefined) {\n    if (name in entry.aug) {\n      const origVal = entry.aug[name];\n      delete entry.aug[name];\n      if (origVal === null) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, origVal);\n      }\n    }\n  } else {\n    if (!(name in entry.aug)) {\n      entry.aug[name] = element.getAttribute(name);\n    }\n    if (value === null) {\n      element.removeAttribute(name);\n    } else {\n      element.setAttribute(name, value);\n    }\n  }\n  if (value === undefined && Object.keys(entry.aug).length === 0) {\n    delete entry.aug;\n    tabster.storageEntry(element, false);\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction createEventTarget(getWindow) {\n  const global = getWindow();\n  if (global.EventTarget) {\n    return new global.EventTarget();\n  }\n  return global.document.createElement(\"div\");\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass Subscribable {\n  constructor() {\n    this._callbacks = [];\n  }\n  dispose() {\n    this._callbacks = [];\n    delete this._val;\n  }\n  subscribe(callback) {\n    const index = this._callbacks.indexOf(callback);\n    if (index < 0) {\n      this._callbacks.push(callback);\n    }\n  }\n  unsubscribe(callback) {\n    const index = this._callbacks.indexOf(callback);\n    if (index >= 0) {\n      this._callbacks.splice(index, 1);\n    }\n  }\n  setVal(val, details) {\n    if (this._val === val) {\n      return;\n    }\n    this._val = val;\n    this._callCallbacks(val, details);\n  }\n  getVal() {\n    return this._val;\n  }\n  trigger(val, details) {\n    this._callCallbacks(val, details);\n  }\n  _callCallbacks(val, details) {\n    this._callbacks.forEach(callback => callback(val, details));\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass KeyboardNavigationState extends Subscribable {\n  constructor(getWindow) {\n    super();\n    this._onChange = isNavigatingWithKeyboard => {\n      this.setVal(isNavigatingWithKeyboard, undefined);\n    };\n    this._keyborg = createKeyborg(getWindow());\n    this._keyborg.subscribe(this._onChange);\n  }\n  dispose() {\n    super.dispose();\n    if (this._keyborg) {\n      this._keyborg.unsubscribe(this._onChange);\n      disposeKeyborg(this._keyborg);\n      delete this._keyborg;\n    }\n  }\n  static setVal(instance, val) {\n    var _a;\n    (_a = instance._keyborg) === null || _a === void 0 ? void 0 : _a.setVal(val);\n  }\n  isNavigatingWithKeyboard() {\n    var _a;\n    return !!((_a = this._keyborg) === null || _a === void 0 ? void 0 : _a.isNavigatingWithKeyboard());\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nlet _isBrokenIE11;\nconst _DOMRect = typeof DOMRect !== \"undefined\" ? DOMRect : class {\n  constructor(x, y, width, height) {\n    this.left = x || 0;\n    this.top = y || 0;\n    this.right = (x || 0) + (width || 0);\n    this.bottom = (y || 0) + (height || 0);\n  }\n};\nlet _uidCounter = 0;\ntry {\n  // IE11 only accepts `filter` argument as a function (not object with the `acceptNode`\n  // property as the docs define). Also `entityReferenceExpansion` argument is not\n  // optional. And it throws exception when the above arguments aren't there.\n  document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);\n  _isBrokenIE11 = false;\n} catch (e) {\n  _isBrokenIE11 = true;\n}\nfunction getInstanceContext(getWindow) {\n  const win = getWindow();\n  let ctx = win.__tabsterInstanceContext;\n  if (!ctx) {\n    ctx = {\n      elementByUId: {},\n      basics: {\n        Promise: win.Promise || undefined,\n        WeakRef: win.WeakRef || undefined\n      },\n      containerBoundingRectCache: {},\n      lastContainerBoundingRectCacheId: 0,\n      fakeWeakRefs: [],\n      fakeWeakRefsStarted: false\n    };\n    win.__tabsterInstanceContext = ctx;\n  }\n  return ctx;\n}\nfunction disposeInstanceContext(win) {\n  const ctx = win.__tabsterInstanceContext;\n  if (ctx) {\n    ctx.elementByUId = {};\n    delete ctx.WeakRef;\n    ctx.containerBoundingRectCache = {};\n    if (ctx.containerBoundingRectCacheTimer) {\n      win.clearTimeout(ctx.containerBoundingRectCacheTimer);\n    }\n    if (ctx.fakeWeakRefsTimer) {\n      win.clearTimeout(ctx.fakeWeakRefsTimer);\n    }\n    ctx.fakeWeakRefs = [];\n    delete win.__tabsterInstanceContext;\n  }\n}\nfunction createWeakMap(win) {\n  const ctx = win.__tabsterInstanceContext;\n  return new ((ctx === null || ctx === void 0 ? void 0 : ctx.basics.WeakMap) || WeakMap)();\n}\nclass FakeWeakRef {\n  constructor(target) {\n    this._target = target;\n  }\n  deref() {\n    return this._target;\n  }\n  static cleanup(fwr, forceRemove) {\n    if (!fwr._target) {\n      return true;\n    }\n    if (forceRemove || !documentContains(fwr._target.ownerDocument, fwr._target)) {\n      delete fwr._target;\n      return true;\n    }\n    return false;\n  }\n}\nclass WeakHTMLElement {\n  constructor(getWindow, element, data) {\n    const context = getInstanceContext(getWindow);\n    let ref;\n    if (context.WeakRef) {\n      ref = new context.WeakRef(element);\n    } else {\n      ref = new FakeWeakRef(element);\n      context.fakeWeakRefs.push(ref);\n    }\n    this._ref = ref;\n    this._data = data;\n  }\n  get() {\n    const ref = this._ref;\n    let element;\n    if (ref) {\n      element = ref.deref();\n      if (!element) {\n        delete this._ref;\n      }\n    }\n    return element;\n  }\n  getData() {\n    return this._data;\n  }\n}\nfunction cleanupFakeWeakRefs(getWindow, forceRemove) {\n  const context = getInstanceContext(getWindow);\n  context.fakeWeakRefs = context.fakeWeakRefs.filter(e => !FakeWeakRef.cleanup(e, forceRemove));\n}\nfunction startFakeWeakRefsCleanup(getWindow) {\n  const context = getInstanceContext(getWindow);\n  if (!context.fakeWeakRefsStarted) {\n    context.fakeWeakRefsStarted = true;\n    context.WeakRef = getWeakRef(context);\n  }\n  if (!context.fakeWeakRefsTimer) {\n    context.fakeWeakRefsTimer = getWindow().setTimeout(() => {\n      context.fakeWeakRefsTimer = undefined;\n      cleanupFakeWeakRefs(getWindow);\n      startFakeWeakRefsCleanup(getWindow);\n    }, 2 * 60 * 1000); // 2 minutes.\n  }\n}\n\nfunction stopFakeWeakRefsCleanupAndClearStorage(getWindow) {\n  const context = getInstanceContext(getWindow);\n  context.fakeWeakRefsStarted = false;\n  if (context.fakeWeakRefsTimer) {\n    getWindow().clearTimeout(context.fakeWeakRefsTimer);\n    context.fakeWeakRefsTimer = undefined;\n    context.fakeWeakRefs = [];\n  }\n}\nfunction createElementTreeWalker(doc, root, acceptNode) {\n  // IE11 will throw an exception when the TreeWalker root is not an Element.\n  if (root.nodeType !== Node.ELEMENT_NODE) {\n    return undefined;\n  } // TypeScript isn't aware of IE11 behaving badly.\n\n  const filter = _isBrokenIE11 ? acceptNode : {\n    acceptNode\n  };\n  return doc.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filter,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.\n  false\n  /* Last argument is not optional for IE11! */);\n}\n\nfunction getBoundingRect(getWindow, element) {\n  let cacheId = element.__tabsterCacheId;\n  const context = getInstanceContext(getWindow);\n  const cached = cacheId ? context.containerBoundingRectCache[cacheId] : undefined;\n  if (cached) {\n    return cached.rect;\n  }\n  const scrollingElement = element.ownerDocument && element.ownerDocument.documentElement;\n  if (!scrollingElement) {\n    return new _DOMRect();\n  } // A bounding rect of the top-level element contains the whole page regardless of the\n  // scrollbar. So, we improvise a little and limiting the final result...\n\n  let left = 0;\n  let top = 0;\n  let right = scrollingElement.clientWidth;\n  let bottom = scrollingElement.clientHeight;\n  if (element !== scrollingElement) {\n    const r = element.getBoundingClientRect();\n    left = Math.max(left, r.left);\n    top = Math.max(top, r.top);\n    right = Math.min(right, r.right);\n    bottom = Math.min(bottom, r.bottom);\n  }\n  const rect = new _DOMRect(left < right ? left : -1, top < bottom ? top : -1, left < right ? right - left : 0, top < bottom ? bottom - top : 0);\n  if (!cacheId) {\n    cacheId = \"r-\" + ++context.lastContainerBoundingRectCacheId;\n    element.__tabsterCacheId = cacheId;\n  }\n  context.containerBoundingRectCache[cacheId] = {\n    rect,\n    element\n  };\n  if (!context.containerBoundingRectCacheTimer) {\n    context.containerBoundingRectCacheTimer = window.setTimeout(() => {\n      context.containerBoundingRectCacheTimer = undefined;\n      for (const cId of Object.keys(context.containerBoundingRectCache)) {\n        delete context.containerBoundingRectCache[cId].element.__tabsterCacheId;\n      }\n      context.containerBoundingRectCache = {};\n    }, 50);\n  }\n  return rect;\n}\nfunction isElementVerticallyVisibleInContainer(getWindow, element) {\n  const container = getScrollableContainer(element);\n  if (container) {\n    const containerRect = getBoundingRect(getWindow, container);\n    const elementRect = element.getBoundingClientRect();\n    return elementRect.top >= containerRect.top && elementRect.bottom <= containerRect.bottom;\n  }\n  return false;\n}\nfunction scrollIntoView(getWindow, element, alignToTop) {\n  // Built-in DOM's scrollIntoView() is cool, but when we have nested containers,\n  // it scrolls all of them, not just the deepest one. So, trying to work it around.\n  const container = getScrollableContainer(element);\n  if (container) {\n    const containerRect = getBoundingRect(getWindow, container);\n    const elementRect = element.getBoundingClientRect();\n    if (alignToTop) {\n      container.scrollTop += elementRect.top - containerRect.top;\n    } else {\n      container.scrollTop += elementRect.bottom - containerRect.bottom;\n    }\n  }\n}\nfunction getScrollableContainer(element) {\n  const doc = element.ownerDocument;\n  if (doc) {\n    for (let el = element.parentElement; el; el = el.parentElement) {\n      if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {\n        return el;\n      }\n    }\n    return doc.documentElement;\n  }\n  return null;\n}\nfunction makeFocusIgnored(element) {\n  element.__shouldIgnoreFocus = true;\n}\nfunction shouldIgnoreFocus(element) {\n  return !!element.__shouldIgnoreFocus;\n}\nfunction getUId(wnd) {\n  const rnd = new Uint32Array(4);\n  if (wnd.crypto && wnd.crypto.getRandomValues) {\n    wnd.crypto.getRandomValues(rnd);\n  } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {\n    wnd.msCrypto.getRandomValues(rnd);\n  } else {\n    for (let i = 0; i < rnd.length; i++) {\n      rnd[i] = 0xffffffff * Math.random();\n    }\n  }\n  const srnd = [];\n  for (let i = 0; i < rnd.length; i++) {\n    srnd.push(rnd[i].toString(36));\n  }\n  srnd.push(\"|\");\n  srnd.push((++_uidCounter).toString(36));\n  srnd.push(\"|\");\n  srnd.push(Date.now().toString(36));\n  return srnd.join(\"\");\n}\nfunction getElementUId(getWindow, element) {\n  const context = getInstanceContext(getWindow);\n  let uid = element.__tabsterElementUID;\n  if (!uid) {\n    uid = element.__tabsterElementUID = getUId(getWindow());\n  }\n  if (!context.elementByUId[uid] && documentContains(element.ownerDocument, element)) {\n    context.elementByUId[uid] = new WeakHTMLElement(getWindow, element);\n  }\n  return uid;\n}\nfunction getWindowUId(win) {\n  let uid = win.__tabsterCrossOriginWindowUID;\n  if (!uid) {\n    uid = win.__tabsterCrossOriginWindowUID = getUId(win);\n  }\n  return uid;\n}\nfunction clearElementCache(getWindow, parent) {\n  const context = getInstanceContext(getWindow);\n  for (const key of Object.keys(context.elementByUId)) {\n    const wel = context.elementByUId[key];\n    const el = wel && wel.get();\n    if (el && parent) {\n      if (!parent.contains(el)) {\n        continue;\n      }\n    }\n    delete context.elementByUId[key];\n  }\n} // IE11 doesn't have document.contains()...\n\nfunction documentContains(doc, element) {\n  var _a;\n  return !!((_a = doc === null || doc === void 0 ? void 0 : doc.body) === null || _a === void 0 ? void 0 : _a.contains(element));\n}\nfunction matchesSelector(element, selector) {\n  const matches = element.matches || element.matchesSelector || element.msMatchesSelector || element.webkitMatchesSelector;\n  return matches && matches.call(element, selector);\n}\nfunction getPromise(getWindow) {\n  const context = getInstanceContext(getWindow);\n  if (context.basics.Promise) {\n    return context.basics.Promise;\n  }\n  throw new Error(\"No Promise defined.\");\n}\nfunction getWeakRef(context) {\n  return context.basics.WeakRef;\n}\nlet _lastTabsterPartId = 0;\nclass TabsterPart {\n  constructor(tabster, element, props) {\n    const getWindow = tabster.getWindow;\n    this._tabster = tabster;\n    this._element = new WeakHTMLElement(getWindow, element);\n    this._props = {\n      ...props\n    };\n    this.id = \"i\" + ++_lastTabsterPartId;\n  }\n  getElement() {\n    return this._element.get();\n  }\n  getProps() {\n    return this._props;\n  }\n  setProps(props) {\n    this._props = {\n      ...props\n    };\n  }\n}\n/**\r\n * Dummy HTML elements that are used as focus sentinels for the DOM enclosed within them\r\n */\n\nclass DummyInput {\n  constructor(getWindow, isOutside, props, element) {\n    var _a;\n    this._focusIn = e => {\n      const input = this.input;\n      if (this.onFocusIn && input) {\n        const relatedTarget = DummyInputManager.getLastPhantomFrom() || e.relatedTarget;\n        this.onFocusIn(this, this._isBackward(true, input, relatedTarget), relatedTarget);\n      }\n    };\n    this._focusOut = e => {\n      this.shouldMoveOut = false;\n      const input = this.input;\n      if (this.onFocusOut && input) {\n        const relatedTarget = e.relatedTarget;\n        this.onFocusOut(this, this._isBackward(false, input, relatedTarget), relatedTarget);\n      }\n    };\n    const win = getWindow();\n    const input = win.document.createElement(\"i\");\n    input.tabIndex = 0;\n    input.setAttribute(\"role\", \"none\");\n    input.setAttribute(TabsterDummyInputAttributeName, \"\");\n    input.setAttribute(\"aria-hidden\", \"true\");\n    const style = input.style;\n    style.position = \"fixed\";\n    style.width = style.height = \"1px\";\n    style.opacity = \"0.001\";\n    style.zIndex = \"-1\";\n    style.setProperty(\"content-visibility\", \"hidden\");\n    makeFocusIgnored(input);\n    this.input = input;\n    this.isFirst = props.isFirst;\n    this.isOutside = isOutside;\n    this._isPhantom = (_a = props.isPhantom) !== null && _a !== void 0 ? _a : false;\n    input.addEventListener(\"focusin\", this._focusIn);\n    input.addEventListener(\"focusout\", this._focusOut);\n    input.__tabsterDummyContainer = element;\n    if (this._isPhantom) {\n      this._disposeTimer = win.setTimeout(() => {\n        delete this._disposeTimer;\n        this.dispose();\n      }, 0);\n      this._clearDisposeTimeout = () => {\n        if (this._disposeTimer) {\n          win.clearTimeout(this._disposeTimer);\n          delete this._disposeTimer;\n        }\n        delete this._clearDisposeTimeout;\n      };\n    }\n  }\n  dispose() {\n    var _a;\n    if (this._clearDisposeTimeout) {\n      this._clearDisposeTimeout();\n    }\n    const input = this.input;\n    if (!input) {\n      return;\n    }\n    delete this.onFocusIn;\n    delete this.onFocusOut;\n    delete this.input;\n    input.removeEventListener(\"focusin\", this._focusIn);\n    input.removeEventListener(\"focusout\", this._focusOut);\n    delete input.__tabsterDummyContainer;\n    (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(input);\n  }\n  setTopLeft(top, left) {\n    var _a;\n    const style = (_a = this.input) === null || _a === void 0 ? void 0 : _a.style;\n    if (style) {\n      style.top = `${top}px`;\n      style.left = `${left}px`;\n    }\n  }\n  _isBackward(isIn, current, previous) {\n    return isIn && !previous ? !this.isFirst : !!(previous && current.compareDocumentPosition(previous) & Node.DOCUMENT_POSITION_FOLLOWING);\n  }\n}\nconst DummyInputManagerPriorities = {\n  Root: 1,\n  Modalizer: 2,\n  Mover: 3,\n  Groupper: 4\n};\nclass DummyInputManager {\n  constructor(tabster, element, priority, outsideByDefault) {\n    this._element = element;\n    this._instance = new DummyInputManagerCore(tabster, element, this, priority, outsideByDefault);\n    this.moveOutWithDefaultAction = backwards => {\n      var _a;\n      (_a = this._instance) === null || _a === void 0 ? void 0 : _a.moveOutWithDefaultAction(backwards);\n    };\n  }\n  _setHandlers(onFocusIn, onFocusOut) {\n    this._onFocusIn = onFocusIn;\n    this._onFocusOut = onFocusOut;\n  }\n  getHandler(isIn) {\n    return isIn ? this._onFocusIn : this._onFocusOut;\n  }\n  setTabbable(tabbable) {\n    var _a;\n    (_a = this._instance) === null || _a === void 0 ? void 0 : _a.setTabbable(this, tabbable);\n  }\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose(this);\n      delete this._instance;\n    }\n    delete this._onFocusIn;\n    delete this._onFocusOut;\n  }\n  static getLastPhantomFrom() {\n    const ret = DummyInputManager._lastPhantomFrom;\n    delete DummyInputManager._lastPhantomFrom;\n    return ret;\n  }\n  static moveWithPhantomDummy(tabster, element, moveOutside, isBackward) {\n    const dummy = new DummyInput(tabster.getWindow, true, {\n      isPhantom: true,\n      isFirst: true\n    });\n    const input = dummy.input;\n    if (input) {\n      const parent = element.parentElement;\n      if (parent) {\n        let insertBefore = moveOutside && !isBackward || !moveOutside && isBackward ? element.nextElementSibling : element;\n        if (insertBefore) {\n          if (isBackward) {\n            const beforeBefore = insertBefore.previousElementSibling;\n            if (beforeBefore && beforeBefore.__tabsterDummyContainer) {\n              insertBefore = beforeBefore;\n            }\n          } else if (insertBefore.__tabsterDummyContainer) {\n            insertBefore = insertBefore.nextElementSibling;\n          }\n        }\n        parent.insertBefore(input, insertBefore);\n        DummyInputManager._lastPhantomFrom = element;\n        tabster.getWindow().setTimeout(() => {\n          delete DummyInputManager._lastPhantomFrom;\n        }, 0);\n        nativeFocus(input);\n      }\n    }\n  }\n}\n/**\r\n * Parent class that encapsulates the behaviour of dummy inputs (focus sentinels)\r\n */\n\nclass DummyInputManagerCore {\n  constructor(tabster, element, manager, priority, outsideByDefault) {\n    var _a;\n    this._wrappers = [];\n    this._isOutside = false;\n    this._transformElements = [];\n    this._onFocusIn = (dummyInput, isBackward, relatedTarget) => {\n      this._onFocus(true, dummyInput, isBackward, relatedTarget);\n    };\n    this._onFocusOut = (dummyInput, isBackward, relatedTarget) => {\n      this._onFocus(false, dummyInput, isBackward, relatedTarget);\n    };\n    /**\r\n     * Prepares to move focus out of the given element by focusing\r\n     * one of the dummy inputs and setting the `shouldMoveOut` flag\r\n     * @param backwards focus moving to an element behind the given element\r\n     */\n\n    this.moveOutWithDefaultAction = backwards => {\n      const first = this._firstDummy;\n      const last = this._lastDummy;\n      if ((first === null || first === void 0 ? void 0 : first.input) && (last === null || last === void 0 ? void 0 : last.input)) {\n        if (backwards) {\n          first.shouldMoveOut = true;\n          first.input.tabIndex = 0;\n          first.input.focus();\n        } else {\n          last.shouldMoveOut = true;\n          last.input.tabIndex = 0;\n          last.input.focus();\n        }\n      }\n    };\n    this.setTabbable = (manager, tabbable) => {\n      var _a, _b;\n      for (const w of this._wrappers) {\n        if (w.manager === manager) {\n          w.tabbable = tabbable;\n          break;\n        }\n      }\n      const wrapper = this._getCurrent();\n      if (wrapper) {\n        const tabIndex = wrapper.tabbable ? 0 : -1;\n        let input = (_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input;\n        if (input) {\n          input.tabIndex = tabIndex;\n        }\n        input = (_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input;\n        if (input) {\n          input.tabIndex = tabIndex;\n        }\n      }\n    };\n    this._addTransformOffsets = () => {\n      const win = this._getWindow();\n      if (this._scrollTimer) {\n        win.clearTimeout(this._scrollTimer);\n      } // Making sure we're not updating the dummy inputs while scrolling to avoid excessive reflows.\n\n      this._scrollTimer = win.setTimeout(() => {\n        delete this._scrollTimer;\n        this._reallyAddTransformOffsets();\n      }, 100);\n    };\n    const el = element.get();\n    if (!el) {\n      throw new Error(\"No element\");\n    }\n    this._getWindow = tabster.getWindow;\n    const instance = el.__tabsterDummy;\n    (instance || this)._wrappers.push({\n      manager,\n      priority,\n      tabbable: true\n    });\n    if (instance) {\n      return instance;\n    }\n    el.__tabsterDummy = this;\n    this._firstDummy = new DummyInput(this._getWindow, this._isOutside, {\n      isFirst: true\n    }, element);\n    this._lastDummy = new DummyInput(this._getWindow, this._isOutside, {\n      isFirst: false\n    }, element);\n    this._firstDummy.onFocusIn = this._onFocusIn;\n    this._firstDummy.onFocusOut = this._onFocusOut;\n    this._lastDummy.onFocusIn = this._onFocusIn;\n    this._lastDummy.onFocusOut = this._onFocusOut;\n    this._element = element;\n    this._addDummyInputs(); // Some elements allow only specific types of direct descendants and we need to\n    // put our dummy inputs inside or outside of the element accordingly.\n\n    const tagName = (_a = element.get()) === null || _a === void 0 ? void 0 : _a.tagName;\n    this._isOutside = (outsideByDefault || tagName === \"UL\" || tagName === \"OL\" || tagName === \"TABLE\") && !(tagName === \"LI\" || tagName === \"TD\" || tagName === \"TH\"); // older versions of testing frameworks like JSDOM don't support MutationObserver\n    // https://github.com/jsdom/jsdom/issues/639\n    // use this way of getting NODE_ENV because tsdx does not support a test environment\n    // https://github.com/jaredpalmer/tsdx/issues/167\n\n    if (typeof process === \"undefined\" || process.env[\"NODE_ENV\"] !== \"test\") {\n      this._observeMutations();\n    }\n  }\n  dispose(manager, force) {\n    var _a, _b, _c;\n    const wrappers = this._wrappers = this._wrappers.filter(w => w.manager !== manager && !force);\n    if (wrappers.length === 0) {\n      delete ((_a = this._element) === null || _a === void 0 ? void 0 : _a.get()).__tabsterDummy;\n      if (this._unobserve) {\n        this._unobserve();\n        delete this._unobserve;\n      }\n      for (const el of this._transformElements) {\n        el.removeEventListener(\"scroll\", this._addTransformOffsets);\n      }\n      this._transformElements = [];\n      const win = this._getWindow();\n      if (this._scrollTimer) {\n        win.clearTimeout(this._scrollTimer);\n        delete this._scrollTimer;\n      }\n      if (this._addTimer) {\n        win.clearTimeout(this._addTimer);\n        delete this._addTimer;\n      }\n      (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.dispose();\n    }\n  }\n  _onFocus(isIn, dummyInput, isBackward, relatedTarget) {\n    var _a;\n    const wrapper = this._getCurrent();\n    if (wrapper) {\n      (_a = wrapper.manager.getHandler(isIn)) === null || _a === void 0 ? void 0 : _a(dummyInput, isBackward, relatedTarget);\n    }\n  }\n  _getCurrent() {\n    this._wrappers.sort((a, b) => {\n      if (a.tabbable !== b.tabbable) {\n        return a.tabbable ? -1 : 1;\n      }\n      return a.priority - b.priority;\n    });\n    return this._wrappers[0];\n  }\n  /**\r\n   * Adds dummy inputs as the first and last child of the given element\r\n   * Called each time the children under the element is mutated\r\n   */\n\n  _addDummyInputs() {\n    if (this._addTimer) {\n      return;\n    }\n    this._addTimer = this._getWindow().setTimeout(() => {\n      var _a, _b, _c;\n      delete this._addTimer;\n      const element = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();\n      const dif = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;\n      const dil = (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.input;\n      if (!element || !dif || !dil) {\n        return;\n      }\n      if (this._isOutside) {\n        const elementParent = element.parentElement;\n        if (elementParent) {\n          const nextSibling = element.nextElementSibling;\n          if (nextSibling !== dil) {\n            elementParent.insertBefore(dil, nextSibling);\n          }\n          if (element.previousElementSibling !== dif) {\n            elementParent.insertBefore(dif, element);\n          }\n        }\n      } else {\n        if (element.lastElementChild !== dil) {\n          element.appendChild(dil);\n        }\n        const firstElementChild = element.firstElementChild;\n        if (firstElementChild && firstElementChild !== dif) {\n          element.insertBefore(dif, firstElementChild);\n        }\n      }\n      this._addTransformOffsets();\n    }, 0);\n  }\n  /**\r\n   * Creates a mutation observer to ensure that on DOM changes, the dummy inputs\r\n   * stay as the first and last child elements\r\n   */\n\n  _observeMutations() {\n    var _a;\n    if (this._unobserve) {\n      return;\n    }\n    const observer = new MutationObserver(() => {\n      if (this._unobserve) {\n        this._addDummyInputs();\n      }\n    });\n    const element = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();\n    const actualElement = this._isOutside ? element === null || element === void 0 ? void 0 : element.parentElement : element;\n    if (actualElement) {\n      observer.observe(actualElement, {\n        childList: true\n      });\n      this._unobserve = () => {\n        observer.disconnect();\n      };\n    }\n  }\n  _reallyAddTransformOffsets() {\n    var _a, _b, _c, _d;\n    const from = ((_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input) || ((_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input);\n    const transformElements = this._transformElements;\n    const newTransformElements = [];\n    const transformElementsMap = new WeakMap();\n    const newTransformElementsMap = new WeakMap();\n    let scrollTop = 0;\n    let scrollLeft = 0;\n    for (const el of transformElements) {\n      transformElementsMap.set(el, el);\n    }\n    const win = this._getWindow();\n    for (let element = from; element; element = element.parentElement) {\n      const transform = win.getComputedStyle(element).transform;\n      if (transform && transform !== \"none\") {\n        let el = transformElementsMap.get(element);\n        if (!el) {\n          el = element;\n          el.addEventListener(\"scroll\", this._addTransformOffsets);\n        }\n        newTransformElements.push(el);\n        newTransformElementsMap.set(el, el);\n        scrollTop += el.scrollTop;\n        scrollLeft += el.scrollLeft;\n      }\n    }\n    for (const el of transformElements) {\n      if (!newTransformElementsMap.get(el)) {\n        el.removeEventListener(\"scroll\", this._addTransformOffsets);\n      }\n    }\n    this._transformElements = newTransformElements;\n    (_c = this._firstDummy) === null || _c === void 0 ? void 0 : _c.setTopLeft(scrollTop, scrollLeft);\n    (_d = this._lastDummy) === null || _d === void 0 ? void 0 : _d.setTopLeft(scrollTop, scrollLeft);\n  }\n}\nfunction getLastChild(container) {\n  let lastChild = null;\n  for (let i = container.lastElementChild; i; i = i.lastElementChild) {\n    lastChild = i;\n  }\n  return lastChild || undefined;\n}\nfunction getAdjacentElement(from, prev) {\n  let cur = from;\n  let adjacent = null;\n  while (cur && !adjacent) {\n    adjacent = prev ? cur.previousElementSibling : cur.nextElementSibling;\n    cur = cur.parentElement;\n  }\n  return adjacent || undefined;\n}\nfunction triggerEvent(target, name, details) {\n  const event = document.createEvent(\"HTMLEvents\");\n  event.initEvent(name, true, true);\n  event.details = details;\n  target.dispatchEvent(event);\n  return !event.defaultPrevented;\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction _setInformativeStyle$3(weakElement, remove, id) {\n  if (process.env.NODE_ENV === 'development') {\n    const element = weakElement.get();\n    if (element) {\n      if (remove) {\n        element.style.removeProperty(\"--tabster-root\");\n      } else {\n        element.style.setProperty(\"--tabster-root\", id + \",\");\n      }\n    }\n  }\n}\nclass RootDummyManager extends DummyInputManager {\n  constructor(tabster, element, setFocused) {\n    super(tabster, element, DummyInputManagerPriorities.Root);\n    this._onDummyInputFocus = dummyInput => {\n      var _a;\n      if (dummyInput.shouldMoveOut) {\n        // When we've reached the last focusable element, we want to let the browser\n        // to move the focus outside of the page. In order to do that we're synchronously\n        // calling focus() of the dummy input from the Tab key handler and allowing\n        // the default action to move the focus out.\n        this._setFocused(false, true);\n      } else {\n        // The only way a dummy input gets focused is during the keyboard navigation.\n        KeyboardNavigationState.setVal(this._tabster.keyboardNavigation, true);\n        const element = this._element.get();\n        if (element) {\n          this._setFocused(true, true);\n          const hasFocused = dummyInput.isFirst ? this._tabster.focusedElement.focusFirst({\n            container: element\n          }) : this._tabster.focusedElement.focusLast({\n            container: element\n          });\n          if (hasFocused) {\n            return;\n          }\n        }\n        (_a = dummyInput.input) === null || _a === void 0 ? void 0 : _a.blur();\n      }\n    };\n    this._setHandlers(this._onDummyInputFocus);\n    this._tabster = tabster;\n    this._setFocused = setFocused;\n  }\n}\nclass Root extends TabsterPart {\n  constructor(tabster, element, onDispose, props) {\n    super(tabster, element, props);\n    this._isFocused = false;\n    this._setFocused = (hasFocused, fromAdjacent) => {\n      if (this._setFocusedTimer) {\n        this._tabster.getWindow().clearTimeout(this._setFocusedTimer);\n        delete this._setFocusedTimer;\n      }\n      if (this._isFocused === hasFocused) {\n        return;\n      }\n      const element = this._element.get();\n      if (element) {\n        if (hasFocused) {\n          this._isFocused = true;\n          triggerEvent(this._tabster.root.eventTarget, \"focus\", {\n            element,\n            fromAdjacent\n          });\n        } else {\n          this._setFocusedTimer = this._tabster.getWindow().setTimeout(() => {\n            delete this._setFocusedTimer;\n            this._isFocused = false;\n            triggerEvent(this._tabster.root.eventTarget, \"blur\", {\n              element,\n              fromAdjacent\n            });\n          }, 0);\n        }\n      }\n    };\n    this._onFocus = e => {\n      var _a;\n      const win = this._tabster.getWindow();\n      if (this._setTabbableTimer) {\n        win.clearTimeout(this._setTabbableTimer);\n        delete this._setTabbableTimer;\n      }\n      if (e) {\n        const ctx = RootAPI.getTabsterContext(this._tabster, e);\n        if (ctx) {\n          this._setFocused(ctx.root.getElement() === this._element.get());\n        }\n        if (!ctx || ctx.uncontrolled || this._tabster.rootDummyInputs) {\n          (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.setTabbable(false);\n          return;\n        }\n      } else {\n        this._setFocused(false);\n      }\n      this._setTabbableTimer = win.setTimeout(() => {\n        var _a;\n        delete this._setTabbableTimer;\n        (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.setTabbable(true);\n      }, 0);\n    };\n    this._onDispose = onDispose;\n    const win = tabster.getWindow;\n    this.uid = getElementUId(win, element);\n    if (tabster.controlTab || tabster.rootDummyInputs) {\n      this._dummyManager = new RootDummyManager(tabster, this._element, this._setFocused);\n    }\n    tabster.focusedElement.subscribe(this._onFocus);\n    this._add();\n  }\n  dispose() {\n    var _a;\n    this._onDispose(this);\n    const win = this._tabster.getWindow();\n    if (this._setFocusedTimer) {\n      win.clearTimeout(this._setFocusedTimer);\n      delete this._setFocusedTimer;\n    }\n    if (this._setTabbableTimer) {\n      win.clearTimeout(this._setTabbableTimer);\n      delete this._setTabbableTimer;\n    }\n    (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._remove();\n  }\n  moveOutWithDefaultAction(isBackward) {\n    const dummyManager = this._dummyManager;\n    if (dummyManager) {\n      dummyManager.moveOutWithDefaultAction(isBackward);\n    } else {\n      const el = this.getElement();\n      if (el) {\n        RootDummyManager.moveWithPhantomDummy(this._tabster, el, true, isBackward);\n      }\n    }\n  }\n  _add() {\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$3(this._element, false, this.uid);\n    }\n  }\n  _remove() {\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$3(this._element, true);\n    }\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nclass RootAPI {\n  constructor(tabster, autoRoot) {\n    this._roots = {};\n    this.rootById = {};\n    this._init = () => {\n      this._initTimer = undefined;\n    };\n    this._onRootDispose = root => {\n      delete this._roots[root.id];\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._initTimer = this._win().setTimeout(this._init, 0);\n    this._autoRoot = autoRoot;\n    this.eventTarget = createEventTarget(this._win);\n  }\n  dispose() {\n    const win = this._win();\n    if (this._autoRootInstance) {\n      this._autoRootInstance.dispose();\n      delete this._autoRootInstance;\n      delete this._autoRoot;\n    }\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    Object.keys(this._roots).forEach(rootId => {\n      if (this._roots[rootId]) {\n        this._roots[rootId].dispose();\n        delete this._roots[rootId];\n      }\n    });\n    this.rootById = {};\n  }\n  createRoot(element, props) {\n    if (process.env.NODE_ENV === 'development') ;\n    const newRoot = new Root(this._tabster, element, this._onRootDispose, props);\n    this._roots[newRoot.id] = newRoot;\n    return newRoot;\n  }\n  static getRootByUId(getWindow, id) {\n    const tabster = getWindow().__tabsterInstance;\n    return tabster && tabster.root.rootById[id];\n  }\n  /**\r\n   * Fetches the tabster context for an element walking up its ancestors\r\n   *\r\n   * @param tabster Tabster instance\r\n   * @param element The element the tabster context should represent\r\n   * @param options Additional options\r\n   * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations\r\n   */\n\n  static getTabsterContext(tabster, element, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a, _b, _c;\n    if (!element.ownerDocument) {\n      return undefined;\n    }\n    const checkRtl = options.checkRtl;\n    let root;\n    let modalizer;\n    let groupper;\n    let mover;\n    let isExcludedFromMover = false;\n    let isGroupperFirst;\n    let isRtl;\n    let uncontrolled;\n    let curElement = element;\n    const ignoreKeydown = {};\n    while (curElement && (!root || checkRtl)) {\n      const tabsterOnElement = getTabsterOnElement(tabster, curElement);\n      if (checkRtl && isRtl === undefined) {\n        const dir = curElement.dir;\n        if (dir) {\n          isRtl = dir.toLowerCase() === \"rtl\";\n        }\n      }\n      if (!tabsterOnElement) {\n        curElement = curElement.parentElement;\n        continue;\n      }\n      if (tabsterOnElement.uncontrolled) {\n        uncontrolled = curElement;\n      }\n      if (!mover && ((_a = tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.excludeFromMover) && !groupper) {\n        isExcludedFromMover = true;\n      }\n      const curGroupper = tabsterOnElement.groupper;\n      const curMover = tabsterOnElement.mover;\n      if (!groupper && curGroupper) {\n        groupper = curGroupper;\n      }\n      if (!mover && curMover) {\n        mover = curMover;\n        isGroupperFirst = !!groupper;\n      }\n      if (!modalizer && tabsterOnElement.modalizer) {\n        modalizer = tabsterOnElement.modalizer;\n      }\n      if (tabsterOnElement.root) {\n        root = tabsterOnElement.root;\n      }\n      if ((_b = tabsterOnElement.focusable) === null || _b === void 0 ? void 0 : _b.ignoreKeydown) {\n        Object.assign(ignoreKeydown, tabsterOnElement.focusable.ignoreKeydown);\n      }\n      curElement = curElement.parentElement;\n    } // No root element could be found, try to get an auto root\n\n    if (!root) {\n      const rootAPI = tabster.root;\n      const autoRoot = rootAPI._autoRoot;\n      if (autoRoot && !rootAPI._autoRootInstance) {\n        const body = (_c = element.ownerDocument) === null || _c === void 0 ? void 0 : _c.body;\n        if (body) {\n          rootAPI._autoRootInstance = new Root(rootAPI._tabster, body, rootAPI._onRootDispose, autoRoot);\n        }\n      }\n      root = rootAPI._autoRootInstance;\n    }\n    if (groupper && !mover) {\n      isGroupperFirst = true;\n    }\n    return root ? {\n      root,\n      modalizer,\n      groupper,\n      mover,\n      isGroupperFirst,\n      isRtl: checkRtl ? !!isRtl : undefined,\n      uncontrolled,\n      isExcludedFromMover,\n      ignoreKeydown\n    } : undefined;\n  }\n  onRoot(root, removed) {\n    if (removed) {\n      delete this.rootById[root.uid];\n    } else {\n      this.rootById[root.uid] = root;\n    }\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst _containerHistoryLength = 10;\nclass DeloserItemBase {}\nclass DeloserItem extends DeloserItemBase {\n  constructor(tabster, deloser) {\n    super();\n    this.uid = deloser.uid;\n    this._tabster = tabster;\n    this._deloser = deloser;\n  }\n  belongsTo(deloser) {\n    return deloser === this._deloser;\n  }\n  unshift(element) {\n    this._deloser.unshift(element);\n  }\n  async focusAvailable() {\n    const available = this._deloser.findAvailable();\n    return available ? this._tabster.focusedElement.focus(available) : false;\n  }\n  async resetFocus() {\n    const getWindow = this._tabster.getWindow;\n    return getPromise(getWindow).resolve(this._deloser.resetFocus());\n  }\n}\nclass DeloserHistoryByRootBase {\n  constructor(tabster, rootUId) {\n    this._history = [];\n    this._tabster = tabster;\n    this.rootUId = rootUId;\n  }\n  getLength() {\n    return this._history.length;\n  }\n  removeDeloser(deloser) {\n    this._history = this._history.filter(c => !c.belongsTo(deloser));\n  }\n  hasDeloser(deloser) {\n    return this._history.some(d => d.belongsTo(deloser));\n  }\n}\nclass DeloserHistoryByRoot extends DeloserHistoryByRootBase {\n  unshiftToDeloser(deloser, element) {\n    let item;\n    for (let i = 0; i < this._history.length; i++) {\n      if (this._history[i].belongsTo(deloser)) {\n        item = this._history[i];\n        this._history.splice(i, 1);\n        break;\n      }\n    }\n    if (!item) {\n      item = new DeloserItem(this._tabster, deloser);\n    }\n    item.unshift(element);\n    this._history.unshift(item);\n    this._history.splice(_containerHistoryLength, this._history.length - _containerHistoryLength);\n  }\n  async focusAvailable(from) {\n    let skip = !!from;\n    for (const i of this._history) {\n      if (from && i.belongsTo(from)) {\n        skip = false;\n      }\n      if (!skip && (await i.focusAvailable())) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async resetFocus(from) {\n    let skip = !!from;\n    const resetQueue = {};\n    for (const i of this._history) {\n      if (from && i.belongsTo(from)) {\n        skip = false;\n      }\n      if (!skip && !resetQueue[i.uid]) {\n        resetQueue[i.uid] = i;\n      }\n    } // Nothing is found, at least try to reset.\n\n    for (const id of Object.keys(resetQueue)) {\n      if (await resetQueue[id].resetFocus()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nclass DeloserHistory {\n  constructor(tabster) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    this._history = [];\n    this._tabster = tabster;\n  }\n  dispose() {\n    this._history = [];\n  }\n  process(element) {\n    var _a;\n    const ctx = RootAPI.getTabsterContext(this._tabster, element);\n    const rootUId = ctx && ctx.root.uid;\n    const deloser = DeloserAPI.getDeloser(this._tabster, element);\n    if (!rootUId || !deloser) {\n      return undefined;\n    }\n    const historyByRoot = this.make(rootUId, () => new DeloserHistoryByRoot(this._tabster, rootUId));\n    if (!ctx || !ctx.modalizer || ((_a = ctx.modalizer) === null || _a === void 0 ? void 0 : _a.isActive())) {\n      historyByRoot.unshiftToDeloser(deloser, element);\n    }\n    return deloser;\n  }\n  make(rootUId, createInstance) {\n    let historyByRoot;\n    for (let i = 0; i < this._history.length; i++) {\n      const hbr = this._history[i];\n      if (hbr.rootUId === rootUId) {\n        historyByRoot = hbr;\n        this._history.splice(i, 1);\n        break;\n      }\n    }\n    if (!historyByRoot) {\n      historyByRoot = createInstance();\n    }\n    this._history.unshift(historyByRoot);\n    this._history.splice(_containerHistoryLength, this._history.length - _containerHistoryLength);\n    return historyByRoot;\n  }\n  removeDeloser(deloser) {\n    this._history.forEach(i => {\n      i.removeDeloser(deloser);\n    });\n    this._history = this._history.filter(i => i.getLength() > 0);\n  }\n  async focusAvailable(from) {\n    let skip = !!from;\n    for (const h of this._history) {\n      if (from && h.hasDeloser(from)) {\n        skip = false;\n      }\n      if (!skip && (await h.focusAvailable(from))) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async resetFocus(from) {\n    let skip = !!from;\n    for (const h of this._history) {\n      if (from && h.hasDeloser(from)) {\n        skip = false;\n      }\n      if (!skip && (await h.resetFocus(from))) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction _setInformativeStyle$2(weakElement, remove, isActive, snapshotIndex) {\n  if (process.env.NODE_ENV === 'development') {\n    const element = weakElement.get();\n    if (element) {\n      if (remove) {\n        element.style.removeProperty(\"--tabster-deloser\");\n      } else {\n        element.style.setProperty(\"--tabster-deloser\", (isActive ? \"active\" : \"inactive\") + \",\" + (\"snapshot-\" + snapshotIndex));\n      }\n    }\n  }\n}\nfunction buildElementSelector(element, withClass, withIndex) {\n  const selector = [];\n  const escapeRegExp = /(:|\\.|\\[|\\]|,|=|@)/g;\n  const escapeReplaceValue = \"\\\\$1\";\n  if (element.id) {\n    selector.push(\"#\" + element.id.replace(escapeRegExp, escapeReplaceValue));\n  }\n  if (withClass !== false && element.className) {\n    element.className.split(\" \").forEach(cls => {\n      cls = cls.trim();\n      if (cls) {\n        selector.push(\".\" + cls.replace(escapeRegExp, escapeReplaceValue));\n      }\n    });\n  }\n  let index = 0;\n  let el;\n  if (withIndex !== false && selector.length === 0) {\n    el = element;\n    while (el) {\n      index++;\n      el = el.previousElementSibling;\n    }\n    selector.unshift(\":nth-child(\" + index + \")\");\n  }\n  selector.unshift(element.tagName.toLowerCase());\n  return selector.join(\"\");\n}\nfunction buildSelector(element) {\n  if (!documentContains(element.ownerDocument, element)) {\n    return undefined;\n  }\n  const selector = [buildElementSelector(element)];\n  let el = element.parentElement;\n  while (el) {\n    const isBody = el.tagName === \"BODY\";\n    selector.unshift(buildElementSelector(el, false, !isBody));\n    if (isBody) {\n      break;\n    }\n    el = el.parentElement;\n  }\n  return selector.join(\" \");\n}\nclass Deloser extends TabsterPart {\n  constructor(tabster, element, onDispose, props) {\n    super(tabster, element, props);\n    this._isActive = false;\n    this._history = [[]];\n    this._snapshotIndex = 0;\n    this.isActive = () => {\n      return this._isActive;\n    };\n    this.setSnapshot = index => {\n      this._snapshotIndex = index;\n      if (this._history.length > index + 1) {\n        this._history.splice(index + 1, this._history.length - index - 1);\n      }\n      if (!this._history[index]) {\n        this._history[index] = [];\n      }\n      if (process.env.NODE_ENV === 'development') {\n        _setInformativeStyle$2(this._element, false, this._isActive, this._snapshotIndex);\n      }\n    };\n    this.focusFirst = () => {\n      const e = this._element.get();\n      return !!e && this._tabster.focusedElement.focusFirst({\n        container: e\n      });\n    };\n    this.focusDefault = () => {\n      const e = this._element.get();\n      return !!e && this._tabster.focusedElement.focusDefault(e);\n    };\n    this.resetFocus = () => {\n      const e = this._element.get();\n      return !!e && this._tabster.focusedElement.resetFocus(e);\n    };\n    this.clearHistory = preserveExisting => {\n      const element = this._element.get();\n      if (!element) {\n        this._history[this._snapshotIndex] = [];\n        return;\n      }\n      this._history[this._snapshotIndex] = this._history[this._snapshotIndex].filter(we => {\n        const e = we.get();\n        return e && preserveExisting ? element.contains(e) : false;\n      });\n    };\n    this.uid = getElementUId(tabster.getWindow, element);\n    this._onDispose = onDispose;\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$2(this._element, false, this._isActive, this._snapshotIndex);\n    }\n  }\n  dispose() {\n    this._remove();\n    this._onDispose(this);\n    this._isActive = false;\n    this._snapshotIndex = 0;\n    this._props = {};\n    this._history = [];\n  }\n  setActive(active) {\n    this._isActive = active;\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$2(this._element, false, this._isActive, this._snapshotIndex);\n    }\n  }\n  getActions() {\n    return {\n      focusDefault: this.focusDefault,\n      focusFirst: this.focusFirst,\n      resetFocus: this.resetFocus,\n      clearHistory: this.clearHistory,\n      setSnapshot: this.setSnapshot,\n      isActive: this.isActive\n    };\n  }\n  unshift(element) {\n    let cur = this._history[this._snapshotIndex];\n    cur = this._history[this._snapshotIndex] = cur.filter(we => {\n      const e = we.get();\n      return e && e !== element;\n    });\n    cur.unshift(new WeakHTMLElement(this._tabster.getWindow, element, buildSelector(element)));\n    while (cur.length > _containerHistoryLength) {\n      cur.pop();\n    }\n  }\n  findAvailable() {\n    const element = this._element.get();\n    if (!element || !this._tabster.focusable.isVisible(element)) {\n      return null;\n    }\n    let restoreFocusOrder = this._props.restoreFocusOrder;\n    let available = null;\n    const ctx = RootAPI.getTabsterContext(this._tabster, element);\n    if (!ctx) {\n      return null;\n    }\n    const root = ctx.root;\n    const rootElement = root.getElement();\n    if (!rootElement) {\n      return null;\n    }\n    if (restoreFocusOrder === undefined) {\n      restoreFocusOrder = root.getProps().restoreFocusOrder;\n    }\n    if (restoreFocusOrder === RestoreFocusOrders.RootDefault) {\n      available = this._tabster.focusable.findDefault({\n        container: rootElement\n      });\n    }\n    if (!available && restoreFocusOrder === RestoreFocusOrders.RootFirst) {\n      available = this._findFirst(rootElement);\n    }\n    if (available) {\n      return available;\n    }\n    const availableInHistory = this._findInHistory();\n    const availableDefault = this._tabster.focusable.findDefault({\n      container: element\n    });\n    const availableFirst = this._findFirst(element);\n    if (availableInHistory && restoreFocusOrder === RestoreFocusOrders.History) {\n      return availableInHistory;\n    }\n    if (availableDefault && restoreFocusOrder === RestoreFocusOrders.DeloserDefault) {\n      return availableDefault;\n    }\n    if (availableFirst && restoreFocusOrder === RestoreFocusOrders.DeloserFirst) {\n      return availableFirst;\n    }\n    return availableDefault || availableInHistory || availableFirst || null;\n  }\n  customFocusLostHandler(element) {\n    return triggerEvent(element, DeloserEventName, this.getActions());\n  }\n  _findInHistory() {\n    const cur = this._history[this._snapshotIndex].slice(0);\n    this.clearHistory(true);\n    for (let i = 0; i < cur.length; i++) {\n      const we = cur[i];\n      const e = we.get();\n      const element = this._element.get();\n      if (e && element && element.contains(e)) {\n        if (this._tabster.focusable.isFocusable(e)) {\n          return e;\n        }\n      } else if (!this._props.noSelectorCheck) {\n        // Element is not in the DOM, try to locate the node by it's\n        // selector. This might return not exactly the right node,\n        // but it would be easily fixable by having more detailed selectors.\n        const selector = we.getData();\n        if (selector && element) {\n          let els;\n          try {\n            els = element.ownerDocument.querySelectorAll(selector);\n          } catch (e) {\n            if (process.env.NODE_ENV === 'development') {\n              // This should never happen, unless there is some bug in buildElementSelector().\n              console.error(`Failed to querySelectorAll('${selector}')`);\n            }\n            continue;\n          }\n          for (let i = 0; i < els.length; i++) {\n            const el = els[i];\n            if (el && this._tabster.focusable.isFocusable(el)) {\n              return el;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n  _findFirst(element) {\n    if (this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n      const first = this._tabster.focusable.findFirst({\n        container: element\n      });\n      if (first) {\n        return first;\n      }\n    }\n    return null;\n  }\n  _remove() {\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$2(this._element, true);\n    }\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nclass DeloserAPI {\n  constructor(tabster, props) {\n    /**\r\n     * Tracks if focus is inside a deloser\r\n     */\n    this._inDeloser = false;\n    this._isRestoringFocus = false;\n    this._isPaused = false;\n    this._init = () => {\n      this._initTimer = undefined;\n      this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n    this._onFocus = e => {\n      if (this._restoreFocusTimer) {\n        this._win().clearTimeout(this._restoreFocusTimer);\n        this._restoreFocusTimer = undefined;\n      }\n      if (!e) {\n        this._scheduleRestoreFocus();\n        return;\n      }\n      const deloser = this._history.process(e);\n      if (deloser) {\n        this._activate(deloser);\n      } else {\n        this._deactivate();\n      }\n    };\n    this._onDeloserDispose = deloser => {\n      this._history.removeDeloser(deloser);\n      if (deloser.isActive()) {\n        this._scheduleRestoreFocus();\n      }\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._history = new DeloserHistory(tabster);\n    this._initTimer = this._win().setTimeout(this._init, 0);\n    const autoDeloser = props === null || props === void 0 ? void 0 : props.autoDeloser;\n    if (autoDeloser) {\n      this._autoDeloser = autoDeloser;\n    }\n  }\n  dispose() {\n    const win = this._win();\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    if (this._restoreFocusTimer) {\n      win.clearTimeout(this._restoreFocusTimer);\n      this._restoreFocusTimer = undefined;\n    }\n    if (this._autoDeloserInstance) {\n      this._autoDeloserInstance.dispose();\n      delete this._autoDeloserInstance;\n      delete this._autoDeloser;\n    }\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    this._history.dispose();\n    delete this._curDeloser;\n  }\n  createDeloser(element, props) {\n    var _a;\n    if (process.env.NODE_ENV === 'development') ;\n    const deloser = new Deloser(this._tabster, element, this._onDeloserDispose, props);\n    if (element.contains((_a = this._tabster.focusedElement.getFocusedElement()) !== null && _a !== void 0 ? _a : null)) {\n      this._activate(deloser);\n    }\n    return deloser;\n  }\n  getActions(element) {\n    for (let e = element; e; e = e.parentElement) {\n      const tabsterOnElement = getTabsterOnElement(this._tabster, e);\n      if (tabsterOnElement && tabsterOnElement.deloser) {\n        return tabsterOnElement.deloser.getActions();\n      }\n    }\n    return undefined;\n  }\n  pause() {\n    this._isPaused = true;\n    if (this._restoreFocusTimer) {\n      this._win().clearTimeout(this._restoreFocusTimer);\n      this._restoreFocusTimer = undefined;\n    }\n  }\n  resume(restore) {\n    this._isPaused = false;\n    if (restore) {\n      this._scheduleRestoreFocus();\n    }\n  }\n  /**\r\n   * Activates and sets the current deloser\r\n   */\n\n  _activate(deloser) {\n    const curDeloser = this._curDeloser;\n    if (curDeloser !== deloser) {\n      this._inDeloser = true;\n      curDeloser === null || curDeloser === void 0 ? void 0 : curDeloser.setActive(false);\n      deloser.setActive(true);\n      this._curDeloser = deloser;\n    }\n  }\n  /**\r\n   * Called when focus should no longer be in a deloser\r\n   */\n\n  _deactivate() {\n    var _a;\n    this._inDeloser = false;\n    (_a = this._curDeloser) === null || _a === void 0 ? void 0 : _a.setActive(false);\n    this._curDeloser = undefined;\n  }\n  _scheduleRestoreFocus(force) {\n    if (this._isPaused || this._isRestoringFocus) {\n      return;\n    }\n    const restoreFocus = async () => {\n      this._restoreFocusTimer = undefined;\n      const lastFocused = this._tabster.focusedElement.getLastFocusedElement();\n      if (!force && (this._isRestoringFocus || !this._inDeloser || !!(lastFocused === null || lastFocused === void 0 ? void 0 : lastFocused.offsetParent))) {\n        return;\n      }\n      const curDeloser = this._curDeloser;\n      if (curDeloser) {\n        if (lastFocused && curDeloser.customFocusLostHandler(lastFocused)) {\n          return;\n        }\n        const el = curDeloser.findAvailable();\n        if (el && this._tabster.focusedElement.focus(el)) {\n          return;\n        }\n      }\n      this._deactivate();\n      this._isRestoringFocus = true;\n      if (!(await this._history.focusAvailable(null))) {\n        await this._history.resetFocus(null);\n      }\n      this._isRestoringFocus = false;\n    };\n    if (force) {\n      restoreFocus();\n    } else {\n      this._restoreFocusTimer = this._win().setTimeout(restoreFocus, 100);\n    }\n  }\n  static getDeloser(tabster, element) {\n    var _a;\n    for (let e = element; e; e = e.parentElement) {\n      const tabsterOnElement = getTabsterOnElement(tabster, e);\n      if (tabsterOnElement && tabsterOnElement.deloser) {\n        return tabsterOnElement.deloser;\n      }\n    }\n    const deloserAPI = tabster.deloser && tabster.deloser;\n    if (deloserAPI) {\n      if (deloserAPI._autoDeloserInstance) {\n        return deloserAPI._autoDeloserInstance;\n      }\n      const autoDeloserProps = deloserAPI._autoDeloser;\n      if (!deloserAPI._autoDeloserInstance && autoDeloserProps) {\n        const body = (_a = element.ownerDocument) === null || _a === void 0 ? void 0 : _a.body;\n        if (body) {\n          deloserAPI._autoDeloserInstance = new Deloser(tabster, body, tabster.deloser._onDeloserDispose, autoDeloserProps);\n        }\n      }\n      return deloserAPI._autoDeloserInstance;\n    }\n    return undefined;\n  }\n  static getHistory(instance) {\n    return instance._history;\n  }\n  static forceRestoreFocus(instance) {\n    instance._scheduleRestoreFocus(true);\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst _transactionTimeout = 1500;\nconst _pingTimeout = 3000;\nconst _targetIdUp = \"up\";\nconst CrossOriginTransactionTypes = {\n  Bootstrap: 1,\n  FocusElement: 2,\n  State: 3,\n  GetElement: 4,\n  RestoreFocusInDeloser: 5,\n  Ping: 6\n};\nclass CrossOriginDeloserItem extends DeloserItemBase {\n  constructor(tabster, deloser, trasactions) {\n    super();\n    this._deloser = deloser;\n    this._transactions = trasactions;\n  }\n  belongsTo(deloser) {\n    return deloser.deloserUId === this._deloser.deloserUId;\n  }\n  async focusAvailable() {\n    const data = {\n      ...this._deloser,\n      reset: false\n    };\n    return this._transactions.beginTransaction(RestoreFocusInDeloserTransaction, data).then(value => !!value);\n  }\n  async resetFocus() {\n    const data = {\n      ...this._deloser,\n      reset: true\n    };\n    return this._transactions.beginTransaction(RestoreFocusInDeloserTransaction, data).then(value => !!value);\n  }\n}\nclass CrossOriginDeloserHistoryByRoot extends DeloserHistoryByRootBase {\n  constructor(tabster, rootUId, transactions) {\n    super(tabster, rootUId);\n    this._transactions = transactions;\n  }\n  unshift(deloser) {\n    let item;\n    for (let i = 0; i < this._history.length; i++) {\n      if (this._history[i].belongsTo(deloser)) {\n        item = this._history[i];\n        this._history.splice(i, 1);\n        break;\n      }\n    }\n    if (!item) {\n      item = new CrossOriginDeloserItem(this._tabster, deloser, this._transactions);\n    }\n    this._history.unshift(item);\n    this._history.splice(10, this._history.length - 10);\n  }\n  async focusAvailable() {\n    for (const i of this._history) {\n      if (await i.focusAvailable()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  async resetFocus() {\n    for (const i of this._history) {\n      if (await i.resetFocus()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nclass CrossOriginTransaction {\n  constructor(tabster, getOwner, knownTargets, value, timeout, sentTo, targetId, sendUp) {\n    this._inProgress = {};\n    this._isDone = false;\n    this._isSelfResponding = false;\n    this._sentCount = 0;\n    this.tabster = tabster;\n    this.owner = getOwner;\n    this.ownerId = getWindowUId(getOwner());\n    this.id = getUId(getOwner());\n    this.beginData = value;\n    this._knownTargets = knownTargets;\n    this._sentTo = sentTo || {\n      [this.ownerId]: true\n    };\n    this.targetId = targetId;\n    this.sendUp = sendUp;\n    this.timeout = timeout;\n    this._promise = new (getPromise(getOwner))((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n  getTargets(knownTargets) {\n    return this.targetId === _targetIdUp ? this.sendUp ? {\n      [_targetIdUp]: {\n        send: this.sendUp\n      }\n    } : null : this.targetId ? knownTargets[this.targetId] ? {\n      [this.targetId]: {\n        send: knownTargets[this.targetId].send\n      }\n    } : null : Object.keys(knownTargets).length === 0 && this.sendUp ? {\n      [_targetIdUp]: {\n        send: this.sendUp\n      }\n    } : Object.keys(knownTargets).length > 0 ? knownTargets : null;\n  }\n  begin(selfResponse) {\n    const targets = this.getTargets(this._knownTargets);\n    const sentTo = {\n      ...this._sentTo\n    };\n    if (targets) {\n      for (const id of Object.keys(targets)) {\n        sentTo[id] = true;\n      }\n    }\n    const data = {\n      transaction: this.id,\n      type: this.type,\n      isResponse: false,\n      timestamp: Date.now(),\n      owner: this.ownerId,\n      sentto: sentTo,\n      timeout: this.timeout,\n      beginData: this.beginData\n    };\n    if (this.targetId) {\n      data.target = this.targetId;\n    }\n    if (selfResponse) {\n      this._isSelfResponding = true;\n      selfResponse(data).then(value => {\n        this._isSelfResponding = false;\n        if (value !== undefined) {\n          if (!this.endData) {\n            this.endData = value;\n          }\n        }\n        if (this.endData || this._sentCount === 0) {\n          this.end();\n        }\n      });\n    }\n    if (targets) {\n      for (const id of Object.keys(targets)) {\n        if (!(id in this._sentTo)) {\n          this._send(targets[id].send, id, data);\n        }\n      }\n    }\n    if (this._sentCount === 0 && !this._isSelfResponding) {\n      this.end();\n    }\n    return this._promise;\n  }\n  _send(send, targetId, data) {\n    if (this._inProgress[targetId] === undefined) {\n      this._inProgress[targetId] = true;\n      this._sentCount++;\n      send(data);\n    }\n  }\n  end(error) {\n    if (this._isDone) {\n      return;\n    }\n    this._isDone = true;\n    if (this.endData === undefined && error) {\n      if (this._reject) {\n        this._reject(error);\n      }\n    } else if (this._resolve) {\n      this._resolve(this.endData);\n    }\n  }\n  onResponse(data) {\n    const endData = data.endData;\n    if (endData !== undefined && !this.endData) {\n      this.endData = endData;\n    }\n    const inProgressId = data.target === _targetIdUp ? _targetIdUp : data.owner;\n    if (this._inProgress[inProgressId]) {\n      this._inProgress[inProgressId] = false;\n      this._sentCount--;\n      if (this.endData || this._sentCount === 0 && !this._isSelfResponding) {\n        this.end();\n      }\n    }\n  }\n}\nclass BootstrapTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.Bootstrap;\n  }\n  static shouldForward() {\n    return false;\n  }\n  static async makeResponse(tabster) {\n    return {\n      isNavigatingWithKeyboard: tabster.keyboardNavigation.isNavigatingWithKeyboard()\n    };\n  }\n}\nclass FocusElementTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.FocusElement;\n  }\n  static shouldSelfRespond() {\n    return true;\n  }\n  static shouldForward(tabster, data, getOwner) {\n    const el = GetElementTransaction.findElement(tabster, getOwner, data.beginData);\n    return !el || !tabster.focusable.isFocusable(el);\n  }\n  static async makeResponse(tabster, data, getOwner, ownerId, transactions, forwardResult) {\n    const el = GetElementTransaction.findElement(tabster, getOwner, data.beginData);\n    return !!el && tabster.focusedElement.focus(el, true) || !!(await forwardResult);\n  }\n}\nconst CrossOriginStates = {\n  Focused: 1,\n  Blurred: 2,\n  Observed: 3,\n  DeadWindow: 4,\n  KeyboardNavigation: 5,\n  Outline: 6\n};\nclass StateTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.State;\n  }\n  static shouldSelfRespond(tabster, data) {\n    return data.state !== CrossOriginStates.DeadWindow && data.state !== CrossOriginStates.KeyboardNavigation;\n  }\n  static async makeResponse(tabster, data, getOwner, ownerId, transactions, forwardResult, isSelfResponse) {\n    const timestamp = data.timestamp;\n    const beginData = data.beginData;\n    if (timestamp && beginData) {\n      switch (beginData.state) {\n        case CrossOriginStates.Focused:\n          return StateTransaction._makeFocusedResponse(tabster, timestamp, beginData, transactions, isSelfResponse);\n        case CrossOriginStates.Blurred:\n          return StateTransaction._makeBlurredResponse(tabster, timestamp, beginData, transactions.ctx);\n        case CrossOriginStates.Observed:\n          return StateTransaction._makeObservedResponse(tabster, beginData);\n        case CrossOriginStates.DeadWindow:\n          return StateTransaction._makeDeadWindowResponse(tabster, beginData, transactions, forwardResult);\n        case CrossOriginStates.KeyboardNavigation:\n          return StateTransaction._makeKeyboardNavigationResponse(tabster, transactions.ctx, beginData.isNavigatingWithKeyboard);\n        case CrossOriginStates.Outline:\n          return StateTransaction._makeOutlineResponse(tabster, transactions.ctx, beginData.outline);\n      }\n    }\n    return true;\n  }\n  static createElement(tabster, beginData) {\n    return beginData.uid ? new CrossOriginElement(tabster, beginData.uid, beginData.ownerUId, beginData.id, beginData.rootUId, beginData.observedName, beginData.observedDetails) : null;\n  }\n  static async _makeFocusedResponse(tabster, timestamp, beginData, transactions, isSelfResponse) {\n    const element = StateTransaction.createElement(tabster, beginData);\n    if (beginData && beginData.ownerUId && element) {\n      transactions.ctx.focusOwner = beginData.ownerUId;\n      transactions.ctx.focusOwnerTimestamp = timestamp;\n      if (!isSelfResponse && beginData.rootUId && beginData.deloserUId) {\n        const deloserAPI = tabster.deloser;\n        if (deloserAPI) {\n          const history = DeloserAPI.getHistory(deloserAPI);\n          const deloser = {\n            ownerUId: beginData.ownerUId,\n            deloserUId: beginData.deloserUId,\n            rootUId: beginData.rootUId\n          };\n          const historyItem = history.make(beginData.rootUId, () => new CrossOriginDeloserHistoryByRoot(tabster, deloser.rootUId, transactions));\n          historyItem.unshift(deloser);\n        }\n      }\n      CrossOriginFocusedElementState.setVal(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      tabster.crossOrigin.focusedElement, element, {\n        isFocusedProgrammatically: beginData.isFocusedProgrammatically\n      });\n    }\n    return true;\n  }\n  static async _makeBlurredResponse(tabster, timestamp, beginData, context) {\n    if (beginData && (beginData.ownerUId === context.focusOwner || beginData.force) && (!context.focusOwnerTimestamp || context.focusOwnerTimestamp < timestamp)) {\n      CrossOriginFocusedElementState.setVal(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      tabster.crossOrigin.focusedElement, undefined, {});\n    }\n    return true;\n  }\n  static async _makeObservedResponse(tabster, beginData) {\n    const name = beginData.observedName;\n    const element = StateTransaction.createElement(tabster, beginData);\n    if (name && element) {\n      CrossOriginObservedElementState.trigger(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      tabster.crossOrigin.observedElement, element, {\n        names: [name],\n        details: beginData.observedDetails\n      });\n    }\n    return true;\n  }\n  static async _makeDeadWindowResponse(tabster, beginData, transactions, forwardResult) {\n    const deadUId = beginData && beginData.ownerUId;\n    if (deadUId) {\n      transactions.removeTarget(deadUId);\n    }\n    return forwardResult.then(() => {\n      if (deadUId === transactions.ctx.focusOwner) {\n        const deloserAPI = tabster.deloser;\n        if (deloserAPI) {\n          DeloserAPI.forceRestoreFocus(deloserAPI);\n        }\n      }\n      return true;\n    });\n  }\n  static async _makeKeyboardNavigationResponse(tabster, context, isNavigatingWithKeyboard) {\n    if (isNavigatingWithKeyboard !== undefined && tabster.keyboardNavigation.isNavigatingWithKeyboard() !== isNavigatingWithKeyboard) {\n      context.ignoreKeyboardNavigationStateUpdate = true;\n      KeyboardNavigationState.setVal(tabster.keyboardNavigation, isNavigatingWithKeyboard);\n      context.ignoreKeyboardNavigationStateUpdate = false;\n    }\n    return true;\n  }\n  static async _makeOutlineResponse(tabster, context, props) {\n    if (context.origOutlineSetup) {\n      context.origOutlineSetup.call(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      tabster.outline, props);\n    }\n    return true;\n  }\n}\nclass GetElementTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.GetElement;\n  }\n  static shouldSelfRespond() {\n    return true;\n  }\n  static findElement(tabster, getOwner, data) {\n    let element;\n    if (data && (!data.ownerId || data.ownerId === getWindowUId(getOwner()))) {\n      if (data.id) {\n        element = getOwner().document.getElementById(data.id);\n        if (element && data.rootId) {\n          const ctx = RootAPI.getTabsterContext(tabster, element);\n          if (!ctx || ctx.root.uid !== data.rootId) {\n            return null;\n          }\n        }\n      } else if (data.uid) {\n        const ref = getInstanceContext(getOwner).elementByUId[data.uid];\n        element = ref && ref.get();\n      } else if (data.observedName) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        element = tabster.observedElement.getElement(data.observedName);\n      }\n    }\n    return element || null;\n  }\n  static getElementData(tabster, element, getOwner, context, ownerUId) {\n    const deloser = DeloserAPI.getDeloser(tabster, element);\n    const ctx = RootAPI.getTabsterContext(tabster, element);\n    const tabsterOnElement = getTabsterOnElement(tabster, element);\n    const observed = tabsterOnElement && tabsterOnElement.observed;\n    return {\n      uid: getElementUId(getOwner, element),\n      ownerUId,\n      id: element.id || undefined,\n      rootUId: ctx ? ctx.root.uid : undefined,\n      deloserUId: deloser ? getDeloserUID(getOwner, context, deloser) : undefined,\n      observedName: observed && observed.names && observed.names[0],\n      observedDetails: observed && observed.details\n    };\n  }\n  static async makeResponse(tabster, data, getOwner, ownerUId, transactions, forwardResult) {\n    const beginData = data.beginData;\n    let element;\n    let dataOut;\n    if (beginData === undefined) {\n      element = tabster.focusedElement.getFocusedElement();\n    } else if (beginData) {\n      element = GetElementTransaction.findElement(tabster, getOwner, beginData) || undefined;\n    }\n    if (!element && beginData) {\n      const name = beginData.observedName;\n      const timeout = data.timeout;\n      const accessibility = beginData.accessibility;\n      if (name && timeout) {\n        const e = await new (getPromise(getOwner))(resolve => {\n          let isWaitElementResolved = false;\n          let isForwardResolved = false;\n          let isResolved = false; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          tabster.observedElement.waitElement(name, timeout, accessibility).result.then(value => {\n            isWaitElementResolved = true;\n            if (!isResolved && (value || isForwardResolved)) {\n              isResolved = true;\n              resolve({\n                element: value\n              });\n            }\n          });\n          forwardResult.then(value => {\n            isForwardResolved = true;\n            if (!isResolved && (value || isWaitElementResolved)) {\n              isResolved = true;\n              resolve({\n                crossOrigin: value\n              });\n            }\n          });\n        });\n        if (e.element) {\n          element = e.element;\n        } else if (e.crossOrigin) {\n          dataOut = e.crossOrigin;\n        }\n      }\n    }\n    return element ? GetElementTransaction.getElementData(tabster, element, getOwner, transactions.ctx, ownerUId) : dataOut;\n  }\n}\nclass RestoreFocusInDeloserTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.RestoreFocusInDeloser;\n  }\n  static async makeResponse(tabster, data, getOwner, ownerId, transactions, forwardResult) {\n    const forwardRet = await forwardResult;\n    const begin = !forwardRet && data.beginData;\n    const uid = begin && begin.deloserUId;\n    const deloser = uid && transactions.ctx.deloserByUId[uid];\n    const deloserAPI = tabster.deloser;\n    if (begin && deloser && deloserAPI) {\n      const history = DeloserAPI.getHistory(deloserAPI);\n      return begin.reset ? history.resetFocus(deloser) : history.focusAvailable(deloser);\n    }\n    return !!forwardRet;\n  }\n}\nclass PingTransaction extends CrossOriginTransaction {\n  constructor() {\n    super(...arguments);\n    this.type = CrossOriginTransactionTypes.Ping;\n  }\n  static shouldForward() {\n    return false;\n  }\n  static async makeResponse() {\n    return true;\n  }\n}\nclass CrossOriginTransactions {\n  constructor(tabster, getOwner, context) {\n    this._knownTargets = {};\n    this._transactions = {};\n    this._isDefaultSendUp = false;\n    this.isSetUp = false;\n    this._onMessage = e => {\n      if (e.data.owner === this._ownerUId || !this._tabster) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const data = e.data;\n      let transactionId;\n      if (!data || !(transactionId = data.transaction) || !data.type || !data.timestamp || !data.owner || !data.sentto) {\n        return;\n      }\n      let knownTarget = this._knownTargets[data.owner];\n      if (!knownTarget && e.send && data.owner !== this._ownerUId) {\n        knownTarget = this._knownTargets[data.owner] = {\n          send: e.send\n        };\n      }\n      if (knownTarget) {\n        knownTarget.last = Date.now();\n      }\n      if (data.isResponse) {\n        const t = this._transactions[transactionId];\n        if (t && t.transaction && t.transaction.type === data.type) {\n          t.transaction.onResponse(data);\n        }\n      } else {\n        const Transaction = this._getTransactionClass(data.type);\n        const forwardResult = this.forwardTransaction(data);\n        if (Transaction && e.send) {\n          Transaction.makeResponse(this._tabster, data, this._owner, this._ownerUId, this, forwardResult, false).then(r => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const response = {\n              transaction: data.transaction,\n              type: data.type,\n              isResponse: true,\n              timestamp: Date.now(),\n              owner: this._ownerUId,\n              timeout: data.timeout,\n              sentto: {},\n              target: data.target === _targetIdUp ? _targetIdUp : data.owner,\n              endData: r\n            };\n            e.send(response);\n          });\n        }\n      }\n    };\n    this._onPageHide = () => {\n      this._dead();\n    };\n    this._onBrowserMessage = e => {\n      if (e.source === this._owner()) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const send = data => {\n        if (e.source && e.source.postMessage) {\n          // eslint-disable-next-line @typescript-eslint/ban-types\n          e.source.postMessage(JSON.stringify(data), \"*\");\n        }\n      };\n      try {\n        this._onMessage({\n          data: JSON.parse(e.data),\n          send\n        });\n      } catch (e) {\n        /* Ignore */\n      }\n    };\n    this._tabster = tabster;\n    this._owner = getOwner;\n    this._ownerUId = getWindowUId(getOwner());\n    this.ctx = context;\n  }\n  setup(sendUp) {\n    if (this.isSetUp) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error(\"CrossOrigin is already set up.\");\n      }\n    } else {\n      this.isSetUp = true;\n      this.setSendUp(sendUp);\n      this._owner().addEventListener(\"pagehide\", this._onPageHide);\n      this._ping();\n    }\n    return this._onMessage;\n  }\n  setSendUp(sendUp) {\n    if (!this.isSetUp) {\n      throw new Error(\"CrossOrigin is not set up.\");\n    }\n    this.sendUp = sendUp || undefined;\n    const owner = this._owner();\n    if (sendUp === undefined) {\n      if (!this._isDefaultSendUp) {\n        if (owner.document) {\n          this._isDefaultSendUp = true;\n          if (owner.parent && owner.parent !== owner && owner.parent.postMessage) {\n            this.sendUp = (\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data) => {\n              owner.parent.postMessage(JSON.stringify(data), \"*\");\n            };\n          }\n          owner.addEventListener(\"message\", this._onBrowserMessage);\n        }\n      }\n    } else if (this._isDefaultSendUp) {\n      owner.removeEventListener(\"message\", this._onBrowserMessage);\n      this._isDefaultSendUp = false;\n    }\n    return this._onMessage;\n  }\n  async dispose() {\n    const owner = this._owner();\n    if (this._pingTimer) {\n      owner.clearTimeout(this._pingTimer);\n      this._pingTimer = undefined;\n    }\n    owner.removeEventListener(\"message\", this._onBrowserMessage);\n    owner.removeEventListener(\"pagehide\", this._onPageHide);\n    await this._dead();\n    delete this._deadPromise;\n    for (const id of Object.keys(this._transactions)) {\n      const t = this._transactions[id];\n      if (t.timer) {\n        owner.clearTimeout(t.timer);\n        delete t.timer;\n      }\n      t.transaction.end();\n    }\n    this._knownTargets = {};\n    delete this.sendUp;\n  }\n  beginTransaction(Transaction, value, timeout, sentTo, targetId, withReject) {\n    if (!this._owner) {\n      return getPromise(this._owner).reject();\n    }\n    const transaction = new Transaction(this._tabster, this._owner, this._knownTargets, value, timeout, sentTo, targetId, this.sendUp);\n    let selfResponse;\n    if (Transaction.shouldSelfRespond && Transaction.shouldSelfRespond(this._tabster, value, this._owner, this._ownerUId)) {\n      selfResponse = data => {\n        return Transaction.makeResponse(this._tabster, data, this._owner, this._ownerUId, this, getPromise(this._owner).resolve(undefined), true);\n      };\n    }\n    return this._beginTransaction(transaction, timeout, selfResponse, withReject);\n  }\n  removeTarget(uid) {\n    delete this._knownTargets[uid];\n  }\n  _beginTransaction(transaction, timeout, selfResponse, withReject) {\n    const owner = this._owner();\n    const wrapper = {\n      transaction,\n      timer: owner.setTimeout(() => {\n        delete wrapper.timer;\n        transaction.end(\"Cross origin transaction timed out.\");\n      }, _transactionTimeout + (timeout || 0))\n    };\n    this._transactions[transaction.id] = wrapper;\n    const ret = transaction.begin(selfResponse);\n    ret.catch(() => {\n      /**/\n    }).finally(() => {\n      if (wrapper.timer) {\n        owner.clearTimeout(wrapper.timer);\n      }\n      delete this._transactions[transaction.id];\n    });\n    return ret.then(value => value, withReject ? undefined : () => undefined);\n  }\n  forwardTransaction(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    const owner = this._owner;\n    let targetId = data.target;\n    if (targetId === this._ownerUId) {\n      return getPromise(owner).resolve();\n    }\n    const Transaction = this._getTransactionClass(data.type);\n    if (Transaction) {\n      if (Transaction.shouldForward === undefined || Transaction.shouldForward(this._tabster, data, owner, this._ownerUId)) {\n        const sentTo = data.sentto;\n        if (targetId === _targetIdUp) {\n          targetId = undefined;\n          sentTo[this._ownerUId] = true;\n        }\n        delete sentTo[_targetIdUp];\n        return this._beginTransaction(new Transaction(this._tabster, owner, this._knownTargets, data.beginData, data.timeout, sentTo, targetId, this.sendUp), data.timeout);\n      } else {\n        return getPromise(owner).resolve();\n      }\n    }\n    return getPromise(owner).reject(`Unknown transaction type ${data.type}`);\n  }\n  _getTransactionClass(type // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    switch (type) {\n      case CrossOriginTransactionTypes.Bootstrap:\n        return BootstrapTransaction;\n      case CrossOriginTransactionTypes.FocusElement:\n        return FocusElementTransaction;\n      case CrossOriginTransactionTypes.State:\n        return StateTransaction;\n      case CrossOriginTransactionTypes.GetElement:\n        return GetElementTransaction;\n      case CrossOriginTransactionTypes.RestoreFocusInDeloser:\n        return RestoreFocusInDeloserTransaction;\n      case CrossOriginTransactionTypes.Ping:\n        return PingTransaction;\n      default:\n        return null;\n    }\n  }\n  async _dead() {\n    if (!this._deadPromise && this.ctx.focusOwner === this._ownerUId) {\n      this._deadPromise = this.beginTransaction(StateTransaction, {\n        ownerUId: this._ownerUId,\n        state: CrossOriginStates.DeadWindow\n      });\n    }\n    if (this._deadPromise) {\n      await this._deadPromise;\n    }\n  }\n  async _ping() {\n    if (this._pingTimer) {\n      return;\n    }\n    let deadWindows;\n    const now = Date.now();\n    const targets = Object.keys(this._knownTargets).filter(uid => now - (this._knownTargets[uid].last || 0) > _pingTimeout);\n    if (this.sendUp) {\n      targets.push(_targetIdUp);\n    }\n    if (targets.length) {\n      await getPromise(this._owner).all(targets.map(uid => this.beginTransaction(PingTransaction, undefined, undefined, undefined, uid, true).then(() => true, () => {\n        if (uid !== _targetIdUp) {\n          if (!deadWindows) {\n            deadWindows = {};\n          }\n          deadWindows[uid] = true;\n          delete this._knownTargets[uid];\n        }\n        return false;\n      })));\n    }\n    if (deadWindows) {\n      const focused = await this.beginTransaction(GetElementTransaction, undefined);\n      if (!focused && this.ctx.focusOwner && this.ctx.focusOwner in deadWindows) {\n        await this.beginTransaction(StateTransaction, {\n          ownerUId: this._ownerUId,\n          state: CrossOriginStates.Blurred,\n          force: true\n        });\n        const deloserAPI = this._tabster.deloser;\n        if (deloserAPI) {\n          DeloserAPI.forceRestoreFocus(deloserAPI);\n        }\n      }\n    }\n    this._pingTimer = this._owner().setTimeout(() => {\n      this._pingTimer = undefined;\n      this._ping();\n    }, _pingTimeout);\n  }\n}\nclass CrossOriginElement {\n  constructor(tabster, uid, ownerId, id, rootId, observedName, observedDetails) {\n    this._tabster = tabster;\n    this.uid = uid;\n    this.ownerId = ownerId;\n    this.id = id;\n    this.rootId = rootId;\n    this.observedName = observedName;\n    this.observedDetails = observedDetails;\n  }\n  focus(noFocusedProgrammaticallyFlag, noAccessibleCheck) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tabster.crossOrigin.focusedElement.focus(this, noFocusedProgrammaticallyFlag, noAccessibleCheck);\n  }\n}\nclass CrossOriginFocusedElementState extends Subscribable {\n  constructor(transactions) {\n    super();\n    this._transactions = transactions;\n  }\n  async focus(element, noFocusedProgrammaticallyFlag, noAccessibleCheck) {\n    return this._focus({\n      uid: element.uid,\n      id: element.id,\n      rootId: element.rootId,\n      ownerId: element.ownerId,\n      observedName: element.observedName\n    }, noFocusedProgrammaticallyFlag, noAccessibleCheck);\n  }\n  async focusById(elementId, rootId, noFocusedProgrammaticallyFlag, noAccessibleCheck) {\n    return this._focus({\n      id: elementId,\n      rootId\n    }, noFocusedProgrammaticallyFlag, noAccessibleCheck);\n  }\n  async focusByObservedName(observedName, timeout, rootId, noFocusedProgrammaticallyFlag, noAccessibleCheck) {\n    return this._focus({\n      observedName,\n      rootId\n    }, noFocusedProgrammaticallyFlag, noAccessibleCheck, timeout);\n  }\n  async _focus(elementData, noFocusedProgrammaticallyFlag, noAccessibleCheck, timeout) {\n    return this._transactions.beginTransaction(FocusElementTransaction, {\n      ...elementData,\n      noFocusedProgrammaticallyFlag,\n      noAccessibleCheck\n    }, timeout).then(value => !!value);\n  }\n  static setVal(instance, val, details) {\n    instance.setVal(val, details);\n  }\n}\nclass CrossOriginObservedElementState extends Subscribable {\n  constructor(tabster, transactions) {\n    super();\n    this._lastRequestFocusId = 0;\n    this._tabster = tabster;\n    this._transactions = transactions;\n  }\n  async getElement(observedName, accessibility) {\n    return this.waitElement(observedName, 0, accessibility);\n  }\n  async waitElement(observedName, timeout, accessibility) {\n    return this._transactions.beginTransaction(GetElementTransaction, {\n      observedName,\n      accessibility\n    }, timeout).then(value => value ? StateTransaction.createElement(this._tabster, value) : null);\n  }\n  async requestFocus(observedName, timeout) {\n    const requestId = ++this._lastRequestFocusId;\n    return this.waitElement(observedName, timeout, ObservedElementAccesibilities.Focusable).then(element => this._lastRequestFocusId === requestId && element ?\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this._tabster.crossOrigin.focusedElement.focus(element, true) : false);\n  }\n  static trigger(instance, element, details) {\n    instance.trigger(element, details);\n  }\n}\nclass CrossOriginAPI {\n  constructor(tabster) {\n    this._init = () => {\n      this._initTimer = undefined;\n      const tabster = this._tabster;\n      tabster.keyboardNavigation.subscribe(this._onKeyboardNavigationStateChanged);\n      tabster.focusedElement.subscribe(this._onFocus); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n      tabster.observedElement.subscribe(this._onObserved);\n      if (!this._ctx.origOutlineSetup) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this._ctx.origOutlineSetup = tabster.outline.setup; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        tabster.outline.setup = this._outlineSetup;\n      }\n      this._transactions.beginTransaction(BootstrapTransaction, undefined, undefined, undefined, _targetIdUp).then(data => {\n        if (data && this._tabster.keyboardNavigation.isNavigatingWithKeyboard() !== data.isNavigatingWithKeyboard) {\n          this._ctx.ignoreKeyboardNavigationStateUpdate = true;\n          KeyboardNavigationState.setVal(this._tabster.keyboardNavigation, data.isNavigatingWithKeyboard);\n          this._ctx.ignoreKeyboardNavigationStateUpdate = false;\n        }\n      });\n    };\n    this._onKeyboardNavigationStateChanged = value => {\n      if (!this._ctx.ignoreKeyboardNavigationStateUpdate) {\n        this._transactions.beginTransaction(StateTransaction, {\n          state: CrossOriginStates.KeyboardNavigation,\n          ownerUId: getWindowUId(this._win()),\n          isNavigatingWithKeyboard: value\n        });\n      }\n    };\n    this._onFocus = element => {\n      const win = this._win();\n      const ownerUId = getWindowUId(win);\n      if (this._blurTimer) {\n        win.clearTimeout(this._blurTimer);\n        this._blurTimer = undefined;\n      }\n      if (element) {\n        this._transactions.beginTransaction(StateTransaction, {\n          ...GetElementTransaction.getElementData(this._tabster, element, this._win, this._ctx, ownerUId),\n          state: CrossOriginStates.Focused\n        });\n      } else {\n        this._blurTimer = win.setTimeout(() => {\n          this._blurTimer = undefined;\n          if (this._ctx.focusOwner && this._ctx.focusOwner === ownerUId) {\n            this._transactions.beginTransaction(GetElementTransaction, undefined).then(value => {\n              if (!value && this._ctx.focusOwner === ownerUId) {\n                this._transactions.beginTransaction(StateTransaction, {\n                  ownerUId,\n                  state: CrossOriginStates.Blurred,\n                  force: false\n                });\n              }\n            });\n          }\n        }, 0);\n      }\n    };\n    this._onObserved = (element, details) => {\n      var _a;\n      const d = GetElementTransaction.getElementData(this._tabster, element, this._win, this._ctx, getWindowUId(this._win()));\n      d.state = CrossOriginStates.Observed;\n      d.observedName = (_a = details.names) === null || _a === void 0 ? void 0 : _a[0];\n      d.observedDetails = details.details;\n      this._transactions.beginTransaction(StateTransaction, d);\n    };\n    this._outlineSetup = props => {\n      this._transactions.beginTransaction(StateTransaction, {\n        state: CrossOriginStates.Outline,\n        ownerUId: getWindowUId(this._win()),\n        outline: props\n      });\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._ctx = {\n      ignoreKeyboardNavigationStateUpdate: false,\n      deloserByUId: {}\n    };\n    this._transactions = new CrossOriginTransactions(tabster, this._win, this._ctx);\n    this.focusedElement = new CrossOriginFocusedElementState(this._transactions);\n    this.observedElement = new CrossOriginObservedElementState(tabster, this._transactions);\n  }\n  setup(sendUp) {\n    if (this.isSetUp()) {\n      return this._transactions.setSendUp(sendUp);\n    } else {\n      this._initTimer = this._win().setTimeout(this._init, 0);\n      return this._transactions.setup(sendUp);\n    }\n  }\n  isSetUp() {\n    return this._transactions.isSetUp;\n  }\n  dispose() {\n    var _a;\n    if (this._initTimer) {\n      this._win().clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    const tabster = this._tabster;\n    tabster.keyboardNavigation.unsubscribe(this._onKeyboardNavigationStateChanged);\n    tabster.focusedElement.unsubscribe(this._onFocus);\n    (_a = tabster.observedElement) === null || _a === void 0 ? void 0 : _a.unsubscribe(this._onObserved);\n    this._transactions.dispose();\n    this.focusedElement.dispose();\n    this.observedElement.dispose();\n    this._ctx.deloserByUId = {};\n  }\n}\nfunction getDeloserUID(getWindow, context, deloser) {\n  const deloserElement = deloser.getElement();\n  if (deloserElement) {\n    const uid = getElementUId(getWindow, deloserElement);\n    if (!context.deloserByUId[uid]) {\n      context.deloserByUId[uid] = deloser;\n    }\n    return uid;\n  }\n  return undefined;\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nconst _focusableSelector = /*#__PURE__*/[\"a[href]\", \"button:not([disabled])\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"*[tabindex]\", \"*[contenteditable]\"].join(\", \");\nclass FocusableAPI {\n  constructor(tabster, getWindow) {\n    this._tabster = tabster;\n    this._win = getWindow;\n  }\n  dispose() {\n    /**/\n  }\n  _getBody() {\n    const last = this._tabster.focusedElement.getLastFocusedElement();\n    if (last && last.ownerDocument) {\n      return last.ownerDocument.body;\n    }\n    return this._win().document.body;\n  }\n  getProps(element) {\n    const tabsterOnElement = getTabsterOnElement(this._tabster, element);\n    return tabsterOnElement && tabsterOnElement.focusable || {};\n  }\n  isFocusable(el, includeProgrammaticallyFocusable, noVisibleCheck, noAccessibleCheck) {\n    if (matchesSelector(el, _focusableSelector) && (includeProgrammaticallyFocusable || el.tabIndex !== -1)) {\n      return (noVisibleCheck || this.isVisible(el)) && (noAccessibleCheck || this.isAccessible(el));\n    }\n    return false;\n  }\n  isVisible(el) {\n    if (!el.ownerDocument) {\n      return false;\n    }\n    if (el.offsetParent === null && el.ownerDocument.body !== el) {\n      return false;\n    }\n    const win = el.ownerDocument.defaultView;\n    if (!win) {\n      return false;\n    }\n    const rect = el.ownerDocument.body.getBoundingClientRect();\n    if (rect.width === 0 && rect.height === 0) {\n      // This might happen, for example, if our <body> is in hidden <iframe>.\n      return false;\n    }\n    const computedStyle = win.getComputedStyle(el);\n    if (computedStyle.visibility === \"hidden\") {\n      return false;\n    }\n    return true;\n  }\n  isAccessible(el) {\n    var _a;\n    for (let e = el; e; e = e.parentElement) {\n      const tabsterOnElement = getTabsterOnElement(this._tabster, e);\n      if (this._isHidden(e)) {\n        return false;\n      }\n      const ignoreDisabled = (_a = tabsterOnElement === null || tabsterOnElement === void 0 ? void 0 : tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.ignoreAriaDisabled;\n      if (!ignoreDisabled && this._isDisabled(e)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _isDisabled(el) {\n    return el.hasAttribute(\"disabled\");\n  }\n  _isHidden(el) {\n    const attrVal = el.getAttribute(\"aria-hidden\");\n    if (attrVal && attrVal.toLowerCase() === \"true\") {\n      return true;\n    }\n    return false;\n  }\n  findFirst(options) {\n    return this.findElement({\n      container: this._getBody(),\n      ...options\n    });\n  }\n  findLast(options) {\n    return this.findElement({\n      container: this._getBody(),\n      isBackward: true,\n      ...options\n    });\n  }\n  findNext(options) {\n    return this.findElement({\n      container: this._getBody(),\n      ...options\n    });\n  }\n  findPrev(options) {\n    return this.findElement({\n      container: this._getBody(),\n      isBackward: true,\n      ...options\n    });\n  }\n  findDefault(options) {\n    return this.findElement({\n      ...options,\n      acceptCondition: el => this._tabster.focusable.isFocusable(el, options.includeProgrammaticallyFocusable) && !!this.getProps(el).isDefault\n    }) || null;\n  }\n  findAll(options) {\n    return this._findElements(true, options) || [];\n  }\n  findElement(options) {\n    const found = this._findElements(false, options);\n    return found ? found[0] : found;\n  }\n  _findElements(findAll, options) {\n    const {\n      container,\n      currentElement = null,\n      includeProgrammaticallyFocusable,\n      ignoreUncontrolled,\n      ignoreAccessibiliy,\n      isBackward,\n      onUncontrolled,\n      onElement\n    } = options;\n    const elements = [];\n    let {\n      acceptCondition\n    } = options;\n    if (!container) {\n      return null;\n    }\n    if (!acceptCondition) {\n      acceptCondition = el => this._tabster.focusable.isFocusable(el, includeProgrammaticallyFocusable, ignoreAccessibiliy, ignoreAccessibiliy);\n    }\n    const acceptElementState = {\n      container,\n      from: currentElement || container,\n      isBackward,\n      acceptCondition,\n      includeProgrammaticallyFocusable,\n      ignoreUncontrolled,\n      ignoreAccessibiliy,\n      cachedGrouppers: {}\n    };\n    const walker = createElementTreeWalker(container.ownerDocument, container, node => this._acceptElement(node, acceptElementState));\n    if (!walker) {\n      return null;\n    }\n    const prepareForNextElement = shouldContinueIfNotFound => {\n      const foundElement = acceptElementState.foundElement;\n      if (foundElement) {\n        elements.push(foundElement);\n      }\n      if (findAll) {\n        if (foundElement) {\n          acceptElementState.found = false;\n          delete acceptElementState.foundElement;\n          delete acceptElementState.fromCtx;\n          acceptElementState.from = foundElement;\n          if (onElement && !onElement(foundElement)) {\n            return false;\n          }\n        }\n        return !!(foundElement || shouldContinueIfNotFound);\n      } else {\n        return !!(shouldContinueIfNotFound && !foundElement);\n      }\n    };\n    if (currentElement) {\n      walker.currentNode = currentElement;\n    } else if (isBackward) {\n      const lastChild = getLastChild(container);\n      if (!lastChild) {\n        return null;\n      }\n      if (this._acceptElement(lastChild, acceptElementState) === NodeFilter.FILTER_ACCEPT && !prepareForNextElement(true)) {\n        return elements;\n      }\n      walker.currentNode = lastChild;\n    }\n    let foundElement;\n    do {\n      foundElement = (isBackward ? walker.previousNode() : walker.nextNode()) || undefined;\n    } while (prepareForNextElement());\n    if (!findAll) {\n      const nextUncontrolled = acceptElementState.nextUncontrolled;\n      if (nextUncontrolled) {\n        if (onUncontrolled) {\n          onUncontrolled(nextUncontrolled);\n        }\n        if (foundElement) {\n          // We have an uncontrolled area and there is a controlled element after it.\n          // Return undefined for the default Tab action.\n          return undefined;\n        } else {\n          // Otherwise, return null to moveOutWithDefaultAction().\n          return null;\n        }\n      }\n    }\n    return elements.length ? elements : null;\n  }\n  _acceptElement(element, state) {\n    if (state.found) {\n      return NodeFilter.FILTER_ACCEPT;\n    }\n    const container = state.container;\n    if (element === container) {\n      return NodeFilter.FILTER_SKIP;\n    }\n    if (!container.contains(element)) {\n      return NodeFilter.FILTER_REJECT;\n    }\n    if (element.__tabsterDummyContainer) {\n      return NodeFilter.FILTER_REJECT;\n    }\n    let lastToIgnore = state.lastToIgnore;\n    if (lastToIgnore) {\n      if (lastToIgnore.contains(element)) {\n        return NodeFilter.FILTER_REJECT;\n      } else {\n        lastToIgnore = state.lastToIgnore = undefined;\n      }\n    }\n    const ctx = state.currentCtx = RootAPI.getTabsterContext(this._tabster, element); // Tabster is opt in, if it is not managed, don't try and get do anything special\n\n    if (!ctx) {\n      return NodeFilter.FILTER_SKIP;\n    }\n    if (state.ignoreUncontrolled) {\n      if (shouldIgnoreFocus(element)) {\n        return NodeFilter.FILTER_SKIP;\n      }\n    } else if (ctx.uncontrolled && !state.nextUncontrolled && this._tabster.focusable.isFocusable(element, undefined, true, true)) {\n      if (!ctx.groupper && !ctx.mover) {\n        state.nextUncontrolled = ctx.uncontrolled;\n        return NodeFilter.FILTER_REJECT;\n      }\n    } // We assume iframes are focusable because native tab behaviour would tab inside\n\n    if (element.tagName === \"IFRAME\" || element.tagName === \"WEBVIEW\") {\n      state.found = true;\n      state.lastToIgnore = state.foundElement = element;\n      return NodeFilter.FILTER_ACCEPT;\n    }\n    if (!state.ignoreAccessibiliy && !this.isAccessible(element)) {\n      return NodeFilter.FILTER_REJECT;\n    }\n    let result;\n    let fromCtx = state.fromCtx;\n    if (!fromCtx) {\n      fromCtx = state.fromCtx = RootAPI.getTabsterContext(this._tabster, state.from);\n    }\n    const fromMover = fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.mover;\n    let groupper = ctx.groupper;\n    let mover = ctx.mover;\n    if (groupper || mover || fromMover) {\n      const groupperElement = groupper === null || groupper === void 0 ? void 0 : groupper.getElement();\n      const fromMoverElement = fromMover === null || fromMover === void 0 ? void 0 : fromMover.getElement();\n      let moverElement = mover === null || mover === void 0 ? void 0 : mover.getElement();\n      if (moverElement && fromMoverElement && container.contains(fromMoverElement) && (!groupperElement || !mover || fromMoverElement.contains(groupperElement))) {\n        mover = fromMover;\n        moverElement = fromMoverElement;\n      }\n      if (groupperElement && (groupperElement === container || !container.contains(groupperElement))) {\n        groupper = undefined;\n      }\n      if (moverElement && !container.contains(moverElement)) {\n        mover = undefined;\n      }\n      if (groupper && mover) {\n        if (moverElement && groupperElement && !groupperElement.contains(moverElement)) {\n          mover = undefined;\n        } else {\n          groupper = undefined;\n        }\n      }\n      if (groupper) {\n        result = groupper.acceptElement(element, state);\n      }\n      if (mover) {\n        result = mover.acceptElement(element, state);\n      }\n    }\n    if (result === undefined) {\n      result = state.acceptCondition(element) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n    if (result === NodeFilter.FILTER_ACCEPT && !state.found) {\n      state.found = true;\n      state.foundElement = element;\n    }\n    return result;\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst Keys = {\n  Tab: 9,\n  Enter: 13,\n  Esc: 27,\n  Space: 32,\n  PageUp: 33,\n  PageDown: 34,\n  End: 35,\n  Home: 36,\n  Left: 37,\n  Up: 38,\n  Right: 39,\n  Down: 40\n};\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass FocusedElementState extends Subscribable {\n  constructor(tabster, getWindow) {\n    super();\n    this._init = () => {\n      this._initTimer = undefined;\n      const win = this._win(); // Add these event listeners as capture - we want Tabster to run before user event handlers\n\n      win.document.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);\n      win.document.addEventListener(\"focusout\", this._onFocusOut, true);\n      win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n    this._onFocusIn = e => {\n      this._setFocusedElement(e.target, e.details.relatedTarget, e.details.isFocusedProgrammatically);\n    };\n    this._onFocusOut = e => {\n      this._setFocusedElement(undefined, e.relatedTarget);\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this._validateFocusedElement = element => {// TODO: Make sure this is not needed anymore and write tests.\n    };\n    this._onKeyDown = e => {\n      var _a, _b, _c, _d;\n      if (e.keyCode !== Keys.Tab || e.ctrlKey) {\n        return;\n      }\n      const currentElement = this.getVal();\n      if (!currentElement || !currentElement.ownerDocument || currentElement.contentEditable === \"true\") {\n        return;\n      }\n      const tabster = this._tabster;\n      const controlTab = tabster.controlTab;\n      const ctx = RootAPI.getTabsterContext(tabster, currentElement);\n      if (!ctx || !controlTab && !ctx.groupper && !ctx.mover || ctx.ignoreKeydown[e.key]) {\n        return;\n      }\n      const isBackward = e.shiftKey;\n      const next = FocusedElementState.findNextTabbable(tabster, ctx, undefined, currentElement, isBackward);\n      if (!next || !controlTab && !next.element) {\n        if (!controlTab) {\n          const lastMoverOrGroupper = next === null || next === void 0 ? void 0 : next.lastMoverOrGroupper;\n          if (lastMoverOrGroupper) {\n            (_a = lastMoverOrGroupper.dummyManager) === null || _a === void 0 ? void 0 : _a.moveOutWithDefaultAction(isBackward);\n            return;\n          }\n        }\n      }\n      let nextElement;\n      if (next) {\n        let uncontrolled = next.uncontrolled;\n        if (uncontrolled) {\n          const isGroupperFirst = ctx.isGroupperFirst;\n          let moveOutside = false;\n          if (isGroupperFirst !== undefined) {\n            const groupper = (_b = ctx.groupper) === null || _b === void 0 ? void 0 : _b.getElement();\n            const mover = (_c = ctx.mover) === null || _c === void 0 ? void 0 : _c.getElement();\n            let moveFrom;\n            if (isGroupperFirst && groupper && uncontrolled.contains(groupper)) {\n              moveFrom = groupper;\n            } else if (!isGroupperFirst && mover && uncontrolled.contains(mover)) {\n              moveFrom = mover;\n            }\n            if (moveFrom) {\n              uncontrolled = moveFrom;\n              moveOutside = true;\n            }\n          }\n          if (uncontrolled && ctx.uncontrolled !== uncontrolled) {\n            // We have met an uncontrolled area, just allow default action.\n            DummyInputManager.moveWithPhantomDummy(this._tabster, uncontrolled, moveOutside, isBackward);\n          }\n          return;\n        }\n        nextElement = next.element;\n        if (ctx.modalizer) {\n          const nextElementCtx = nextElement && RootAPI.getTabsterContext(tabster, nextElement);\n          if (!nextElementCtx || ctx.root.uid !== nextElementCtx.root.uid || !((_d = nextElementCtx.modalizer) === null || _d === void 0 ? void 0 : _d.isActive())) {\n            if (ctx.modalizer.onBeforeFocusOut()) {\n              e.preventDefault();\n              return;\n            }\n          } // circular focus trap for modalizer\n\n          if (!nextElement && ctx.modalizer.isActive() && ctx.modalizer.getProps().isTrapped) {\n            const findFn = isBackward ? \"findLast\" : \"findFirst\";\n            nextElement = tabster.focusable[findFn]({\n              container: ctx.modalizer.getElement()\n            });\n          }\n        }\n      }\n      if (nextElement) {\n        // For iframes just allow normal Tab behaviour\n        if (nextElement.tagName !== \"IFRAME\") {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          nativeFocus(nextElement);\n        }\n      } else {\n        ctx.root.moveOutWithDefaultAction(isBackward);\n      }\n    };\n    this._tabster = tabster;\n    this._win = getWindow;\n    this._initTimer = getWindow().setTimeout(this._init, 0);\n  }\n  dispose() {\n    super.dispose();\n    const win = this._win();\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    win.document.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);\n    win.document.removeEventListener(\"focusout\", this._onFocusOut, true);\n    win.removeEventListener(\"keydown\", this._onKeyDown, true);\n    delete FocusedElementState._lastResetElement;\n    delete this._nextVal;\n    delete this._lastVal;\n  }\n  static forgetMemorized(instance, parent) {\n    var _a, _b;\n    let wel = FocusedElementState._lastResetElement;\n    let el = wel && wel.get();\n    if (el && parent.contains(el)) {\n      delete FocusedElementState._lastResetElement;\n    }\n    el = (_b = (_a = instance._nextVal) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.get();\n    if (el && parent.contains(el)) {\n      delete instance._nextVal;\n    }\n    wel = instance._lastVal;\n    el = wel && wel.get();\n    if (el && parent.contains(el)) {\n      delete instance._lastVal;\n    }\n  }\n  getFocusedElement() {\n    return this.getVal();\n  }\n  getLastFocusedElement() {\n    var _a;\n    let el = (_a = this._lastVal) === null || _a === void 0 ? void 0 : _a.get();\n    if (!el || el && !documentContains(el.ownerDocument, el)) {\n      this._lastVal = el = undefined;\n    }\n    return el;\n  }\n  focus(element, noFocusedProgrammaticallyFlag, noAccessibleCheck) {\n    if (!this._tabster.focusable.isFocusable(element, noFocusedProgrammaticallyFlag, false, noAccessibleCheck)) {\n      return false;\n    }\n    element.focus();\n    return true;\n  }\n  focusDefault(container) {\n    const el = this._tabster.focusable.findDefault({\n      container\n    });\n    if (el) {\n      this._tabster.focusedElement.focus(el);\n      return true;\n    }\n    return false;\n  }\n  _focusFirstOrLast(isFirst, props) {\n    const tabsterFocusable = this._tabster.focusable;\n    const container = props.container;\n    let uncontrolled;\n    let toFocus;\n    if (container) {\n      const ctx = RootAPI.getTabsterContext(this._tabster, container);\n      if (ctx) {\n        let next = FocusedElementState.findNextTabbable(this._tabster, ctx, container, undefined, !isFirst);\n        if (next) {\n          toFocus = next.element;\n          uncontrolled = next.uncontrolled;\n          while (!toFocus && uncontrolled) {\n            if (tabsterFocusable.isFocusable(uncontrolled, false, true, true)) {\n              toFocus = uncontrolled;\n            } else {\n              toFocus = tabsterFocusable[isFirst ? \"findFirst\" : \"findLast\"]({\n                container: uncontrolled,\n                ignoreUncontrolled: true,\n                ignoreAccessibiliy: true\n              });\n            }\n            if (!toFocus) {\n              next = FocusedElementState.findNextTabbable(this._tabster, ctx, uncontrolled, undefined, !isFirst);\n              if (next) {\n                toFocus = next.element;\n                uncontrolled = next.uncontrolled;\n              }\n            }\n          }\n        }\n      }\n    }\n    if (toFocus && !(container === null || container === void 0 ? void 0 : container.contains(toFocus))) {\n      toFocus = undefined;\n    }\n    if (toFocus) {\n      this.focus(toFocus, false, true);\n      return true;\n    }\n    return false;\n  }\n  focusFirst(props) {\n    return this._focusFirstOrLast(true, props);\n  }\n  focusLast(props) {\n    return this._focusFirstOrLast(false, props);\n  }\n  resetFocus(container) {\n    if (!this._tabster.focusable.isVisible(container)) {\n      return false;\n    }\n    if (!this._tabster.focusable.isFocusable(container, true, true, true)) {\n      const prevTabIndex = container.getAttribute(\"tabindex\");\n      const prevAriaHidden = container.getAttribute(\"aria-hidden\");\n      container.tabIndex = -1;\n      container.setAttribute(\"aria-hidden\", \"true\");\n      FocusedElementState._lastResetElement = new WeakHTMLElement(this._win, container);\n      this.focus(container, true, true);\n      this._setOrRemoveAttribute(container, \"tabindex\", prevTabIndex);\n      this._setOrRemoveAttribute(container, \"aria-hidden\", prevAriaHidden);\n    } else {\n      this.focus(container);\n    }\n    return true;\n  }\n  _setOrRemoveAttribute(element, name, value) {\n    if (value === null) {\n      element.removeAttribute(name);\n    } else {\n      element.setAttribute(name, value);\n    }\n  }\n  _setFocusedElement(element, relatedTarget, isFocusedProgrammatically) {\n    var _a;\n    if (this._tabster._noop) {\n      return;\n    }\n    const details = {\n      relatedTarget\n    };\n    if (element) {\n      const lastResetElement = (_a = FocusedElementState._lastResetElement) === null || _a === void 0 ? void 0 : _a.get();\n      FocusedElementState._lastResetElement = undefined;\n      if (lastResetElement === element || shouldIgnoreFocus(element)) {\n        return;\n      }\n      details.isFocusedProgrammatically = isFocusedProgrammatically;\n    }\n    const nextVal = this._nextVal = {\n      element: element ? new WeakHTMLElement(this._win, element) : undefined,\n      details\n    };\n    if (element && element !== this._val) {\n      this._validateFocusedElement(element);\n    } // _validateFocusedElement() might cause the refocus which will trigger\n    // another call to this function. Making sure that the value is correct.\n\n    if (this._nextVal === nextVal) {\n      this.setVal(element, details);\n    }\n    this._nextVal = undefined;\n  }\n  setVal(val, details) {\n    super.setVal(val, details);\n    if (val) {\n      this._lastVal = new WeakHTMLElement(this._win, val);\n    }\n  }\n  static findNextTabbable(tabster, ctx, container, currentElement, isBackward) {\n    var _a;\n    const actualContainer = container || ctx.root.getElement();\n    if (!actualContainer) {\n      return null;\n    }\n    let next = null;\n    const isTabbingTimer = FocusedElementState._isTabbingTimer;\n    const win = tabster.getWindow();\n    if (isTabbingTimer) {\n      win.clearTimeout(isTabbingTimer);\n    }\n    FocusedElementState.isTabbing = true;\n    FocusedElementState._isTabbingTimer = win.setTimeout(() => {\n      delete FocusedElementState._isTabbingTimer;\n      FocusedElementState.isTabbing = false;\n    }, 0);\n    const callFindNext = what => {\n      next = what.findNextTabbable(currentElement, isBackward);\n    };\n    if (ctx.groupper && ctx.mover) {\n      let isGroupperFirst = ctx.isGroupperFirst;\n      if (isGroupperFirst && currentElement) {\n        const fromCtx = RootAPI.getTabsterContext(tabster, currentElement);\n        if ((fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.groupper) !== ctx.groupper) {\n          isGroupperFirst = false;\n        }\n      }\n      callFindNext(isGroupperFirst ? ctx.groupper : ctx.mover);\n    } else if (ctx.groupper) {\n      callFindNext(ctx.groupper);\n    } else if (ctx.mover) {\n      callFindNext(ctx.mover);\n    } else {\n      let uncontrolled;\n      const onUncontrolled = el => {\n        uncontrolled = el;\n      };\n      const nextElement = isBackward ? tabster.focusable.findPrev({\n        container: actualContainer,\n        currentElement,\n        onUncontrolled\n      }) : tabster.focusable.findNext({\n        container: actualContainer,\n        currentElement,\n        onUncontrolled\n      });\n      next = {\n        element: uncontrolled ? undefined : nextElement,\n        uncontrolled\n      };\n    }\n    const lastMoverOrGroupperElement = (_a = next === null || next === void 0 ? void 0 : next.lastMoverOrGroupper) === null || _a === void 0 ? void 0 : _a.getElement();\n    if (lastMoverOrGroupperElement) {\n      next = null;\n      const adjacentElement = getAdjacentElement(lastMoverOrGroupperElement, isBackward);\n      if (adjacentElement) {\n        const adjacentCtx = RootAPI.getTabsterContext(tabster, adjacentElement, {\n          checkRtl: true\n        });\n        if (adjacentCtx) {\n          let adjacentFrom = getAdjacentElement(adjacentElement, !isBackward);\n          if (adjacentFrom) {\n            if (!isBackward) {\n              adjacentFrom = getLastChild(adjacentFrom);\n            }\n            next = FocusedElementState.findNextTabbable(tabster, adjacentCtx, actualContainer, adjacentFrom, isBackward);\n          }\n        }\n      }\n    }\n    return next;\n  }\n}\nFocusedElementState.isTabbing = false;\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nclass GroupperDummyManager extends DummyInputManager {\n  constructor(element, groupper, tabster) {\n    super(tabster, element, DummyInputManagerPriorities.Groupper, true);\n    this._setHandlers((dummyInput, isBackward, relatedTarget) => {\n      var _a, _b;\n      const container = element.get();\n      if (container && !dummyInput.shouldMoveOut) {\n        const input = dummyInput.input;\n        if (input) {\n          const ctx = RootAPI.getTabsterContext(tabster, input);\n          if (ctx) {\n            let next;\n            if (relatedTarget && relatedTarget.contentEditable === \"true\" && groupper.getProps().tabbability === GroupperTabbabilities.LimitedTrapFocus && container.contains(relatedTarget)) {\n              next = (_a = groupper.findNextTabbable(relatedTarget, isBackward)) === null || _a === void 0 ? void 0 : _a.element;\n            }\n            if (!next) {\n              next = (_b = FocusedElementState.findNextTabbable(tabster, ctx, undefined, dummyInput.isOutside ? input : getAdjacentElement(container, !isBackward), isBackward)) === null || _b === void 0 ? void 0 : _b.element;\n            }\n            if (next) {\n              tabster.focusedElement.focus(next);\n            }\n          }\n        }\n      }\n    });\n  }\n}\nclass Groupper extends TabsterPart {\n  constructor(tabster, element, onDispose, props) {\n    super(tabster, element, props);\n    this._shouldTabInside = false;\n    this.makeTabbable(false);\n    this._onDispose = onDispose;\n    if (!tabster.controlTab) {\n      this.dummyManager = new GroupperDummyManager(this._element, this, tabster);\n    }\n  }\n  dispose() {\n    var _a;\n    this._onDispose(this);\n    const element = this._element.get();\n    (_a = this.dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (element) {\n      if (process.env.NODE_ENV === 'development') {\n        _setInformativeStyle$1(this._element, true);\n      }\n    }\n    delete this._first;\n  }\n  findNextTabbable(currentElement, isBackward) {\n    const groupperElement = this.getElement();\n    if (!groupperElement) {\n      return null;\n    }\n    const groupperFirstFocusable = this.getFirst(true);\n    if (!currentElement || !groupperElement.contains(currentElement)) {\n      return {\n        element: groupperFirstFocusable,\n        lastMoverOrGroupper: groupperFirstFocusable ? undefined : this\n      };\n    }\n    const tabster = this._tabster;\n    let next = null;\n    let uncontrolled;\n    const onUncontrolled = el => {\n      uncontrolled = el;\n    };\n    if (this._shouldTabInside && groupperFirstFocusable) {\n      next = isBackward ? tabster.focusable.findPrev({\n        container: groupperElement,\n        currentElement,\n        onUncontrolled\n      }) : tabster.focusable.findNext({\n        container: groupperElement,\n        currentElement,\n        onUncontrolled\n      });\n      if (!uncontrolled && !next && this._props.tabbability === GroupperTabbabilities.LimitedTrapFocus) {\n        next = isBackward ? tabster.focusable.findLast({\n          container: groupperElement\n        }) : tabster.focusable.findFirst({\n          container: groupperElement\n        });\n      }\n    }\n    return {\n      element: next,\n      uncontrolled,\n      lastMoverOrGroupper: next || uncontrolled ? undefined : this\n    };\n  }\n  makeTabbable(isTabbable) {\n    this._shouldTabInside = isTabbable || !this._props.tabbability;\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle$1(this._element, !this._shouldTabInside);\n    }\n  }\n  isActive(noIfFirstIsFocused) {\n    var _a;\n    const element = this.getElement() || null;\n    let isParentActive = true;\n    for (let e = element === null || element === void 0 ? void 0 : element.parentElement; e; e = e.parentElement) {\n      const g = (_a = getTabsterOnElement(this._tabster, e)) === null || _a === void 0 ? void 0 : _a.groupper;\n      if (g) {\n        if (!g._shouldTabInside) {\n          isParentActive = false;\n        }\n      }\n    }\n    let ret = isParentActive ? this._props.tabbability ? this._shouldTabInside : false : undefined;\n    if (ret && noIfFirstIsFocused) {\n      const focused = this._tabster.focusedElement.getFocusedElement();\n      if (focused) {\n        ret = focused !== this.getFirst(true);\n      }\n    }\n    return ret;\n  }\n  getFirst(orContainer) {\n    var _a;\n    const groupperElement = this.getElement();\n    let first;\n    if (groupperElement) {\n      if (orContainer && this._tabster.focusable.isFocusable(groupperElement)) {\n        return groupperElement;\n      }\n      first = (_a = this._first) === null || _a === void 0 ? void 0 : _a.get();\n      if (!first) {\n        first = this._tabster.focusable.findFirst({\n          container: groupperElement,\n          ignoreUncontrolled: true\n        }) || undefined;\n        if (first) {\n          this.setFirst(first);\n        }\n      }\n    }\n    return first;\n  }\n  setFirst(element) {\n    if (element) {\n      this._first = new WeakHTMLElement(this._tabster.getWindow, element);\n    } else {\n      delete this._first;\n    }\n  }\n  acceptElement(element, state) {\n    const cachedGrouppers = state.cachedGrouppers;\n    let cached = cachedGrouppers[this.id];\n    let isActive;\n    if (cached) {\n      isActive = cached.isActive;\n    } else {\n      isActive = this.isActive(true);\n      cached = cachedGrouppers[this.id] = {\n        isActive\n      };\n    }\n    const groupperElement = this.getElement();\n    if (groupperElement) {\n      if (isActive !== true) {\n        if (groupperElement.contains(state.from)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        let first;\n        if (\"first\" in cached) {\n          first = cached.first;\n        } else {\n          first = cached.first = this.getFirst(true);\n        }\n        if (first && state.acceptCondition(first)) {\n          state.lastToIgnore = groupperElement;\n          if (first !== state.from) {\n            state.found = true;\n            state.foundElement = first;\n            return NodeFilter.FILTER_ACCEPT;\n          } else {\n            return NodeFilter.FILTER_REJECT;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nclass GroupperAPI {\n  constructor(tabster, getWindow) {\n    this._current = {};\n    this._grouppers = {};\n    this._init = () => {\n      this._initTimer = undefined;\n      const win = this._win();\n      this._tabster.focusedElement.subscribe(this._onFocus);\n      win.document.addEventListener(\"mousedown\", this._onMouseDown, true);\n      win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n    this._onGroupperDispose = groupper => {\n      delete this._grouppers[groupper.id];\n    };\n    this._onFocus = element => {\n      if (element) {\n        this._updateCurrent(element, true, true);\n      }\n    };\n    this._onMouseDown = e => {\n      if (e.target) {\n        this._updateCurrent(e.target, true);\n      }\n    };\n    this._onKeyDown = e => {\n      if (e.keyCode !== Keys.Enter && e.keyCode !== Keys.Esc) {\n        return;\n      }\n      const element = this._tabster.focusedElement.getFocusedElement();\n      if (element) {\n        const ctx = RootAPI.getTabsterContext(this._tabster, element);\n        let groupper = ctx === null || ctx === void 0 ? void 0 : ctx.groupper;\n        if (ctx && groupper) {\n          let next;\n          const groupperElement = groupper.getElement();\n          if (e.keyCode === Keys.Enter) {\n            if (ctx.ignoreKeydown.Enter) {\n              return;\n            }\n            if (element === groupperElement || groupper.getProps().delegated && element === groupper.getFirst(false)) {\n              next = this._tabster.focusable.findNext({\n                container: groupperElement,\n                currentElement: element\n              });\n            }\n          } else if (e.keyCode === Keys.Esc) {\n            if (ctx.ignoreKeydown.Escape) {\n              return;\n            }\n            if (groupperElement && groupperElement.contains(element)) {\n              if (element !== groupperElement) {\n                next = groupper.getFirst(true);\n              } else {\n                const parentElement = groupperElement.parentElement;\n                const parentCtx = parentElement ? RootAPI.getTabsterContext(this._tabster, parentElement) : undefined;\n                groupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;\n                next = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);\n              }\n            }\n            if (groupper) {\n              groupper.makeTabbable(false);\n            }\n          }\n          if (next) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            nativeFocus(next);\n          }\n        }\n      }\n    };\n    this._tabster = tabster;\n    this._win = getWindow;\n    this._initTimer = getWindow().setTimeout(this._init, 0);\n  }\n  dispose() {\n    const win = this._win();\n    this._current = {};\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    win.document.removeEventListener(\"mousedown\", this._onMouseDown, true);\n    win.removeEventListener(\"keydown\", this._onKeyDown, true);\n    Object.keys(this._grouppers).forEach(groupperId => {\n      if (this._grouppers[groupperId]) {\n        this._grouppers[groupperId].dispose();\n        delete this._grouppers[groupperId];\n      }\n    });\n  }\n  createGroupper(element, props) {\n    if (process.env.NODE_ENV === 'development') ;\n    const newGroupper = new Groupper(this._tabster, element, this._onGroupperDispose, props);\n    this._grouppers[newGroupper.id] = newGroupper;\n    return newGroupper;\n  }\n  forgetCurrentGrouppers() {\n    this._current = {};\n  }\n  _updateCurrent(element, includeTarget, checkTarget) {\n    var _a;\n    const newIds = {};\n    let isTarget = true;\n    for (let el = element; el; el = el.parentElement) {\n      const groupper = (_a = getTabsterOnElement(this._tabster, el)) === null || _a === void 0 ? void 0 : _a.groupper;\n      if (groupper) {\n        newIds[groupper.id] = true;\n        if (isTarget && checkTarget && el !== element) {\n          isTarget = false;\n        }\n        if (includeTarget || !isTarget) {\n          this._current[groupper.id] = groupper;\n          const isTabbable = groupper.isActive() || element !== el && (!groupper.getProps().delegated || groupper.getFirst(false) !== element);\n          groupper.makeTabbable(isTabbable);\n        }\n        isTarget = false;\n      }\n    }\n    for (const id of Object.keys(this._current)) {\n      const groupper = this._current[id];\n      if (!(groupper.id in newIds)) {\n        groupper.makeTabbable(false);\n        groupper.setFirst(undefined);\n        delete this._current[id];\n      }\n    }\n  }\n}\nfunction _setInformativeStyle$1(weakElement, remove) {\n  if (process.env.NODE_ENV === 'development') {\n    const element = weakElement.get();\n    if (element) {\n      if (remove) {\n        element.style.removeProperty(\"--tabster-groupper\");\n      } else {\n        element.style.setProperty(\"--tabster-groupper\", \"unlimited\");\n      }\n    }\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nlet _lastInternalId = 0;\nfunction _setInformativeStyle(weakElement, remove, internalId, userId, isActive, isFocused) {\n  if (process.env.NODE_ENV === 'development') {\n    const element = weakElement.get();\n    if (element) {\n      if (remove) {\n        element.style.removeProperty(\"--tabster-modalizer\");\n      } else {\n        element.style.setProperty(\"--tabster-modalizer\", internalId + \",\" + userId + \",\" + (isActive ? \"active\" : \"inactive\") + \",\" + \",\" + (isFocused ? \"focused\" : \"not-focused\"));\n      }\n    }\n  }\n}\nclass Modalizer extends TabsterPart {\n  constructor(tabster, element, onDispose, moveOutWithDefault, onActiveChange, props) {\n    super(tabster, element, props);\n    this._isFocused = false;\n    this._onKeyDown = e => {\n      const keyCode = e.keyCode;\n      const isPrev = e.shiftKey;\n      if (keyCode !== Keys.Tab) {\n        return;\n      }\n      const focusedElement = this._tabster.focusedElement.getFocusedElement();\n      const modalizerElement = this.getElement();\n      let findFn = isPrev ? \"findPrev\" : \"findNext\";\n      let next;\n      if (focusedElement && (modalizerElement === null || modalizerElement === void 0 ? void 0 : modalizerElement.contains(focusedElement))) {\n        next = this._tabster.focusable[findFn]({\n          container: this.getElement(),\n          currentElement: focusedElement\n        });\n      } // circular focus trap for modalizer\n\n      if (!next && this._props.isTrapped) {\n        findFn = isPrev ? \"findLast\" : \"findFirst\";\n        next = this._tabster.focusable[findFn]({\n          container: this.getElement()\n        });\n      }\n      if (next) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        nativeFocus(next);\n      } else if (!this._props.isOthersAccessible) {\n        this._moveOutWithDefault(isPrev);\n      }\n    };\n    this.internalId = \"ml\" + ++_lastInternalId;\n    this.userId = props.id;\n    this._onDispose = onDispose;\n    this._moveOutWithDefault = moveOutWithDefault;\n    this._onActiveChange = onActiveChange;\n    if (!tabster.controlTab) {\n      element.addEventListener(\"keydown\", this._onKeyDown);\n    }\n    const parentElement = element.parentElement;\n    if (parentElement) {\n      this._modalizerParent = new WeakHTMLElement(tabster.getWindow, parentElement);\n    } else {\n      this._modalizerParent = null;\n    }\n    this._setAccessibilityProps();\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle(this._element, false, this.internalId, this.userId, this._isActive, this._isFocused);\n    }\n  }\n  setProps(props) {\n    if (props.id) {\n      this.userId = props.id;\n    }\n    this._props = {\n      ...props\n    };\n    this._setAccessibilityProps();\n  }\n  dispose() {\n    this._onDispose(this);\n    this._remove();\n  }\n  setActive(active) {\n    var _a, _b, _c;\n    if (active === this._isActive) {\n      return;\n    }\n    this._isActive = active;\n    this._onActiveChange(active);\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle(this._element, false, this.internalId, this.userId, this._isActive, this._isFocused);\n    }\n    let targetDocument = ((_a = this._element.get()) === null || _a === void 0 ? void 0 : _a.ownerDocument) || ((_c = (_b = this._modalizerParent) === null || _b === void 0 ? void 0 : _b.get()) === null || _c === void 0 ? void 0 : _c.ownerDocument); // Document can't be determined frm the modalizer root or its parent, fallback to window\n\n    if (!targetDocument) {\n      targetDocument = this._tabster.getWindow().document;\n    }\n    const root = targetDocument.body; // Sets or restores aria-hidden value based on `active` flag\n\n    const ariaHiddenWalker = createElementTreeWalker(targetDocument, root, el => {\n      var _a; // if other content should be accessible no need to do walk the tree\n\n      if (this._props.isOthersAccessible) {\n        return NodeFilter.FILTER_REJECT;\n      }\n      const modalizerRoot = this._element.get();\n      const modalizerParent = (_a = this._modalizerParent) === null || _a === void 0 ? void 0 : _a.get();\n      const isModalizerElement = modalizerRoot === el;\n      const containsModalizerRoot = !!el.contains(modalizerRoot || null);\n      const containsModalizerParent = !!el.contains(modalizerParent || null);\n      if (isModalizerElement) {\n        return NodeFilter.FILTER_REJECT;\n      }\n      if (containsModalizerRoot || containsModalizerParent) {\n        return NodeFilter.FILTER_SKIP;\n      } // Add `aria-hidden` when modalizer is active\n      // Restore `aria-hidden` when modalizer is inactive\n\n      augmentAttribute(this._tabster, el, \"aria-hidden\", active ? \"true\" : undefined);\n      const modalizerRootOnPage = modalizerRoot === (modalizerRoot === null || modalizerRoot === void 0 ? void 0 : modalizerRoot.ownerDocument.body) ? false : modalizerRoot === null || modalizerRoot === void 0 ? void 0 : modalizerRoot.ownerDocument.body.contains(modalizerRoot);\n      const modalizerParentOnPage = modalizerParent === (modalizerParent === null || modalizerParent === void 0 ? void 0 : modalizerParent.ownerDocument.body) ? false : modalizerParent === null || modalizerParent === void 0 ? void 0 : modalizerParent.ownerDocument.body.contains(modalizerParent); // if the modalizer root or its parent is not on the page, all nodes need to be visited\n\n      if (!modalizerParentOnPage && !modalizerRootOnPage) {\n        return NodeFilter.FILTER_SKIP;\n      }\n      return NodeFilter.FILTER_REJECT;\n    });\n    if (ariaHiddenWalker) {\n      while (ariaHiddenWalker.nextNode()) {\n        /** Iterate to update the tree */\n      }\n    }\n  }\n  isActive() {\n    return !!this._isActive;\n  }\n  contains(element) {\n    var _a;\n    return !!((_a = this.getElement()) === null || _a === void 0 ? void 0 : _a.contains(element));\n  }\n  onBeforeFocusOut() {\n    const element = this.getElement();\n    return element ? !triggerEvent(element, ModalizerEventName, {\n      eventName: \"beforefocusout\"\n    }) : false;\n  }\n  _remove() {\n    if (process.env.NODE_ENV === 'development') {\n      _setInformativeStyle(this._element, true);\n    }\n  }\n  _setAccessibilityProps() {\n    if (process.env.NODE_ENV === 'development') {\n      const element = this._element.get();\n      if (element && !element.getAttribute(\"aria-label\") && !element.getAttribute(\"aria-labelledby\")) {\n        console.warn(`Modalizer ${this.id} must have either aria-label or aria-labelledby`);\n      }\n    }\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n/**\r\n * Manages the dummy inputs for the Modalizer API\r\n */\n\nclass ModalizerAPIDummyManager extends DummyInputManager {\n  constructor(modalizerAPI, tabster, element) {\n    super(tabster, element, DummyInputManagerPriorities.Modalizer);\n    this._onFocusDummyInput = dummyInput => {\n      const activeModalizer = this._modalizerAPI.activeModalizer;\n      if (!activeModalizer) {\n        return;\n      }\n      if (dummyInput.shouldMoveOut) {\n        return;\n      }\n      const findFn = dummyInput.isFirst ? \"findFirst\" : \"findLast\";\n      const next = this._tabster.focusable[findFn]({\n        container: activeModalizer.getElement()\n      });\n      if (next) {\n        this._tabster.focusedElement.focus(next);\n      }\n    };\n    this._modalizerAPI = modalizerAPI;\n    this._tabster = tabster;\n    this.setTabbable(false);\n    this._setHandlers(this._onFocusDummyInput);\n  }\n}\nclass ModalizerAPI {\n  constructor(tabster) {\n    this._init = () => {\n      this._initTimer = undefined;\n      this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n    this._onModalizerDispose = modalizer => {\n      modalizer.setActive(false);\n      if (this.activeModalizer === modalizer) {\n        this.activeModalizer = undefined;\n      }\n      delete this._modalizers[modalizer.userId];\n    };\n    /**\r\n     * Subscribes to the focus state and handles modalizer related focus events\r\n     * @param e - Element that is focused\r\n     * @param details - Additional data about the focus event\r\n     */\n\n    this._onFocus = (focusedElement, details) => {\n      var _a, _b, _c;\n      const ctx = focusedElement && RootAPI.getTabsterContext(this._tabster, focusedElement); // Modalizer behaviour is opt in, only apply to elements that have a tabster context\n\n      if (!ctx || !focusedElement) {\n        return;\n      }\n      if (this._focusOutTimer) {\n        this._win().clearTimeout(this._focusOutTimer);\n        this._focusOutTimer = undefined;\n      }\n      const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;\n      if (modalizer === this.activeModalizer) {\n        return;\n      } // Developers calling `element.focus()` should change/deactivate active modalizer\n\n      if (details.isFocusedProgrammatically && !((_a = this.activeModalizer) === null || _a === void 0 ? void 0 : _a.contains(focusedElement))) {\n        (_b = this.activeModalizer) === null || _b === void 0 ? void 0 : _b.setActive(false);\n        this.activeModalizer = undefined;\n        if (modalizer) {\n          this.activeModalizer = modalizer;\n          this.activeModalizer.setActive(true);\n        }\n      } else if (!((_c = this.activeModalizer) === null || _c === void 0 ? void 0 : _c.getProps().isOthersAccessible)) {\n        // Focused outside of the active modalizer, try pull focus back to current modalizer\n        const win = this._win();\n        win.clearTimeout(this._restoreModalizerFocusTimer); // TODO some rendering frameworks (i.e. React) might async rerender the DOM so we need to wait for a duration\n        // Figure out a better way of doing this rather than a 100ms timeout\n\n        this._restoreModalizerFocusTimer = win.setTimeout(() => this._restoreModalizerFocus(focusedElement), 100);\n      }\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._initTimer = this._win().setTimeout(this._init, 0);\n    this._modalizers = {};\n    if (!tabster.controlTab) {\n      const documentBody = this._win().document.body;\n      this._dummyManager = new ModalizerAPIDummyManager(this, tabster, new WeakHTMLElement(this._win, documentBody));\n    }\n  }\n  dispose() {\n    var _a;\n    const win = this._win();\n    (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    win.clearTimeout(this._restoreModalizerFocusTimer);\n    win.clearTimeout(this._focusOutTimer); // Dispose all modalizers managed by the API\n\n    Object.keys(this._modalizers).forEach(modalizerId => {\n      if (this._modalizers[modalizerId]) {\n        this._modalizers[modalizerId].dispose();\n        delete this._modalizers[modalizerId];\n      }\n    });\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    delete this.activeModalizer;\n  }\n  createModalizer(element, props) {\n    var _a, _b, _c, _d, _e;\n    if (process.env.NODE_ENV === 'development') ;\n    const modalizer = new Modalizer(this._tabster, element, this._onModalizerDispose, (_b = (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.moveOutWithDefaultAction) !== null && _b !== void 0 ? _b : () => null, (_d = (_c = this._dummyManager) === null || _c === void 0 ? void 0 : _c.setTabbable) !== null && _d !== void 0 ? _d : () => null, props);\n    this._modalizers[props.id] = modalizer; // Adding a modalizer which is already focused, activate it\n\n    if (element.contains((_e = this._tabster.focusedElement.getFocusedElement()) !== null && _e !== void 0 ? _e : null)) {\n      const prevModalizer = this.activeModalizer;\n      if (prevModalizer) {\n        prevModalizer.setActive(false);\n      }\n      this.activeModalizer = modalizer;\n      this.activeModalizer.setActive(true);\n    }\n    return modalizer;\n  }\n  focus(elementFromModalizer, noFocusFirst, noFocusDefault) {\n    const ctx = RootAPI.getTabsterContext(this._tabster, elementFromModalizer);\n    if (ctx && ctx.modalizer) {\n      this.activeModalizer = ctx.modalizer;\n      this.activeModalizer.setActive(true);\n      const props = this.activeModalizer.getProps();\n      const modalizerRoot = this.activeModalizer.getElement();\n      if (modalizerRoot) {\n        if (noFocusFirst === undefined) {\n          noFocusFirst = props.isNoFocusFirst;\n        }\n        if (!noFocusFirst && this._tabster.keyboardNavigation.isNavigatingWithKeyboard() && this._tabster.focusedElement.focusFirst({\n          container: modalizerRoot\n        })) {\n          return true;\n        }\n        if (noFocusDefault === undefined) {\n          noFocusDefault = props.isNoFocusDefault;\n        }\n        if (!noFocusDefault && this._tabster.focusedElement.focusDefault(modalizerRoot)) {\n          return true;\n        }\n        this._tabster.focusedElement.resetFocus(modalizerRoot);\n      }\n    } else if (process.env.NODE_ENV === 'development') {\n      console.error(\"Element is not in Modalizer.\", elementFromModalizer);\n    }\n    return false;\n  }\n  updateModalizer(modalizer, removed) {\n    if (removed) {\n      if (modalizer.isActive()) {\n        modalizer.setActive(false);\n      }\n      delete this._modalizers[modalizer.userId];\n      if (this.activeModalizer === modalizer) {\n        this.activeModalizer = undefined;\n      }\n    }\n  }\n  /**\r\n   * Called when an element is focused outside of an active modalizer.\r\n   * Attempts to pull focus back into the active modalizer\r\n   * @param outsideElement - An element being focused outside of the modalizer\r\n   */\n\n  _restoreModalizerFocus(outsideElement) {\n    if (!(outsideElement === null || outsideElement === void 0 ? void 0 : outsideElement.ownerDocument) || !this.activeModalizer) {\n      return;\n    }\n    let toFocus = this._tabster.focusable.findFirst({\n      container: this.activeModalizer.getElement()\n    });\n    if (toFocus) {\n      if (outsideElement.compareDocumentPosition(toFocus) & document.DOCUMENT_POSITION_PRECEDING) {\n        toFocus = this._tabster.focusable.findLast({\n          container: outsideElement.ownerDocument.body\n        });\n        if (!toFocus) {\n          // This only might mean that findFirst/findLast are buggy and inconsistent.\n          throw new Error(\"Something went wrong.\");\n        }\n      }\n      this._tabster.focusedElement.focus(toFocus);\n    } else {\n      // Current Modalizer doesn't seem to have focusable elements.\n      // Blurring the currently focused element which is outside of the current Modalizer.\n      outsideElement.blur();\n    }\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nconst _inputSelector = /*#__PURE__*/[\"input\", \"textarea\", \"*[contenteditable]\"].join(\", \");\nclass MoverDummyManager extends DummyInputManager {\n  constructor(element, tabster, getMemorized) {\n    super(tabster, element, DummyInputManagerPriorities.Mover);\n    this._onFocusDummyInput = dummyInput => {\n      var _a, _b;\n      const container = this._element.get();\n      const input = dummyInput.input;\n      if (container && !dummyInput.shouldMoveOut && input) {\n        const ctx = RootAPI.getTabsterContext(this._tabster, container);\n        let toFocus;\n        if (ctx) {\n          toFocus = (_a = FocusedElementState.findNextTabbable(this._tabster, ctx, undefined, input, !dummyInput.isFirst)) === null || _a === void 0 ? void 0 : _a.element;\n        }\n        const memorized = (_b = this._getMemorized()) === null || _b === void 0 ? void 0 : _b.get();\n        if (memorized) {\n          toFocus = memorized;\n        }\n        if (toFocus) {\n          nativeFocus(toFocus);\n        }\n      }\n    };\n    this._tabster = tabster;\n    this._getMemorized = getMemorized;\n    this._setHandlers(this._onFocusDummyInput);\n  }\n} // TypeScript enums produce depressing JavaScript code, so, we're just using\n// a few old style constants here.\n\nconst _moverUpdateAdd = 1;\nconst _moverUpdateAttr = 2;\nconst _moverUpdateRemove = 3;\nclass Mover extends TabsterPart {\n  constructor(tabster, element, onDispose, props) {\n    super(tabster, element, props);\n    this._visible = {};\n    this._onIntersection = entries => {\n      for (const entry of entries) {\n        const el = entry.target;\n        const id = getElementUId(this._win, el);\n        let newVisibility;\n        let fullyVisible = this._fullyVisible;\n        if (entry.intersectionRatio >= 0.25) {\n          newVisibility = entry.intersectionRatio >= 0.75 ? Visibilities.Visible : Visibilities.PartiallyVisible;\n          if (newVisibility === Visibilities.Visible) {\n            fullyVisible = id;\n          }\n        }\n        if (this._visible[id] !== newVisibility) {\n          if (newVisibility === undefined) {\n            delete this._visible[id];\n            if (fullyVisible === id) {\n              delete this._fullyVisible;\n            }\n          } else {\n            this._visible[id] = newVisibility;\n            this._fullyVisible = fullyVisible;\n          }\n          const state = this.getState(el);\n          if (state) {\n            triggerEvent(el, MoverEventName, state);\n          }\n        }\n      }\n    };\n    this._win = tabster.getWindow;\n    if (this._props.trackState || this._props.visibilityAware) {\n      this._intersectionObserver = new IntersectionObserver(this._onIntersection, {\n        threshold: [0, 0.25, 0.5, 0.75, 1]\n      });\n      this._observeState();\n    }\n    this._onDispose = onDispose;\n    const getMemorized = () => props.memorizeCurrent ? this._current : undefined;\n    if (!tabster.controlTab) {\n      this.dummyManager = new MoverDummyManager(this._element, tabster, getMemorized);\n    }\n  }\n  dispose() {\n    var _a;\n    this._onDispose(this);\n    if (this._intersectionObserver) {\n      this._intersectionObserver.disconnect();\n      delete this._intersectionObserver;\n    }\n    delete this._current;\n    delete this._fullyVisible;\n    delete this._allElements;\n    delete this._updateQueue;\n    if (this._unobserve) {\n      this._unobserve();\n      delete this._unobserve;\n    }\n    const win = this._win();\n    if (this._setCurrentTimer) {\n      win.clearTimeout(this._setCurrentTimer);\n      delete this._setCurrentTimer;\n    }\n    if (this._updateTimer) {\n      win.clearTimeout(this._updateTimer);\n      delete this._updateTimer;\n    }\n    (_a = this.dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();\n  }\n  setCurrent(element) {\n    if (element) {\n      this._current = new WeakHTMLElement(this._win, element);\n    } else {\n      this._current = undefined;\n    }\n    if ((this._props.trackState || this._props.visibilityAware) && !this._setCurrentTimer) {\n      this._setCurrentTimer = this._win().setTimeout(() => {\n        var _a;\n        delete this._setCurrentTimer;\n        const changed = [];\n        if (this._current !== this._prevCurrent) {\n          changed.push(this._current);\n          changed.push(this._prevCurrent);\n          this._prevCurrent = this._current;\n        }\n        for (const weak of changed) {\n          const el = weak === null || weak === void 0 ? void 0 : weak.get();\n          if (el && ((_a = this._allElements) === null || _a === void 0 ? void 0 : _a.get(el)) === this) {\n            const props = this._props;\n            if (el && (props.visibilityAware !== undefined || props.trackState)) {\n              const state = this.getState(el);\n              if (state) {\n                triggerEvent(el, MoverEventName, state);\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  getCurrent() {\n    var _a;\n    return ((_a = this._current) === null || _a === void 0 ? void 0 : _a.get()) || null;\n  }\n  findNextTabbable(currentElement, isBackward) {\n    var _a;\n    const container = this.getElement();\n    const currentIsDummy = container && ((_a = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a === void 0 ? void 0 : _a.get()) === container;\n    if (!container) {\n      return null;\n    }\n    const tabster = this._tabster;\n    const focusable = tabster.focusable;\n    let next = null;\n    let uncontrolled;\n    const onUncontrolled = el => {\n      uncontrolled = el;\n    };\n    if (this._props.tabbable || currentIsDummy) {\n      next = isBackward ? focusable.findPrev({\n        currentElement,\n        container,\n        onUncontrolled\n      }) : focusable.findNext({\n        currentElement,\n        container,\n        onUncontrolled\n      });\n    }\n    return {\n      element: next,\n      uncontrolled,\n      lastMoverOrGroupper: next || uncontrolled ? undefined : this\n    };\n  }\n  acceptElement(element, state) {\n    var _a, _b, _c;\n    if (!FocusedElementState.isTabbing) {\n      return ((_a = state.currentCtx) === null || _a === void 0 ? void 0 : _a.isExcludedFromMover) ? NodeFilter.FILTER_REJECT : undefined;\n    }\n    const {\n      memorizeCurrent,\n      visibilityAware\n    } = this._props;\n    const moverElement = this.getElement();\n    if (moverElement && (memorizeCurrent || visibilityAware) && (!moverElement.contains(state.from) || ((_b = state.from.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get()) === moverElement)) {\n      if (memorizeCurrent) {\n        const current = (_c = this._current) === null || _c === void 0 ? void 0 : _c.get();\n        if (current && state.acceptCondition(current)) {\n          state.found = true;\n          state.foundElement = current;\n          state.lastToIgnore = moverElement;\n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }\n      if (visibilityAware) {\n        const found = this._tabster.focusable.findElement({\n          container: moverElement,\n          ignoreUncontrolled: true,\n          isBackward: state.isBackward,\n          acceptCondition: el => {\n            var _a;\n            const id = getElementUId(this._win, el);\n            const visibility = this._visible[id];\n            return moverElement !== el && !!((_a = this._allElements) === null || _a === void 0 ? void 0 : _a.get(el)) && state.acceptCondition(el) && (visibility === Visibilities.Visible || visibility === Visibilities.PartiallyVisible && (visibilityAware === Visibilities.PartiallyVisible || !this._fullyVisible));\n          }\n        });\n        if (found) {\n          state.found = true;\n          state.foundElement = found;\n          state.lastToIgnore = moverElement;\n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }\n    }\n    return undefined;\n  }\n  _observeState() {\n    const element = this.getElement();\n    if (this._unobserve || !element || typeof MutationObserver === \"undefined\") {\n      return;\n    }\n    const win = this._win();\n    const allElements = this._allElements = new WeakMap();\n    const tabsterFocusable = this._tabster.focusable;\n    let updateQueue = this._updateQueue = [];\n    const observer = new MutationObserver(mutations => {\n      for (const mutation of mutations) {\n        const target = mutation.target;\n        const removed = mutation.removedNodes;\n        const added = mutation.addedNodes;\n        if (mutation.type === \"attributes\") {\n          if (mutation.attributeName === \"tabindex\") {\n            updateQueue.push({\n              element: target,\n              type: _moverUpdateAttr\n            });\n          }\n        } else {\n          for (let i = 0; i < removed.length; i++) {\n            updateQueue.push({\n              element: removed[i],\n              type: _moverUpdateRemove\n            });\n          }\n          for (let i = 0; i < added.length; i++) {\n            updateQueue.push({\n              element: added[i],\n              type: _moverUpdateAdd\n            });\n          }\n        }\n      }\n      requestUpdate();\n    });\n    const setElement = (element, remove) => {\n      var _a, _b;\n      const current = allElements.get(element);\n      if (current && remove) {\n        (_a = this._intersectionObserver) === null || _a === void 0 ? void 0 : _a.unobserve(element);\n        allElements.delete(element);\n      }\n      if (!current && !remove) {\n        allElements.set(element, this);\n        (_b = this._intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(element);\n      }\n    };\n    const updateElement = element => {\n      const isFocusable = tabsterFocusable.isFocusable(element);\n      const current = allElements.get(element);\n      if (current) {\n        if (!isFocusable) {\n          setElement(element, true);\n        }\n      } else {\n        if (isFocusable) {\n          setElement(element);\n        }\n      }\n    };\n    const addNewElements = element => {\n      const {\n        mover\n      } = getMoverGroupper(element);\n      if (mover && mover !== this) {\n        if (mover.getElement() === element && tabsterFocusable.isFocusable(element)) {\n          setElement(element);\n        } else {\n          return;\n        }\n      }\n      const walker = createElementTreeWalker(win.document, element, node => {\n        const {\n          mover,\n          groupper\n        } = getMoverGroupper(node);\n        if (mover && mover !== this) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        const groupperFirstFocusable = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);\n        if (groupper && groupper.getElement() !== node && groupperFirstFocusable && groupperFirstFocusable !== node) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        if (tabsterFocusable.isFocusable(node)) {\n          setElement(node);\n        }\n        return NodeFilter.FILTER_SKIP;\n      });\n      if (walker) {\n        walker.currentNode = element;\n        while (walker.nextNode()) {\n          /* Iterating for the sake of calling processNode() callback. */\n        }\n      }\n    };\n    const removeWalk = element => {\n      const current = allElements.get(element);\n      if (current) {\n        setElement(element, true);\n      }\n      for (let el = element.firstElementChild; el; el = el.nextElementSibling) {\n        removeWalk(el);\n      }\n    };\n    const requestUpdate = () => {\n      if (!this._updateTimer && updateQueue.length) {\n        this._updateTimer = win.setTimeout(() => {\n          delete this._updateTimer;\n          for (const {\n            element,\n            type\n          } of updateQueue) {\n            switch (type) {\n              case _moverUpdateAttr:\n                updateElement(element);\n                break;\n              case _moverUpdateAdd:\n                addNewElements(element);\n                break;\n              case _moverUpdateRemove:\n                removeWalk(element);\n                break;\n            }\n          }\n          updateQueue = this._updateQueue = [];\n        }, 0);\n      }\n    };\n    const getMoverGroupper = element => {\n      const ret = {};\n      for (let el = element; el; el = el.parentElement) {\n        const toe = getTabsterOnElement(this._tabster, el);\n        if (toe) {\n          if (toe.groupper && !ret.groupper) {\n            ret.groupper = toe.groupper;\n          }\n          if (toe.mover) {\n            ret.mover = toe.mover;\n            break;\n          }\n        }\n      }\n      return ret;\n    };\n    updateQueue.push({\n      element,\n      type: _moverUpdateAdd\n    });\n    requestUpdate();\n    observer.observe(element, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: [\"tabindex\"]\n    });\n    this._unobserve = () => {\n      observer.disconnect();\n    };\n  }\n  getState(element) {\n    const id = getElementUId(this._win, element);\n    if (id in this._visible) {\n      const visibility = this._visible[id] || Visibilities.Invisible;\n      const isCurrent = this._current ? this._current.get() === element : undefined;\n      return {\n        isCurrent,\n        visibility\n      };\n    }\n    return undefined;\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n/**\r\n * Calculates distance between two rectangles.\r\n *\r\n * @param ax1 first rectangle left\r\n * @param ay1 first rectangle top\r\n * @param ax2 first rectangle right\r\n * @param ay2 first rectangle bottom\r\n * @param bx1 second rectangle left\r\n * @param by1 second rectangle top\r\n * @param bx2 second rectangle right\r\n * @param by2 second rectangle bottom\r\n * @returns number, shortest distance between the rectangles.\r\n */\n\nfunction getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n  const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;\n  const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;\n  return xDistance === 0 ? yDistance : yDistance === 0 ? xDistance : Math.sqrt(xDistance * xDistance + yDistance * yDistance);\n}\nclass MoverAPI {\n  constructor(tabster, getWindow) {\n    this._init = () => {\n      this._initTimer = undefined;\n      const win = this._win();\n      win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n    this._onMoverDispose = mover => {\n      delete this._movers[mover.id];\n    };\n    this._onFocus = e => {\n      var _a;\n      for (let el = e; el; el = el.parentElement) {\n        const mover = (_a = getTabsterOnElement(this._tabster, el)) === null || _a === void 0 ? void 0 : _a.mover;\n        if (mover) {\n          mover.setCurrent(e);\n          break;\n        }\n      }\n    };\n    this._onKeyDown = async e => {\n      var _a;\n      if (this._ignoredInputTimer) {\n        this._win().clearTimeout(this._ignoredInputTimer);\n        delete this._ignoredInputTimer;\n      }\n      (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);\n      let keyCode = e.keyCode;\n      switch (keyCode) {\n        case Keys.Down:\n        case Keys.Right:\n        case Keys.Up:\n        case Keys.Left:\n        case Keys.PageDown:\n        case Keys.PageUp:\n        case Keys.Home:\n        case Keys.End:\n          break;\n        default:\n          return;\n      }\n      const tabster = this._tabster;\n      const focused = tabster.focusedElement.getFocusedElement();\n      if (!focused || (await this._isIgnoredInput(focused, keyCode))) {\n        return;\n      }\n      const ctx = RootAPI.getTabsterContext(tabster, focused, {\n        checkRtl: true\n      });\n      if (!ctx || !ctx.mover || ctx.isExcludedFromMover) {\n        return;\n      }\n      if (ctx.isGroupperFirst) {\n        if (ctx.groupper && ctx.groupper.isActive(true)) {\n          return;\n        }\n      }\n      const mover = ctx.mover;\n      const container = mover.getElement();\n      if (!container) {\n        return;\n      }\n      const focusable = tabster.focusable;\n      const moverProps = mover.getProps();\n      const direction = moverProps.direction || MoverDirections.Both;\n      const isBoth = direction === MoverDirections.Both;\n      const isVertical = isBoth || direction === MoverDirections.Vertical;\n      const isHorizontal = isBoth || direction === MoverDirections.Horizontal;\n      const isGrid = direction === MoverDirections.Grid;\n      const isCyclic = moverProps.cyclic;\n      let next;\n      let focusedElementRect;\n      let focusedElementX1 = 0;\n      let focusedElementX2 = 0;\n      if (isGrid) {\n        focusedElementRect = focused.getBoundingClientRect();\n        focusedElementX1 = Math.ceil(focusedElementRect.left);\n        focusedElementX2 = Math.floor(focusedElementRect.right);\n      }\n      if (moverProps.disableHomeEndKeys && (keyCode === Keys.Home || keyCode === Keys.End)) {\n        return;\n      }\n      if (ctx.isRtl) {\n        if (keyCode === Keys.Right) {\n          keyCode = Keys.Left;\n        } else if (keyCode === Keys.Left) {\n          keyCode = Keys.Right;\n        }\n      }\n      if (keyCode === Keys.Down && isVertical || keyCode === Keys.Right && (isHorizontal || isGrid)) {\n        next = focusable.findNext({\n          currentElement: focused,\n          container\n        });\n        if (next && isGrid) {\n          const nextElementX1 = Math.ceil(next.getBoundingClientRect().left);\n          if (focusedElementX2 > nextElementX1) {\n            next = undefined;\n          }\n        } else if (!next && isCyclic) {\n          next = focusable.findFirst({\n            container\n          });\n        }\n      } else if (keyCode === Keys.Up && isVertical || keyCode === Keys.Left && (isHorizontal || isGrid)) {\n        next = focusable.findPrev({\n          currentElement: focused,\n          container\n        });\n        if (next && isGrid) {\n          const nextElementX2 = Math.floor(next.getBoundingClientRect().right);\n          if (nextElementX2 > focusedElementX1) {\n            next = undefined;\n          }\n        } else if (!next && isCyclic) {\n          next = focusable.findLast({\n            container\n          });\n        }\n      } else if (keyCode === Keys.Home) {\n        next = focusable.findFirst({\n          container\n        });\n      } else if (keyCode === Keys.End) {\n        next = focusable.findLast({\n          container\n        });\n      } else if (keyCode === Keys.PageUp) {\n        let prevElement = focusable.findPrev({\n          currentElement: focused,\n          container\n        });\n        let pageUpElement = null;\n        while (prevElement) {\n          pageUpElement = prevElement;\n          prevElement = isElementVerticallyVisibleInContainer(this._win, prevElement) ? focusable.findPrev({\n            currentElement: prevElement,\n            container\n          }) : null;\n        }\n        next = pageUpElement;\n        if (next) {\n          scrollIntoView(this._win, next, false);\n        }\n      } else if (keyCode === Keys.PageDown) {\n        let nextElement = focusable.findNext({\n          currentElement: focused,\n          container\n        });\n        let pageDownElement = null;\n        while (nextElement) {\n          pageDownElement = nextElement;\n          nextElement = isElementVerticallyVisibleInContainer(this._win, nextElement) ? focusable.findNext({\n            currentElement: nextElement,\n            container\n          }) : null;\n        }\n        next = pageDownElement;\n        if (next) {\n          scrollIntoView(this._win, next, true);\n        }\n      } else if (isGrid) {\n        const isBackward = keyCode === Keys.Up;\n        const ax1 = focusedElementX1; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        const ay1 = Math.ceil(focusedElementRect.top);\n        const ax2 = focusedElementX2; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n        const ay2 = Math.floor(focusedElementRect.bottom);\n        let targetElement;\n        let lastDistance;\n        let lastIntersection = 0;\n        focusable.findAll({\n          container,\n          currentElement: focused,\n          isBackward,\n          onElement: el => {\n            // Find element which has maximal intersection with the focused element horizontally,\n            // or the closest one.\n            const rect = el.getBoundingClientRect();\n            const bx1 = Math.ceil(rect.left);\n            const by1 = Math.ceil(rect.top);\n            const bx2 = Math.floor(rect.right);\n            const by2 = Math.floor(rect.bottom);\n            if (isBackward && ay1 < by2 || !isBackward && ay2 > by1) {\n              // Only consider elements which are below/above curretly focused.\n              return true;\n            }\n            const xIntersectionWidth = Math.ceil(Math.min(ax2, bx2)) - Math.floor(Math.max(ax1, bx1));\n            const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));\n            if (xIntersectionWidth > 0 && minWidth >= xIntersectionWidth) {\n              // Element intersects with the focused element on X axis.\n              const intersection = xIntersectionWidth / minWidth;\n              if (intersection > lastIntersection) {\n                targetElement = el;\n                lastIntersection = intersection;\n              }\n            } else if (lastIntersection === 0) {\n              // If we didn't have intersection, try just the closest one.\n              const distance = getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);\n              if (lastDistance === undefined || distance < lastDistance) {\n                lastDistance = distance;\n                targetElement = el;\n              }\n            } else if (lastIntersection > 0) {\n              // Element doesn't intersect, but we had intersection already, stop search.\n              return false;\n            }\n            return true;\n          }\n        });\n        next = targetElement;\n      }\n      if (next) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        nativeFocus(next);\n      }\n    };\n    this._tabster = tabster;\n    this._win = getWindow;\n    this._initTimer = getWindow().setTimeout(this._init, 0);\n    this._movers = {};\n    tabster.focusedElement.subscribe(this._onFocus);\n  }\n  dispose() {\n    var _a;\n    const win = this._win();\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      delete this._initTimer;\n    }\n    (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);\n    if (this._ignoredInputTimer) {\n      win.clearTimeout(this._ignoredInputTimer);\n      delete this._ignoredInputTimer;\n    }\n    win.removeEventListener(\"keydown\", this._onKeyDown, true);\n    Object.keys(this._movers).forEach(moverId => {\n      if (this._movers[moverId]) {\n        this._movers[moverId].dispose();\n        delete this._movers[moverId];\n      }\n    });\n  }\n  createMover(element, props) {\n    if (process.env.NODE_ENV === 'development') ;\n    const newMover = new Mover(this._tabster, element, this._onMoverDispose, props);\n    this._movers[newMover.id] = newMover;\n    return newMover;\n  }\n  async _isIgnoredInput(element, keyCode) {\n    var _a;\n    if (element.getAttribute(\"aria-expanded\") === \"true\") {\n      return true;\n    }\n    if (matchesSelector(element, _inputSelector)) {\n      let selectionStart = 0;\n      let selectionEnd = 0;\n      let textLength = 0;\n      let asyncRet;\n      if (element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\") {\n        const type = element.type;\n        const value = element.value;\n        textLength = (value || \"\").length;\n        if (type === \"email\" || type === \"number\") {\n          // For these types Chromium doesn't provide selectionStart and selectionEnd.\n          // Hence the ugly workaround to find if the caret position is changed with\n          // the keypress.\n          // TODO: Have a look at range, week, time, time, date, datetime-local.\n          if (textLength) {\n            const selection = (_a = element.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.getSelection();\n            if (selection) {\n              const initialLength = selection.toString().length;\n              const isBackward = keyCode === Keys.Left || keyCode === Keys.Up;\n              selection.modify(\"extend\", isBackward ? \"backward\" : \"forward\", \"character\");\n              if (initialLength !== selection.toString().length) {\n                // The caret is moved, so, we're not on the edge of the value.\n                // Restore original selection.\n                selection.modify(\"extend\", isBackward ? \"forward\" : \"backward\", \"character\");\n                return true;\n              } else {\n                textLength = 0;\n              }\n            }\n          }\n        } else {\n          const selStart = element.selectionStart;\n          if (selStart === null) {\n            // Do not ignore not text editable inputs like checkboxes and radios (but ignore hidden).\n            return type === \"hidden\";\n          }\n          selectionStart = selStart || 0;\n          selectionEnd = element.selectionEnd || 0;\n        }\n      } else if (element.contentEditable === \"true\") {\n        asyncRet = new (getPromise(this._win))(resolve => {\n          this._ignoredInputResolve = value => {\n            delete this._ignoredInputResolve;\n            resolve(value);\n          };\n          const win = this._win();\n          if (this._ignoredInputTimer) {\n            win.clearTimeout(this._ignoredInputTimer);\n          }\n          const {\n            anchorNode: prevAnchorNode,\n            focusNode: prevFocusNode,\n            anchorOffset: prevAnchorOffset,\n            focusOffset: prevFocusOffset\n          } = win.getSelection() || {}; // Get selection gives incorrect value if we call it syncronously onKeyDown.\n\n          this._ignoredInputTimer = win.setTimeout(() => {\n            var _a, _b, _c;\n            delete this._ignoredInputTimer;\n            const {\n              anchorNode,\n              focusNode,\n              anchorOffset,\n              focusOffset\n            } = win.getSelection() || {};\n            if (anchorNode !== prevAnchorNode || focusNode !== prevFocusNode || anchorOffset !== prevAnchorOffset || focusOffset !== prevFocusOffset) {\n              (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);\n              return;\n            }\n            selectionStart = anchorOffset || 0;\n            selectionEnd = focusOffset || 0;\n            textLength = ((_b = element.textContent) === null || _b === void 0 ? void 0 : _b.length) || 0;\n            if (anchorNode && focusNode) {\n              if (element.contains(anchorNode) && element.contains(focusNode)) {\n                if (anchorNode !== element) {\n                  let anchorFound = false;\n                  const addOffsets = node => {\n                    if (node === anchorNode) {\n                      anchorFound = true;\n                    } else if (node === focusNode) {\n                      return true;\n                    }\n                    const nodeText = node.textContent;\n                    if (nodeText && !node.firstChild) {\n                      const len = nodeText.length;\n                      if (anchorFound) {\n                        if (focusNode !== anchorNode) {\n                          selectionEnd += len;\n                        }\n                      } else {\n                        selectionStart += len;\n                        selectionEnd += len;\n                      }\n                    }\n                    let stop = false;\n                    for (let e = node.firstChild; e && !stop; e = e.nextSibling) {\n                      stop = addOffsets(e);\n                    }\n                    return stop;\n                  };\n                  addOffsets(element);\n                }\n              }\n            }\n            (_c = this._ignoredInputResolve) === null || _c === void 0 ? void 0 : _c.call(this, true);\n          }, 0);\n        });\n      }\n      if (asyncRet && !(await asyncRet)) {\n        return true;\n      }\n      if (selectionStart !== selectionEnd) {\n        return true;\n      }\n      if (selectionStart > 0 && (keyCode === Keys.Left || keyCode === Keys.Up || keyCode === Keys.Home)) {\n        return true;\n      }\n      if (selectionStart < textLength && (keyCode === Keys.Right || keyCode === Keys.Down || keyCode === Keys.End)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction observeMutations(doc, tabster, updateTabsterByAttribute, syncState) {\n  if (typeof MutationObserver === \"undefined\") {\n    return () => {\n      /* Noop */\n    };\n  }\n  const getWindow = tabster.getWindow;\n  let elementByUId;\n  const onMutation = mutations => {\n    for (const mutation of mutations) {\n      const target = mutation.target;\n      const removed = mutation.removedNodes;\n      const added = mutation.addedNodes;\n      if (mutation.type === \"attributes\") {\n        if (mutation.attributeName === TabsterAttributeName) {\n          updateTabsterByAttribute(tabster, target);\n        }\n      } else {\n        for (let i = 0; i < removed.length; i++) {\n          updateTabsterElements(removed[i], true);\n        }\n        for (let i = 0; i < added.length; i++) {\n          updateTabsterElements(added[i]);\n        }\n      }\n    }\n  };\n  function updateTabsterElements(node, removed) {\n    if (!elementByUId) {\n      elementByUId = getInstanceContext(getWindow).elementByUId;\n    }\n    processNode(node, removed);\n    const walker = createElementTreeWalker(doc, node, element => {\n      return processNode(element, removed);\n    });\n    if (walker) {\n      while (walker.nextNode()) {\n        /* Iterating for the sake of calling processNode() callback. */\n      }\n    }\n  }\n  function processNode(element, removed) {\n    var _a;\n    if (!element.getAttribute) {\n      // It might actually be a text node.\n      return NodeFilter.FILTER_SKIP;\n    }\n    const uid = element.__tabsterElementUID;\n    if (uid && elementByUId) {\n      if (removed) {\n        delete elementByUId[uid];\n      } else {\n        (_a = elementByUId[uid]) !== null && _a !== void 0 ? _a : elementByUId[uid] = new WeakHTMLElement(getWindow, element);\n      }\n    }\n    if (getTabsterOnElement(tabster, element) || element.hasAttribute(TabsterAttributeName)) {\n      updateTabsterByAttribute(tabster, element, removed);\n    }\n    return NodeFilter.FILTER_SKIP;\n  }\n  const observer = new MutationObserver(onMutation);\n  if (syncState) {\n    updateTabsterElements(getWindow().document.body);\n  }\n  observer.observe(doc, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeFilter: [TabsterAttributeName]\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst _conditionCheckTimeout = 100;\nclass ObservedElementAPI extends Subscribable {\n  constructor(tabster) {\n    super();\n    this._waiting = {};\n    this._lastRequestFocusId = 0;\n    this._observedById = {};\n    this._observedByName = {};\n    this._currentRequestTimestamp = 0;\n    this._init = () => {\n      this._initTimer = undefined;\n      this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n    this._onFocus = e => {\n      if (e) {\n        const current = this._currentRequest;\n        if (current) {\n          const delta = Date.now() - this._currentRequestTimestamp;\n          const settleTime = 300;\n          if (delta >= settleTime) {\n            // Giving some time for the focus to settle before\n            // automatically cancelling the current request on focus change.\n            delete this._currentRequest;\n            current.cancel();\n          }\n        }\n      }\n    };\n    this.onObservedElementUpdate = element => {\n      var _a;\n      const observed = (_a = getTabsterOnElement(this._tabster, element)) === null || _a === void 0 ? void 0 : _a.observed;\n      const uid = getElementUId(this._win, element);\n      let info = this._observedById[uid];\n      if (observed && documentContains(element.ownerDocument, element)) {\n        if (!info) {\n          info = this._observedById[uid] = {\n            element: new WeakHTMLElement(this._win, element)\n          };\n        }\n        observed.names.sort();\n        const observedNames = observed.names;\n        const prevNames = info.prevNames; // prevNames are already sorted\n\n        if (this._isObservedNamesUpdated(observedNames, prevNames)) {\n          if (prevNames) {\n            prevNames.forEach(prevName => {\n              const obn = this._observedByName[prevName];\n              if (obn && obn[uid]) {\n                if (Object.keys(obn).length > 1) {\n                  delete obn[uid];\n                } else {\n                  delete this._observedByName[prevName];\n                }\n              }\n            });\n          }\n          info.prevNames = observedNames;\n        }\n        observedNames.forEach(observedName => {\n          let obn = this._observedByName[observedName];\n          if (!obn) {\n            obn = this._observedByName[observedName] = {};\n          } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n          obn[uid] = info;\n          this._waitConditional(observedName);\n        });\n      } else if (info) {\n        const prevNames = info.prevNames;\n        if (prevNames) {\n          prevNames.forEach(prevName => {\n            const obn = this._observedByName[prevName];\n            if (obn && obn[uid]) {\n              if (Object.keys(obn).length > 1) {\n                delete obn[uid];\n              } else {\n                delete this._observedByName[prevName];\n              }\n            }\n          });\n        }\n        delete this._observedById[uid];\n      }\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._initTimer = this._win().setTimeout(this._init, 0);\n  }\n  dispose() {\n    const win = this._win();\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    for (const key of Object.keys(this._waiting)) {\n      this._rejectWaiting(key);\n    }\n    this._observedById = {};\n    this._observedByName = {};\n  }\n  _rejectWaiting(key, shouldResolve) {\n    const w = this._waiting[key];\n    if (w) {\n      const win = this._win();\n      if (w.timer) {\n        win.clearTimeout(w.timer);\n      }\n      if (w.conditionTimer) {\n        win.clearTimeout(w.conditionTimer);\n      }\n      if (!shouldResolve && w.reject) {\n        w.reject();\n      } else if (shouldResolve && w.resolve) {\n        w.resolve(null);\n      }\n      delete this._waiting[key];\n    }\n  }\n  _isObservedNamesUpdated(cur, prev) {\n    if (!prev || cur.length !== prev.length) {\n      return true;\n    }\n    for (let i = 0; i < cur.length; ++i) {\n      if (cur[i] !== prev[i]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\r\n   * Returns existing element by observed name\r\n   *\r\n   * @param observedName An observed name\r\n   * @param accessibility Optionally, return only if the element is accessible or focusable\r\n   * @returns HTMLElement | null\r\n   */\n\n  getElement(observedName, accessibility) {\n    const o = this._observedByName[observedName];\n    if (o) {\n      for (const uid of Object.keys(o)) {\n        let el = o[uid].element.get() || null;\n        if (el) {\n          if (accessibility === ObservedElementAccesibilities.Accessible && !this._tabster.focusable.isAccessible(el) || accessibility === ObservedElementAccesibilities.Focusable && !this._tabster.focusable.isFocusable(el, true)) {\n            el = null;\n          }\n        } else {\n          delete o[uid];\n          delete this._observedById[uid];\n        }\n        return el;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Waits for the element to appear in the DOM and returns it.\r\n   *\r\n   * @param observedName An observed name\r\n   * @param timeout Wait no longer than this timeout\r\n   * @param accessibility Optionally, wait for the element to also become accessible or focusable before returning it\r\n   * @returns Promise<HTMLElement | null>\r\n   */\n\n  waitElement(observedName, timeout, accessibility) {\n    const el = this.getElement(observedName, accessibility);\n    if (el) {\n      return {\n        result: getPromise(this._win).resolve(el),\n        cancel: () => {\n          /**/\n        }\n      };\n    }\n    let prefix;\n    if (accessibility === ObservedElementAccesibilities.Accessible) {\n      prefix = \"a\";\n    } else if (accessibility === ObservedElementAccesibilities.Focusable) {\n      prefix = \"f\";\n    } else {\n      prefix = \"_\";\n    }\n    const key = prefix + observedName;\n    let w = this._waiting[key];\n    if (w && w.request) {\n      return w.request;\n    }\n    w = this._waiting[key] = {\n      timer: this._win().setTimeout(() => {\n        if (w.conditionTimer) {\n          this._win().clearTimeout(w.conditionTimer);\n        }\n        delete this._waiting[key];\n        if (w.resolve) {\n          w.resolve(null);\n        }\n      }, timeout)\n    };\n    const promise = new (getPromise(this._win))((resolve, reject) => {\n      w.resolve = resolve;\n      w.reject = reject;\n    });\n    w.request = {\n      result: promise,\n      cancel: () => {\n        this._rejectWaiting(key, true);\n      }\n    };\n    if (accessibility && this.getElement(observedName)) {\n      // If the observed element is alread in DOM, but not accessible yet,\n      // we need to run the wait logic.\n      this._waitConditional(observedName);\n    }\n    return w.request;\n  }\n  requestFocus(observedName, timeout) {\n    const requestId = ++this._lastRequestFocusId;\n    const currentRequestFocus = this._currentRequest;\n    if (currentRequestFocus) {\n      currentRequestFocus.cancel();\n    }\n    const request = this.waitElement(observedName, timeout, ObservedElementAccesibilities.Focusable);\n    this._currentRequest = request;\n    this._currentRequestTimestamp = Date.now();\n    request.result.finally(() => {\n      if (this._currentRequest === request) {\n        delete this._currentRequest;\n      }\n    });\n    return {\n      result: request.result.then(element => this._lastRequestFocusId === requestId && element ? this._tabster.focusedElement.focus(element, true) : false),\n      cancel: () => {\n        request.cancel();\n      }\n    };\n  }\n  _waitConditional(observedName) {\n    const waitingElementKey = \"_\" + observedName;\n    const waitingAccessibleElementKey = \"a\" + observedName;\n    const waitingFocusableElementKey = \"f\" + observedName;\n    const waitingElement = this._waiting[waitingElementKey];\n    const waitingAccessibleElement = this._waiting[waitingAccessibleElementKey];\n    const waitingFocusableElement = this._waiting[waitingFocusableElementKey];\n    const win = this._win();\n    const resolve = (element, key, waiting, accessibility) => {\n      var _a;\n      const observed = (_a = getTabsterOnElement(this._tabster, element)) === null || _a === void 0 ? void 0 : _a.observed;\n      if (!observed || !observed.names.includes(observedName)) {\n        return;\n      }\n      if (waiting.timer) {\n        win.clearTimeout(waiting.timer);\n      }\n      delete this._waiting[key];\n      if (waiting.resolve) {\n        waiting.resolve(element);\n      }\n      this.trigger(element, {\n        names: [observedName],\n        details: observed.details,\n        accessibility\n      });\n    };\n    if (waitingElement) {\n      const element = this.getElement(observedName);\n      if (element && documentContains(element.ownerDocument, element)) {\n        resolve(element, waitingElementKey, waitingElement, ObservedElementAccesibilities.Any);\n      }\n    }\n    if (waitingAccessibleElement && !waitingAccessibleElement.conditionTimer) {\n      const resolveAccessible = () => {\n        const element = this.getElement(observedName);\n        if (element && documentContains(element.ownerDocument, element) && this._tabster.focusable.isAccessible(element)) {\n          resolve(element, waitingAccessibleElementKey, waitingAccessibleElement, ObservedElementAccesibilities.Accessible);\n        } else {\n          waitingAccessibleElement.conditionTimer = win.setTimeout(resolveAccessible, _conditionCheckTimeout);\n        }\n      };\n      resolveAccessible();\n    }\n    if (waitingFocusableElement && !waitingFocusableElement.conditionTimer) {\n      const resolveFocusable = () => {\n        const element = this.getElement(observedName);\n        if (element && documentContains(element.ownerDocument, element) && this._tabster.focusable.isFocusable(element, true)) {\n          resolve(element, waitingFocusableElementKey, waitingFocusableElement, ObservedElementAccesibilities.Focusable);\n        } else {\n          waitingFocusableElement.conditionTimer = win.setTimeout(resolveFocusable, _conditionCheckTimeout);\n        }\n      };\n      resolveFocusable();\n    }\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst defaultProps = {\n  areaClass: \"tabster-focus-outline-area\",\n  outlineClass: \"tabster-focus-outline\",\n  outlineColor: \"#ff4500\",\n  outlineWidth: 2,\n  zIndex: 2147483647\n};\nlet _props = defaultProps;\nclass OutlinePosition {\n  constructor(left, top, right, bottom) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n  equalsTo(other) {\n    return this.left === other.left && this.top === other.top && this.right === other.right && this.bottom === other.bottom;\n  }\n  clone() {\n    return new OutlinePosition(this.left, this.top, this.right, this.bottom);\n  }\n}\nclass OutlineAPI {\n  constructor(tabster) {\n    this._isVisible = false;\n    this._allOutlineElements = [];\n    this._init = () => {\n      this._initTimer = undefined;\n      this._tabster.keyboardNavigation.subscribe(this._onKeyboardNavigationStateChanged);\n      this._tabster.focusedElement.subscribe(this._onFocus);\n      const win = this._win();\n      win.addEventListener(\"scroll\", this._onScroll, true); // Capture!\n\n      if (this._fullScreenEventName) {\n        win.document.addEventListener(this._fullScreenEventName, this._onFullScreenChanged);\n      }\n    };\n    this._onFullScreenChanged = e => {\n      if (!this._fullScreenElementName || !e.target) {\n        return;\n      }\n      const target = e.target.body || e.target;\n      const outlineElements = this._getDOM(target);\n      if (target.ownerDocument && outlineElements) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fsElement = target.ownerDocument[this._fullScreenElementName];\n        if (fsElement) {\n          fsElement.appendChild(outlineElements.container);\n          this._fullScreenElement = fsElement;\n        } else {\n          target.ownerDocument.body.appendChild(outlineElements.container);\n          this._fullScreenElement = undefined;\n        }\n      }\n    };\n    this._onKeyboardNavigationStateChanged = () => {\n      this._onFocus(this._tabster.focusedElement.getFocusedElement());\n    };\n    this._onFocus = e => {\n      if (!this._updateElement(e) && this._isVisible) {\n        this._setVisibility(false);\n      }\n    };\n    this._onScroll = e => {\n      if (!this._outlinedElement || !OutlineAPI._isParentChild(e.target, this._outlinedElement)) {\n        return;\n      }\n      this._curPos = undefined;\n      this._setOutlinePosition();\n    };\n    this._tabster = tabster;\n    this._win = tabster.getWindow;\n    this._initTimer = this._win().setTimeout(this._init, 0);\n    if (typeof document !== \"undefined\") {\n      if (\"onfullscreenchange\" in document) {\n        this._fullScreenEventName = \"fullscreenchange\";\n        this._fullScreenElementName = \"fullscreenElement\";\n      } else if (\"onwebkitfullscreenchange\" in document) {\n        this._fullScreenEventName = \"webkitfullscreenchange\";\n        this._fullScreenElementName = \"webkitFullscreenElement\";\n      } else if (\"onmozfullscreenchange\" in document) {\n        this._fullScreenEventName = \"mozfullscreenchange\";\n        this._fullScreenElementName = \"mozFullScreenElement\";\n      } else if (\"onmsfullscreenchange\" in document) {\n        this._fullScreenEventName = \"msfullscreenchange\";\n        this._fullScreenElementName = \"msFullscreenElement\";\n      }\n    }\n  }\n  setup(props) {\n    _props = {\n      ..._props,\n      ...props\n    };\n    const win = this._win();\n    if (!win.__tabsterOutline) {\n      win.__tabsterOutline = {};\n    }\n    if (!win.__tabsterOutline.style) {\n      win.__tabsterOutline.style = appendStyles(win.document, _props);\n    }\n    if (!props || !props.areaClass) {\n      win.document.body.classList.add(defaultProps.areaClass);\n    } else {\n      win.document.body.classList.remove(defaultProps.areaClass);\n    }\n  }\n  dispose() {\n    const win = this._win();\n    if (this._initTimer) {\n      win.clearTimeout(this._initTimer);\n      this._initTimer = undefined;\n    }\n    if (this._updateTimer) {\n      win.clearTimeout(this._updateTimer);\n      this._updateTimer = undefined;\n    }\n    this._tabster.keyboardNavigation.unsubscribe(this._onKeyboardNavigationStateChanged);\n    this._tabster.focusedElement.unsubscribe(this._onFocus);\n    win.removeEventListener(\"scroll\", this._onScroll, true);\n    if (this._fullScreenEventName) {\n      win.document.removeEventListener(this._fullScreenEventName, this._onFullScreenChanged);\n    }\n    this._allOutlineElements.forEach(outlineElements => this._removeDOM(outlineElements.container));\n    this._allOutlineElements = [];\n    delete this._outlinedElement;\n    delete this._curPos;\n    delete this._curOutlineElements;\n    delete this._fullScreenElement;\n  }\n  _shouldShowCustomOutline(element) {\n    const tabsterOnElement = getTabsterOnElement(this._tabster, element);\n    if (tabsterOnElement && tabsterOnElement.outline && tabsterOnElement.outline.isIgnored) {\n      return false;\n    }\n    for (let i = element; i; i = i.parentElement) {\n      if (i.classList && i.classList.contains(_props.areaClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  _updateElement(e) {\n    this._outlinedElement = undefined;\n    if (this._updateTimer) {\n      this._win().clearTimeout(this._updateTimer);\n      this._updateTimer = undefined;\n    }\n    this._curPos = undefined;\n    if (!this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n      return false;\n    }\n    if (e) {\n      // TODO: It's hard (and not necessary) to come up with every possible\n      // condition when there should be no outline, it's better to add an\n      // API to customize the ignores.\n      if (e.tagName === \"INPUT\") {\n        const inputType = e.type;\n        const outlinedInputTypes = {\n          button: true,\n          checkbox: true,\n          file: true,\n          image: true,\n          radio: true,\n          range: true,\n          reset: true,\n          submit: true\n        };\n        if (!(inputType in outlinedInputTypes)) {\n          return false;\n        }\n      } else if (e.tagName === \"TEXTAREA\" || e.contentEditable === \"true\" || e.tagName === \"IFRAME\") {\n        return false;\n      }\n      if (!this._shouldShowCustomOutline(e)) {\n        return false;\n      }\n      if (this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n        this._outlinedElement = e;\n        this._updateOutline();\n      }\n      return true;\n    }\n    return false;\n  }\n  _updateOutline() {\n    this._setOutlinePosition();\n    if (this._updateTimer) {\n      this._win().clearTimeout(this._updateTimer);\n      this._updateTimer = undefined;\n    }\n    if (!this._outlinedElement) {\n      return;\n    }\n    this._updateTimer = this._win().setTimeout(() => {\n      this._updateTimer = undefined;\n      this._updateOutline();\n    }, 30);\n  }\n  _setVisibility(visible) {\n    this._isVisible = visible;\n    if (this._curOutlineElements) {\n      if (visible) {\n        this._curOutlineElements.container.classList.add(`${_props.outlineClass}_visible`);\n      } else {\n        this._curOutlineElements.container.classList.remove(`${_props.outlineClass}_visible`);\n        this._curPos = undefined;\n      }\n    }\n  }\n  _setOutlinePosition() {\n    if (!this._outlinedElement) {\n      return;\n    }\n    let boundingRect = getBoundingRect(this._win, this._outlinedElement);\n    const position = new OutlinePosition(boundingRect.left, boundingRect.top, boundingRect.right, boundingRect.bottom);\n    if (this._curPos && position.equalsTo(this._curPos)) {\n      return;\n    }\n    const outlineElements = this._getDOM(this._outlinedElement);\n    const win = this._outlinedElement.ownerDocument && this._outlinedElement.ownerDocument.defaultView;\n    if (!outlineElements || !win) {\n      return;\n    }\n    if (this._curOutlineElements !== outlineElements) {\n      this._setVisibility(false);\n      this._curOutlineElements = outlineElements;\n    }\n    this._curPos = position;\n    const p = position.clone();\n    let hasAbsolutePositionedParent = false;\n    let hasFixedPositionedParent = false;\n    const container = outlineElements.container;\n    const scrollingElement = container && container.ownerDocument && container.ownerDocument.scrollingElement;\n    if (!scrollingElement) {\n      return;\n    }\n    for (let parent = this._outlinedElement.parentElement; parent; parent = parent.parentElement) {\n      // The element might be partially visible within its scrollable parent,\n      // reduce the bounding rect if this is the case.\n      if (parent === this._fullScreenElement) {\n        break;\n      }\n      boundingRect = getBoundingRect(this._win, parent);\n      const win = parent.ownerDocument && parent.ownerDocument.defaultView;\n      if (!win) {\n        return;\n      }\n      const computedStyle = win.getComputedStyle(parent);\n      const position = computedStyle.position;\n      if (position === \"absolute\") {\n        hasAbsolutePositionedParent = true;\n      } else if (position === \"fixed\" || position === \"sticky\") {\n        hasFixedPositionedParent = true;\n      }\n      if (computedStyle.overflow === \"visible\") {\n        continue;\n      }\n      if (!hasAbsolutePositionedParent && !hasFixedPositionedParent || computedStyle.overflow === \"hidden\") {\n        if (boundingRect.left > p.left) {\n          p.left = boundingRect.left;\n        }\n        if (boundingRect.top > p.top) {\n          p.top = boundingRect.top;\n        }\n        if (boundingRect.right < p.right) {\n          p.right = boundingRect.right;\n        }\n        if (boundingRect.bottom < p.bottom) {\n          p.bottom = boundingRect.bottom;\n        }\n      }\n    }\n    const allRect = getBoundingRect(this._win, scrollingElement);\n    const allWidth = allRect.left + allRect.right;\n    const allHeight = allRect.top + allRect.bottom;\n    const ow = _props.outlineWidth;\n    p.left = p.left > ow ? p.left - ow : 0;\n    p.top = p.top > ow ? p.top - ow : 0;\n    p.right = p.right < allWidth - ow ? p.right + ow : allWidth;\n    p.bottom = p.bottom < allHeight - ow ? p.bottom + ow : allHeight;\n    const width = p.right - p.left;\n    const height = p.bottom - p.top;\n    if (width > ow * 2 && height > ow * 2) {\n      const leftBorderNode = outlineElements.left;\n      const topBorderNode = outlineElements.top;\n      const rightBorderNode = outlineElements.right;\n      const bottomBorderNode = outlineElements.bottom;\n      const sx = this._fullScreenElement || hasFixedPositionedParent ? 0 : win.pageXOffset;\n      const sy = this._fullScreenElement || hasFixedPositionedParent ? 0 : win.pageYOffset;\n      container.style.position = hasFixedPositionedParent ? \"fixed\" : \"absolute\";\n      container.style.background = _props.outlineColor;\n      leftBorderNode.style.width = rightBorderNode.style.width = topBorderNode.style.height = bottomBorderNode.style.height = _props.outlineWidth + \"px\";\n      leftBorderNode.style.left = topBorderNode.style.left = bottomBorderNode.style.left = p.left + sx + \"px\";\n      rightBorderNode.style.left = p.left + sx + width - ow + \"px\";\n      leftBorderNode.style.top = rightBorderNode.style.top = topBorderNode.style.top = p.top + sy + \"px\";\n      bottomBorderNode.style.top = p.top + sy + height - ow + \"px\";\n      leftBorderNode.style.height = rightBorderNode.style.height = height + \"px\";\n      topBorderNode.style.width = bottomBorderNode.style.width = width + \"px\";\n      this._setVisibility(true);\n    } else {\n      this._setVisibility(false);\n    }\n  }\n  _getDOM(contextElement) {\n    const doc = contextElement.ownerDocument;\n    const win = doc && doc.defaultView;\n    if (!doc || !win || !win.__tabsterOutline) {\n      return undefined;\n    }\n    if (!win.__tabsterOutline.style) {\n      win.__tabsterOutline.style = appendStyles(doc, _props);\n    }\n    if (!win.__tabsterOutline.elements) {\n      const outlineElements = {\n        container: doc.createElement(\"div\"),\n        left: doc.createElement(\"div\"),\n        top: doc.createElement(\"div\"),\n        right: doc.createElement(\"div\"),\n        bottom: doc.createElement(\"div\")\n      };\n      outlineElements.container.className = _props.outlineClass;\n      outlineElements.left.className = `${_props.outlineClass}__left`;\n      outlineElements.top.className = `${_props.outlineClass}__top`;\n      outlineElements.right.className = `${_props.outlineClass}__right`;\n      outlineElements.bottom.className = `${_props.outlineClass}__bottom`;\n      outlineElements.container.appendChild(outlineElements.left);\n      outlineElements.container.appendChild(outlineElements.top);\n      outlineElements.container.appendChild(outlineElements.right);\n      outlineElements.container.appendChild(outlineElements.bottom);\n      doc.body.appendChild(outlineElements.container);\n      win.__tabsterOutline.elements = outlineElements; // TODO: Make a garbage collector to remove the references\n      // to the outlines which are nowhere in the DOM anymore.\n\n      this._allOutlineElements.push(outlineElements);\n    }\n    return win.__tabsterOutline.elements;\n  }\n  _removeDOM(contextElement) {\n    const win = contextElement.ownerDocument && contextElement.ownerDocument.defaultView;\n    const outline = win && win.__tabsterOutline;\n    if (!outline) {\n      return;\n    }\n    if (outline.style && outline.style.parentNode) {\n      outline.style.parentNode.removeChild(outline.style);\n      delete outline.style;\n    }\n    const outlineElements = outline && outline.elements;\n    if (outlineElements) {\n      if (outlineElements.container.parentNode) {\n        outlineElements.container.parentNode.removeChild(outlineElements.container);\n      }\n      delete outline.elements;\n    }\n  }\n  static _isParentChild(parent, child) {\n    return child === parent ||\n    // tslint:disable-next-line:no-bitwise\n    !!(parent.compareDocumentPosition(child) & document.DOCUMENT_POSITION_CONTAINED_BY);\n  }\n}\nfunction appendStyles(document, props) {\n  const style = document.createElement(\"style\");\n  style.type = \"text/css\";\n  style.appendChild(document.createTextNode(getOutlineStyles(props)));\n  document.head.appendChild(style);\n  return style;\n}\nfunction getOutlineStyles(props) {\n  return `\n.${props.areaClass} *, .${props.areaClass} *:focus {\noutline: none !important;\n}\n\n.${props.outlineClass} {\ndisplay: none;\nposition: absolute;\nwidth: 0;\nheight: 0;\nleft: 0;\ntop: 0;\nz-index: ${props.zIndex};\n}\n\n.${props.outlineClass}.${props.outlineClass}_visible {\ndisplay: block;\n}\n\n.${props.outlineClass}__left,\n.${props.outlineClass}__top,\n.${props.outlineClass}__right,\n.${props.outlineClass}__bottom {\nposition: absolute;\nbackground: inherit;\n}`;\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Allows default or user focus behaviour on the DOM subtree\r\n * i.e. Tabster will not control focus events within an uncontrolled area\r\n */\nclass UncontrolledAPI {\n  constructor() {\n    /**/\n  }\n}\n\n/*!\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nclass Tabster {\n  constructor(tabster) {\n    this.keyboardNavigation = tabster.keyboardNavigation;\n    this.focusedElement = tabster.focusedElement;\n    this.focusable = tabster.focusable;\n    this.root = tabster.root;\n    this.uncontrolled = tabster.uncontrolled;\n    this.core = tabster;\n  }\n}\n/**\r\n * Extends Window to include an internal Tabster instance.\r\n */\n\nclass TabsterCore {\n  constructor(win, props) {\n    var _a;\n    this._forgetMemorizedElements = [];\n    this._wrappers = new Set();\n    this._version = \"3.0.6\";\n    this._noop = false;\n    this.getWindow = () => {\n      if (!this._win) {\n        throw new Error(\"Using disposed Tabster.\");\n      }\n      return this._win;\n    };\n    this._storage = createWeakMap(win);\n    this._win = win;\n    const getWindow = this.getWindow;\n    this.keyboardNavigation = new KeyboardNavigationState(getWindow);\n    this.focusedElement = new FocusedElementState(this, getWindow);\n    this.focusable = new FocusableAPI(this, getWindow);\n    this.root = new RootAPI(this, props === null || props === void 0 ? void 0 : props.autoRoot);\n    this.uncontrolled = new UncontrolledAPI();\n    this.controlTab = (_a = props === null || props === void 0 ? void 0 : props.controlTab) !== null && _a !== void 0 ? _a : true;\n    this.rootDummyInputs = !!(props === null || props === void 0 ? void 0 : props.rootDummyInputs);\n    this.internal = {\n      stopObserver: () => {\n        if (this._unobserve) {\n          this._unobserve();\n          delete this._unobserve;\n        }\n      },\n      resumeObserver: syncState => {\n        if (!this._unobserve) {\n          const doc = getWindow().document;\n          this._unobserve = observeMutations(doc, this, updateTabsterByAttribute, syncState);\n        }\n      }\n    };\n    this.internal.resumeObserver(false);\n    startFakeWeakRefsCleanup(getWindow);\n  }\n  createTabster(noRefCount) {\n    const wrapper = new Tabster(this);\n    if (!noRefCount) {\n      this._wrappers.add(wrapper);\n    }\n    return wrapper;\n  }\n  disposeTabster(wrapper, allInstances) {\n    if (allInstances) {\n      this._wrappers.clear();\n    } else {\n      this._wrappers.delete(wrapper);\n    }\n    if (this._wrappers.size === 0) {\n      this.dispose();\n    }\n  }\n  dispose() {\n    var _a, _b, _c, _d, _e, _f, _g;\n    this.internal.stopObserver();\n    const win = this._win;\n    this._forgetMemorizedElements = [];\n    if (win && this._forgetMemorizedTimer) {\n      win.clearTimeout(this._forgetMemorizedTimer);\n      delete this._forgetMemorizedTimer;\n    }\n    (_a = this.outline) === null || _a === void 0 ? void 0 : _a.dispose();\n    (_b = this.crossOrigin) === null || _b === void 0 ? void 0 : _b.dispose();\n    (_c = this.deloser) === null || _c === void 0 ? void 0 : _c.dispose();\n    (_d = this.groupper) === null || _d === void 0 ? void 0 : _d.dispose();\n    (_e = this.mover) === null || _e === void 0 ? void 0 : _e.dispose();\n    (_f = this.modalizer) === null || _f === void 0 ? void 0 : _f.dispose();\n    (_g = this.observedElement) === null || _g === void 0 ? void 0 : _g.dispose();\n    this.keyboardNavigation.dispose();\n    this.focusable.dispose();\n    this.focusedElement.dispose();\n    this.root.dispose();\n    stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);\n    clearElementCache(this.getWindow);\n    this._storage = new WeakMap();\n    this._wrappers.clear();\n    if (win) {\n      disposeInstanceContext(win);\n      delete win.__tabsterInstance;\n      delete this._win;\n    }\n  }\n  storageEntry(element, addremove) {\n    const storage = this._storage;\n    let entry = storage.get(element);\n    if (entry) {\n      if (addremove === false && Object.keys(entry).length === 0) {\n        storage.delete(element);\n      }\n    } else if (addremove === true) {\n      entry = {};\n      storage.set(element, entry);\n    }\n    return entry;\n  }\n  forceCleanup() {\n    if (!this._win) {\n      return;\n    }\n    this._forgetMemorizedElements.push(this._win.document.body);\n    if (this._forgetMemorizedTimer) {\n      return;\n    }\n    this._forgetMemorizedTimer = this._win.setTimeout(() => {\n      delete this._forgetMemorizedTimer;\n      for (let el = this._forgetMemorizedElements.shift(); el; el = this._forgetMemorizedElements.shift()) {\n        clearElementCache(this.getWindow, el);\n        FocusedElementState.forgetMemorized(this.focusedElement, el);\n      }\n    }, 0);\n    cleanupFakeWeakRefs(this.getWindow, true);\n  }\n}\nfunction forceCleanup(tabster) {\n  // The only legit case for calling this method is when you've completely removed\n  // the application DOM and not going to add the new one for a while.\n  const tabsterCore = tabster.core;\n  tabsterCore.forceCleanup();\n}\n/**\r\n * Creates an instance of Tabster, returns the current window instance if it already exists.\r\n */\n\nfunction createTabster(win, props) {\n  let tabster = getCurrentTabster(win);\n  if (tabster) {\n    return tabster.createTabster();\n  }\n  tabster = new TabsterCore(win, props);\n  win.__tabsterInstance = tabster;\n  return tabster.createTabster();\n}\n/**\r\n * Returns an instance of Tabster if it was created before or null.\r\n */\n\nfunction getTabster(win) {\n  const tabster = getCurrentTabster(win);\n  return tabster ? tabster.createTabster(true) : null;\n}\n/**\r\n * Creates a new groupper instance or returns an existing one\r\n * @param tabster Tabster instance\r\n */\n\nfunction getGroupper(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.groupper) {\n    tabsterCore.groupper = new GroupperAPI(tabsterCore, tabsterCore.getWindow);\n  }\n  return tabsterCore.groupper;\n}\n/**\r\n * Creates a new mover instance or returns an existing one\r\n * @param tabster Tabster instance\r\n */\n\nfunction getMover(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.mover) {\n    tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);\n  }\n  return tabsterCore.mover;\n}\nfunction getOutline(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.outline) {\n    tabsterCore.outline = new OutlineAPI(tabsterCore);\n  }\n  return tabsterCore.outline;\n}\n/**\r\n * Creates a new new deloser instance or returns an existing one\r\n * @param tabster Tabster instance\r\n * @param props Deloser props\r\n */\n\nfunction getDeloser(tabster, props) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.deloser) {\n    tabsterCore.deloser = new DeloserAPI(tabsterCore, props);\n  }\n  return tabsterCore.deloser;\n}\n/**\r\n * Creates a new modalizer instance or returns an existing one\r\n * @param tabster Tabster instance\r\n */\n\nfunction getModalizer(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.modalizer) {\n    tabsterCore.modalizer = new ModalizerAPI(tabsterCore);\n  }\n  return tabsterCore.modalizer;\n}\nfunction getObservedElement(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.observedElement) {\n    tabsterCore.observedElement = new ObservedElementAPI(tabsterCore);\n  }\n  return tabsterCore.observedElement;\n}\nfunction getCrossOrigin(tabster) {\n  const tabsterCore = tabster.core;\n  if (!tabsterCore.crossOrigin) {\n    getDeloser(tabster);\n    getModalizer(tabster);\n    getMover(tabster);\n    getGroupper(tabster);\n    getOutline(tabster);\n    getObservedElement(tabster);\n    tabsterCore.crossOrigin = new CrossOriginAPI(tabsterCore);\n  }\n  return tabsterCore.crossOrigin;\n}\nfunction getInternal(tabster) {\n  const tabsterCore = tabster.core;\n  return tabsterCore.internal;\n}\nfunction disposeTabster(tabster, allInstances) {\n  tabster.core.disposeTabster(tabster, allInstances);\n}\nfunction getTabsterAttribute(props, plain) {\n  const attr = JSON.stringify(props);\n  if (plain === true) {\n    return attr;\n  }\n  return {\n    [TabsterAttributeName]: attr\n  };\n}\n/**\r\n * Sets or updates Tabster attribute of the element.\r\n * @param element an element to set data-tabster attribute on.\r\n * @param newProps new Tabster props to set.\r\n * @param update if true, newProps will be merged with the existing props.\r\n *  When true and the value of a property in newProps is undefined, the property\r\n *  will be removed from the attribute.\r\n */\n\nfunction setTabsterAttribute(element, newProps, update) {\n  let props;\n  if (update) {\n    const attr = element.getAttribute(TabsterAttributeName);\n    if (attr) {\n      try {\n        props = JSON.parse(attr);\n      } catch (e) {\n        /**/\n      }\n    }\n  }\n  if (!update || !props) {\n    props = {};\n  }\n  for (const key of Object.keys(newProps)) {\n    const value = newProps[key];\n    if (value) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      props[key] = value;\n    } else {\n      delete props[key];\n    }\n  }\n  if (Object.keys(props).length > 0) {\n    element.setAttribute(TabsterAttributeName, getTabsterAttribute(props, true));\n  } else {\n    element.removeAttribute(TabsterAttributeName);\n  }\n}\n/**\r\n * Returns an instance of Tabster if it already exists on the window .\r\n * @param win window instance that could contain an Tabster instance.\r\n */\n\nfunction getCurrentTabster(win) {\n  return win.__tabsterInstance;\n}\n/**\r\n * Allows to make Tabster non operational. Intended for performance debugging (and other\r\n * kinds of debugging), you can switch Tabster off without changing the application code\r\n * that consumes it.\r\n * @param tabster a reference created by createTabster().\r\n * @param noop true if you want to make Tabster noop, false if you want to turn it back.\r\n */\n\nfunction makeNoOp(tabster, noop) {\n  const core = tabster.core;\n  if (core._noop !== noop) {\n    core._noop = noop;\n    const processNode = element => {\n      if (!element.getAttribute) {\n        return NodeFilter.FILTER_SKIP;\n      }\n      if (getTabsterOnElement(core, element) || element.hasAttribute(TabsterAttributeName)) {\n        updateTabsterByAttribute(core, element);\n      }\n      return NodeFilter.FILTER_SKIP;\n    };\n    const doc = core.getWindow().document;\n    const body = doc.body;\n    processNode(body);\n    const walker = createElementTreeWalker(doc, body, processNode);\n    if (walker) {\n      while (walker.nextNode()) {\n        /* Iterating for the sake of calling processNode() callback. */\n      }\n    }\n  }\n}\nfunction isNoOp(tabster) {\n  return tabster._noop;\n}\nexport { Types, createTabster, disposeTabster, forceCleanup, getCrossOrigin, getDeloser, getGroupper, getInternal, getModalizer, getMover, getObservedElement, getOutline, getTabster, getTabsterAttribute, isNoOp, makeNoOp, setTabsterAttribute };","map":{"version":3,"mappings":"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","names":["TabsterAttributeName","TabsterDummyInputAttributeName","DeloserEventName","ModalizerEventName","MoverEventName","ObservedElementAccesibilities","Any","Accessible","Focusable","RestoreFocusOrders","History","DeloserDefault","RootDefault","DeloserFirst","RootFirst","Visibilities","Invisible","PartiallyVisible","Visible","MoverDirections","Both","Vertical","Horizontal","Grid","GroupperTabbabilities","Unlimited","Limited","LimitedTrapFocus","getTabsterOnElement","tabster","element","storageEntry","updateTabsterByAttribute","dispose","newAttrValue","_noop","undefined","getAttribute","Types","entry","newAttr","attr","string","newValue","JSON","parse","Error","object","e","__DEV__","console","error","tabsterOnElement","oldTabsterProps","newTabsterProps","key","Object","keys","root","onRoot","modalizer","updateModalizer","part","observedElement","onObservedElementUpdate","deloser","setProps","createDeloser","createRoot","createModalizer","focusable","groupper","createGroupper","mover","createMover","observed","uncontrolled","outline","length","augmentAttribute","name","value","aug","origVal","removeAttribute","setAttribute","createEventTarget","getWindow","global","EventTarget","document","createElement","Subscribable","constructor","_callbacks","_val","subscribe","callback","index","indexOf","push","unsubscribe","splice","setVal","val","details","_callCallbacks","getVal","trigger","forEach","KeyboardNavigationState","isNavigatingWithKeyboard","_keyborg","createKeyborg","_onChange","disposeKeyborg","instance","_isBrokenIE11","_DOMRect","DOMRect","x","y","width","height","left","top","right","bottom","_uidCounter","createTreeWalker","NodeFilter","SHOW_ELEMENT","getInstanceContext","win","ctx","__tabsterInstanceContext","elementByUId","basics","Promise","WeakRef","containerBoundingRectCache","lastContainerBoundingRectCacheId","fakeWeakRefs","fakeWeakRefsStarted","disposeInstanceContext","containerBoundingRectCacheTimer","clearTimeout","fakeWeakRefsTimer","createWeakMap","WeakMap","FakeWeakRef","target","_target","deref","cleanup","fwr","forceRemove","documentContains","ownerDocument","WeakHTMLElement","data","context","ref","_ref","_data","get","getData","cleanupFakeWeakRefs","filter","startFakeWeakRefsCleanup","getWeakRef","setTimeout","stopFakeWeakRefsCleanupAndClearStorage","createElementTreeWalker","doc","acceptNode","nodeType","Node","ELEMENT_NODE","getBoundingRect","cacheId","__tabsterCacheId","cached","rect","scrollingElement","documentElement","clientWidth","clientHeight","r","getBoundingClientRect","Math","max","min","window","cId","isElementVerticallyVisibleInContainer","container","getScrollableContainer","containerRect","elementRect","scrollIntoView","alignToTop","scrollTop","el","parentElement","scrollWidth","scrollHeight","makeFocusIgnored","__shouldIgnoreFocus","shouldIgnoreFocus","getUId","wnd","rnd","Uint32Array","crypto","getRandomValues","msCrypto","i","random","srnd","toString","Date","now","join","getElementUId","uid","__tabsterElementUID","getWindowUId","__tabsterCrossOriginWindowUID","clearElementCache","parent","wel","contains","body","matchesSelector","selector","matches","msMatchesSelector","webkitMatchesSelector","call","getPromise","_lastTabsterPartId","TabsterPart","props","_tabster","_element","_props","id","getElement","getProps","DummyInput","isOutside","input","onFocusIn","relatedTarget","DummyInputManager","getLastPhantomFrom","_isBackward","shouldMoveOut","onFocusOut","tabIndex","style","position","opacity","zIndex","setProperty","isFirst","_isPhantom","isPhantom","addEventListener","_focusIn","_focusOut","__tabsterDummyContainer","_disposeTimer","_clearDisposeTimeout","removeEventListener","removeChild","setTopLeft","isIn","current","previous","compareDocumentPosition","DOCUMENT_POSITION_FOLLOWING","DummyInputManagerPriorities","Root","Modalizer","Mover","Groupper","priority","outsideByDefault","_instance","DummyInputManagerCore","moveOutWithDefaultAction","backwards","_setHandlers","_onFocusIn","_onFocusOut","getHandler","setTabbable","tabbable","ret","_lastPhantomFrom","moveWithPhantomDummy","moveOutside","isBackward","dummy","insertBefore","nextElementSibling","beforeBefore","previousElementSibling","nativeFocus","manager","dummyInput","_onFocus","first","_firstDummy","last","_lastDummy","focus","w","_wrappers","wrapper","_getCurrent","_getWindow","_scrollTimer","_reallyAddTransformOffsets","__tabsterDummy","_isOutside","_addDummyInputs","tagName","process","env","_observeMutations","force","wrappers","_unobserve","_transformElements","_addTransformOffsets","_addTimer","sort","a","b","dif","dil","elementParent","nextSibling","lastElementChild","appendChild","firstElementChild","observer","MutationObserver","actualElement","observe","childList","disconnect","from","transformElements","newTransformElements","transformElementsMap","newTransformElementsMap","scrollLeft","set","transform","getComputedStyle","getLastChild","lastChild","getAdjacentElement","prev","cur","adjacent","triggerEvent","event","createEvent","initEvent","dispatchEvent","defaultPrevented","_setInformativeStyle","weakElement","remove","removeProperty","RootDummyManager","setFocused","_setFocused","keyboardNavigation","hasFocused","focusedElement","focusFirst","focusLast","blur","_onDummyInputFocus","onDispose","fromAdjacent","_setFocusedTimer","_isFocused","eventTarget","_setTabbableTimer","RootAPI","getTabsterContext","rootDummyInputs","_dummyManager","_onDispose","controlTab","_add","_remove","dummyManager","autoRoot","_initTimer","_roots","_win","_init","_autoRoot","_autoRootInstance","rootId","rootById","newRoot","_onRootDispose","getRootByUId","__tabsterInstance","options","checkRtl","isExcludedFromMover","isGroupperFirst","isRtl","curElement","ignoreKeydown","dir","toLowerCase","excludeFromMover","curGroupper","curMover","assign","rootAPI","removed","_containerHistoryLength","DeloserItemBase","DeloserItem","_deloser","belongsTo","unshift","focusAvailable","available","findAvailable","resetFocus","resolve","DeloserHistoryByRootBase","rootUId","getLength","_history","removeDeloser","c","hasDeloser","some","d","DeloserHistoryByRoot","unshiftToDeloser","item","skip","resetQueue","DeloserHistory","DeloserAPI","getDeloser","historyByRoot","make","isActive","createInstance","hbr","h","snapshotIndex","buildElementSelector","withClass","withIndex","escapeRegExp","escapeReplaceValue","replace","className","split","cls","trim","buildSelector","isBody","Deloser","_isActive","_snapshotIndex","focusDefault","preserveExisting","we","setActive","active","getActions","clearHistory","setSnapshot","pop","isVisible","restoreFocusOrder","rootElement","findDefault","_findFirst","availableInHistory","_findInHistory","availableDefault","availableFirst","customFocusLostHandler","slice","isFocusable","noSelectorCheck","els","querySelectorAll","findFirst","_restoreFocusTimer","_scheduleRestoreFocus","_activate","_deactivate","autoDeloser","_autoDeloser","_autoDeloserInstance","_curDeloser","_onDeloserDispose","getFocusedElement","pause","_isPaused","resume","restore","curDeloser","_inDeloser","_isRestoringFocus","restoreFocus","lastFocused","getLastFocusedElement","offsetParent","deloserAPI","autoDeloserProps","getHistory","forceRestoreFocus","_transactionTimeout","_pingTimeout","_targetIdUp","CrossOriginTransactionTypes","Bootstrap","FocusElement","State","GetElement","RestoreFocusInDeloser","Ping","CrossOriginDeloserItem","trasactions","_transactions","deloserUId","reset","beginTransaction","RestoreFocusInDeloserTransaction","then","CrossOriginDeloserHistoryByRoot","transactions","CrossOriginTransaction","getOwner","knownTargets","timeout","sentTo","targetId","sendUp","owner","ownerId","beginData","_knownTargets","_sentTo","_promise","reject","_resolve","_reject","getTargets","send","begin","selfResponse","targets","transaction","type","isResponse","timestamp","sentto","_isSelfResponding","endData","_sentCount","end","_send","_inProgress","_isDone","onResponse","inProgressId","BootstrapTransaction","shouldForward","makeResponse","FocusElementTransaction","shouldSelfRespond","GetElementTransaction","findElement","forwardResult","CrossOriginStates","Focused","Blurred","Observed","DeadWindow","KeyboardNavigation","Outline","StateTransaction","state","isSelfResponse","_makeFocusedResponse","_makeBlurredResponse","_makeObservedResponse","_makeDeadWindowResponse","_makeKeyboardNavigationResponse","_makeOutlineResponse","CrossOriginElement","ownerUId","observedName","observedDetails","focusOwner","focusOwnerTimestamp","history","historyItem","CrossOriginFocusedElementState","crossOrigin","isFocusedProgrammatically","CrossOriginObservedElementState","names","deadUId","removeTarget","ignoreKeyboardNavigationStateUpdate","origOutlineSetup","getElementById","getElementData","getDeloserUID","dataOut","accessibility","isWaitElementResolved","isForwardResolved","isResolved","waitElement","result","forwardRet","deloserByUId","PingTransaction","CrossOriginTransactions","_ownerUId","transactionId","knownTarget","t","Transaction","_getTransactionClass","forwardTransaction","_owner","response","_dead","source","postMessage","stringify","_onMessage","setup","isSetUp","setSendUp","_onPageHide","_ping","_isDefaultSendUp","_onBrowserMessage","_pingTimer","_deadPromise","timer","withReject","_beginTransaction","catch","finally","deadWindows","all","map","focused","noFocusedProgrammaticallyFlag","noAccessibleCheck","_focus","focusById","elementId","focusByObservedName","elementData","requestFocus","requestId","_lastRequestFocusId","CrossOriginAPI","_onKeyboardNavigationStateChanged","_onObserved","_ctx","_outlineSetup","_blurTimer","deloserElement","_focusableSelector","FocusableAPI","_getBody","includeProgrammaticallyFocusable","noVisibleCheck","isAccessible","defaultView","computedStyle","visibility","_isHidden","ignoreDisabled","ignoreAriaDisabled","_isDisabled","hasAttribute","attrVal","findLast","findNext","findPrev","acceptCondition","isDefault","findAll","_findElements","found","currentElement","ignoreUncontrolled","ignoreAccessibiliy","onUncontrolled","onElement","elements","acceptElementState","cachedGrouppers","walker","node","_acceptElement","prepareForNextElement","shouldContinueIfNotFound","foundElement","fromCtx","currentNode","FILTER_ACCEPT","previousNode","nextNode","nextUncontrolled","FILTER_SKIP","FILTER_REJECT","lastToIgnore","currentCtx","fromMover","groupperElement","fromMoverElement","moverElement","acceptElement","Keys","Tab","Enter","Esc","Space","PageUp","PageDown","End","Home","Left","Up","Right","Down","FocusedElementState","KEYBORG_FOCUSIN","_onKeyDown","_setFocusedElement","keyCode","ctrlKey","contentEditable","shiftKey","next","findNextTabbable","lastMoverOrGroupper","nextElement","moveFrom","nextElementCtx","onBeforeFocusOut","preventDefault","isTrapped","findFn","stopImmediatePropagation","_lastResetElement","_nextVal","_lastVal","forgetMemorized","_focusFirstOrLast","tabsterFocusable","toFocus","prevTabIndex","prevAriaHidden","_setOrRemoveAttribute","lastResetElement","nextVal","_validateFocusedElement","actualContainer","isTabbingTimer","_isTabbingTimer","isTabbing","callFindNext","what","lastMoverOrGroupperElement","adjacentElement","adjacentCtx","adjacentFrom","GroupperDummyManager","tabbability","makeTabbable","_first","groupperFirstFocusable","getFirst","_shouldTabInside","isTabbable","noIfFirstIsFocused","isParentActive","g","orContainer","setFirst","GroupperAPI","_onMouseDown","_grouppers","_updateCurrent","delegated","Escape","parentCtx","_current","groupperId","newGroupper","_onGroupperDispose","forgetCurrentGrouppers","includeTarget","checkTarget","newIds","isTarget","_lastInternalId","internalId","userId","isFocused","moveOutWithDefault","onActiveChange","isPrev","modalizerElement","isOthersAccessible","_moveOutWithDefault","_onActiveChange","_modalizerParent","_setAccessibilityProps","targetDocument","ariaHiddenWalker","modalizerRoot","modalizerParent","isModalizerElement","containsModalizerRoot","containsModalizerParent","modalizerRootOnPage","modalizerParentOnPage","eventName","warn","ModalizerAPIDummyManager","modalizerAPI","activeModalizer","_modalizerAPI","_onFocusDummyInput","ModalizerAPI","_modalizers","_focusOutTimer","_restoreModalizerFocusTimer","_restoreModalizerFocus","documentBody","modalizerId","_onModalizerDispose","prevModalizer","elementFromModalizer","noFocusFirst","noFocusDefault","isNoFocusFirst","isNoFocusDefault","outsideElement","DOCUMENT_POSITION_PRECEDING","_inputSelector","MoverDummyManager","getMemorized","memorized","_getMemorized","_moverUpdateAdd","_moverUpdateAttr","_moverUpdateRemove","entries","newVisibility","fullyVisible","_fullyVisible","intersectionRatio","_visible","getState","trackState","visibilityAware","_intersectionObserver","IntersectionObserver","_onIntersection","threshold","_observeState","memorizeCurrent","_allElements","_updateQueue","_setCurrentTimer","_updateTimer","setCurrent","changed","_prevCurrent","weak","getCurrent","currentIsDummy","allElements","updateQueue","mutations","mutation","removedNodes","added","addedNodes","attributeName","requestUpdate","setElement","unobserve","delete","updateElement","addNewElements","getMoverGroupper","removeWalk","toe","subtree","attributes","attributeFilter","isCurrent","getDistance","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","xDistance","yDistance","sqrt","MoverAPI","_movers","_ignoredInputTimer","_ignoredInputResolve","_isIgnoredInput","moverProps","direction","isBoth","isVertical","isHorizontal","isGrid","isCyclic","cyclic","focusedElementRect","focusedElementX1","focusedElementX2","ceil","floor","disableHomeEndKeys","nextElementX1","nextElementX2","prevElement","pageUpElement","pageDownElement","targetElement","lastDistance","lastIntersection","xIntersectionWidth","minWidth","intersection","distance","moverId","newMover","_onMoverDispose","selectionStart","selectionEnd","textLength","asyncRet","selection","getSelection","initialLength","modify","selStart","anchorNode","prevAnchorNode","focusNode","prevFocusNode","anchorOffset","prevAnchorOffset","focusOffset","prevFocusOffset","textContent","anchorFound","addOffsets","nodeText","firstChild","len","stop","observeMutations","syncState","onMutation","updateTabsterElements","processNode","_conditionCheckTimeout","ObservedElementAPI","_currentRequest","delta","_currentRequestTimestamp","settleTime","cancel","info","_observedById","observedNames","prevNames","_isObservedNamesUpdated","prevName","obn","_observedByName","_waitConditional","_waiting","_rejectWaiting","shouldResolve","conditionTimer","o","prefix","request","promise","currentRequestFocus","waitingElementKey","waitingAccessibleElementKey","waitingFocusableElementKey","waitingElement","waitingAccessibleElement","waitingFocusableElement","waiting","includes","resolveAccessible","resolveFocusable","defaultProps","areaClass","outlineClass","outlineColor","outlineWidth","OutlinePosition","equalsTo","other","clone","OutlineAPI","_onScroll","_fullScreenEventName","_onFullScreenChanged","_fullScreenElementName","outlineElements","_getDOM","fsElement","_fullScreenElement","_updateElement","_isVisible","_setVisibility","_outlinedElement","_isParentChild","_curPos","_setOutlinePosition","__tabsterOutline","appendStyles","classList","add","_allOutlineElements","_removeDOM","_curOutlineElements","_shouldShowCustomOutline","isIgnored","inputType","outlinedInputTypes","button","checkbox","file","image","radio","range","submit","_updateOutline","visible","boundingRect","p","hasAbsolutePositionedParent","hasFixedPositionedParent","overflow","allRect","allWidth","allHeight","ow","leftBorderNode","topBorderNode","rightBorderNode","bottomBorderNode","sx","pageXOffset","sy","pageYOffset","background","contextElement","parentNode","child","DOCUMENT_POSITION_CONTAINED_BY","createTextNode","getOutlineStyles","head","UncontrolledAPI","Tabster","core","TabsterCore","Set","__VERSION__","_storage","internal","stopObserver","resumeObserver","createTabster","noRefCount","disposeTabster","allInstances","clear","size","_forgetMemorizedElements","_forgetMemorizedTimer","addremove","storage","forceCleanup","shift","tabsterCore","getCurrentTabster","getTabster","getGroupper","getMover","getOutline","getModalizer","getObservedElement","getCrossOrigin","getInternal","getTabsterAttribute","plain","setTabsterAttribute","newProps","update","makeNoOp","noop","isNoOp"],"sources":["D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Types.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Instance.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\EventTarget.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\State\\Subscribable.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\State\\KeyboardNavigation.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Utils.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Root.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Deloser.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\CrossOrigin.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Focusable.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Keys.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\State\\FocusedElement.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Groupper.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Modalizer.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Mover.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\MutationEvent.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\State\\ObservedElement.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Outline.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Uncontrolled.ts","D:\\teams-app\\qlik2\\Microsoft-Teams-Samples\\samples\\tab-personal-sso-quickstart\\js\\node_modules\\tabster\\src\\Tabster.ts"],"sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const TabsterAttributeName = \"data-tabster\";\nexport const TabsterDummyInputAttributeName = \"data-tabster-dummy\";\nexport const DeloserEventName = \"tabster:deloser\";\nexport const ModalizerEventName = \"tabster:modalizer\";\nexport const MoverEventName = \"tabster:mover\";\n\nexport interface TabsterEventWithDetails<D> extends Event {\n    details: D;\n}\n\nexport interface TabsterDOMAttribute {\n    [TabsterAttributeName]: string | undefined;\n}\n\nexport interface TabsterCoreProps {\n    autoRoot?: RootProps;\n    /**\n     * Allows all tab key presses under the tabster root to be controlled by tabster\n     * @default true\n     */\n    controlTab?: boolean;\n    /**\n     * When controlTab is false, Root doesn't have dummy inputs by default.\n     * This option allows to enable dummy inputs on Root.\n     */\n    rootDummyInputs?: boolean;\n}\n\nexport type GetTabster = () => TabsterCore;\nexport type GetWindow = () => Window;\n\nexport type SubscribableCallback<A, B = undefined> = (\n    val: A,\n    details: B\n) => void;\n\nexport interface Disposable {\n    /** @internal */\n    dispose(): void;\n}\n\nexport interface Subscribable<A, B = undefined> {\n    subscribe(callback: SubscribableCallback<A, B>): void;\n    unsubscribe(callback: SubscribableCallback<A, B>): void;\n}\n\nexport interface KeyboardNavigationState\n    extends Subscribable<boolean>,\n        Disposable {\n    isNavigatingWithKeyboard(): boolean;\n}\n\nexport interface FocusedElementDetails {\n    relatedTarget?: HTMLElement;\n    isFocusedProgrammatically?: boolean;\n}\n\nexport interface FocusedElementState\n    extends Subscribable<HTMLElement | undefined, FocusedElementDetails>,\n        Disposable {\n    getFocusedElement(): HTMLElement | undefined;\n    getLastFocusedElement(): HTMLElement | undefined;\n    focus(\n        element: HTMLElement,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): boolean;\n    focusDefault(container: HTMLElement): boolean;\n    focusFirst(props: FindFirstProps): boolean;\n    focusLast(props: FindFirstProps): boolean;\n    resetFocus(container: HTMLElement): boolean;\n}\n\nexport interface WeakHTMLElement<D = undefined> {\n    get(): HTMLElement | undefined;\n    getData(): D | undefined;\n}\n\nexport interface TabsterPart<P> {\n    readonly id: string;\n    getElement(): HTMLElement | undefined;\n    getProps(): P;\n    setProps(props: P): void;\n}\n\nexport interface ObservedElementProps {\n    names: string[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    details?: any;\n}\n\nexport interface ObservedElementDetails extends ObservedElementProps {\n    accessibility?: ObservedElementAccesibility;\n}\n\nexport interface ObservedElementAccesibilities {\n    Any: 0;\n    Accessible: 1;\n    Focusable: 2;\n}\nexport type ObservedElementAccesibility =\n    ObservedElementAccesibilities[keyof ObservedElementAccesibilities];\nexport const ObservedElementAccesibilities: ObservedElementAccesibilities = {\n    Any: 0,\n    Accessible: 1,\n    Focusable: 2,\n};\n\nexport interface ObservedElementAsyncRequest<T> {\n    result: Promise<T>;\n    cancel(): void;\n}\n\ninterface ObservedElementAPIInternal {\n    /** @internal */\n    onObservedElementUpdate(element: HTMLElement): void;\n}\n\nexport interface ObservedElementAPI\n    extends Subscribable<HTMLElement, ObservedElementDetails>,\n        Disposable,\n        ObservedElementAPIInternal {\n    getElement(\n        observedName: string,\n        accessibility?: ObservedElementAccesibility\n    ): HTMLElement | null;\n    waitElement(\n        observedName: string,\n        timeout: number,\n        accessibility?: ObservedElementAccesibility\n    ): ObservedElementAsyncRequest<HTMLElement | null>;\n    requestFocus(\n        observedName: string,\n        timeout: number\n    ): ObservedElementAsyncRequest<boolean>;\n}\n\nexport interface CrossOriginElement {\n    readonly uid: string;\n    readonly ownerId: string;\n    readonly id?: string;\n    readonly rootId?: string;\n    readonly observedName?: string;\n    readonly observedDetails?: string;\n    focus(\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean>;\n}\n\nexport interface CrossOriginSentTo {\n    [id: string]: true;\n}\n\nexport interface CrossOriginTransactionTypes {\n    Bootstrap: 1;\n    FocusElement: 2;\n    State: 3;\n    GetElement: 4;\n    RestoreFocusInDeloser: 5;\n    Ping: 6;\n}\nexport type CrossOriginTransactionType =\n    CrossOriginTransactionTypes[keyof CrossOriginTransactionTypes];\n\nexport interface CrossOriginTransactionData<I, O> {\n    transaction: string;\n    type: CrossOriginTransactionType;\n    isResponse: boolean;\n    timestamp: number;\n    owner: string;\n    sentto: CrossOriginSentTo;\n    timeout?: number;\n    target?: string;\n    beginData?: I;\n    endData?: O;\n}\n\nexport type CrossOriginTransactionSend = (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: CrossOriginTransactionData<any, any>\n) => void;\n\nexport interface CrossOriginMessage {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data: CrossOriginTransactionData<any, any>;\n    send: CrossOriginTransactionSend;\n}\n\nexport interface CrossOriginFocusedElementState\n    extends Subscribable<CrossOriginElement | undefined, FocusedElementDetails>,\n        Disposable {\n    focus(\n        element: CrossOriginElement,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean>;\n    focusById(\n        elementId: string,\n        rootId?: string,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean>;\n    focusByObservedName(\n        observedName: string,\n        timeout?: number,\n        rootId?: string,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean>;\n}\n\nexport interface CrossOriginObservedElementState\n    extends Subscribable<CrossOriginElement, ObservedElementProps>,\n        Disposable {\n    getElement(\n        observedName: string,\n        accessibility?: ObservedElementAccesibility\n    ): Promise<CrossOriginElement | null>;\n    waitElement(\n        observedName: string,\n        timeout: number,\n        accessibility?: ObservedElementAccesibility\n    ): Promise<CrossOriginElement | null>;\n    requestFocus(observedName: string, timeout: number): Promise<boolean>;\n}\n\nexport interface CrossOriginAPI {\n    focusedElement: CrossOriginFocusedElementState;\n    observedElement: CrossOriginObservedElementState;\n\n    setup(\n        sendUp?: CrossOriginTransactionSend | null\n    ): (msg: CrossOriginMessage) => void;\n    isSetUp(): boolean;\n    dispose(): void;\n}\n\nexport interface OutlineProps {\n    areaClass: string;\n    outlineClass: string;\n    outlineColor: string;\n    outlineWidth: number;\n    zIndex: number;\n}\n\nexport interface OutlinedElementProps {\n    isIgnored?: boolean;\n}\n\nexport interface OutlineAPI extends Disposable {\n    setup(props?: Partial<OutlineProps>): void;\n}\n\nexport interface DeloserElementActions {\n    focusDefault: () => boolean;\n    focusFirst: () => boolean;\n    resetFocus: () => boolean;\n    clearHistory: (preserveExisting?: boolean) => void;\n    setSnapshot: (index: number) => void;\n    isActive: () => boolean;\n}\n\nexport interface RestoreFocusOrders {\n    History: 0;\n    DeloserDefault: 1;\n    RootDefault: 2;\n    DeloserFirst: 3;\n    RootFirst: 4;\n}\nexport type RestoreFocusOrder = RestoreFocusOrders[keyof RestoreFocusOrders];\nexport const RestoreFocusOrders: RestoreFocusOrders = {\n    History: 0,\n    DeloserDefault: 1,\n    RootDefault: 2,\n    DeloserFirst: 3,\n    RootFirst: 4,\n};\n\nexport interface DeloserProps {\n    restoreFocusOrder?: RestoreFocusOrder;\n    noSelectorCheck?: boolean;\n}\n\nexport interface Deloser extends TabsterPart<DeloserProps> {\n    readonly uid: string;\n    dispose(): void;\n    isActive(): boolean;\n    setActive(active: boolean): void;\n    getActions(): DeloserElementActions;\n    setSnapshot(index: number): void;\n    focusFirst(): boolean;\n    unshift(element: HTMLElement): void;\n    focusDefault(): boolean;\n    resetFocus(): boolean;\n    findAvailable(): HTMLElement | null;\n    clearHistory(preserveExisting?: boolean): void;\n    customFocusLostHandler(element: HTMLElement): boolean;\n}\n\nexport type DeloserConstructor = (\n    element: HTMLElement,\n    props: DeloserProps\n) => Deloser;\n\ninterface DeloserInterfaceInternal {\n    /** @internal */\n    createDeloser(element: HTMLElement, props: DeloserProps): Deloser;\n}\n\nexport interface DeloserAPI extends DeloserInterfaceInternal, Disposable {\n    getActions(element: HTMLElement): DeloserElementActions | undefined;\n    pause(): void;\n    resume(restore?: boolean): void;\n}\n\nexport interface FocusableProps {\n    isDefault?: boolean;\n    isIgnored?: boolean;\n    /**\n     * Do not determine an element's focusability based on aria-disabled.\n     */\n    ignoreAriaDisabled?: boolean;\n    /**\n     * Exclude element (and all subelements) from Mover navigation.\n     */\n    excludeFromMover?: boolean;\n    /**\n     * Prevents tabster from handling the keydown event\n     */\n    ignoreKeydown?: {\n        Tab?: boolean;\n        Escape?: boolean;\n        Enter?: boolean;\n    };\n}\n\nexport interface FocusableAcceptElementState {\n    container: HTMLElement;\n    currentCtx?: TabsterContext;\n    from: HTMLElement;\n    fromCtx?: TabsterContext;\n    isBackward?: boolean;\n    found?: boolean;\n    foundElement?: HTMLElement;\n    lastToIgnore?: HTMLElement;\n    uncontrolled?: HTMLElement;\n    nextUncontrolled?: HTMLElement;\n    acceptCondition: (el: HTMLElement) => boolean;\n    includeProgrammaticallyFocusable?: boolean;\n    ignoreUncontrolled?: boolean;\n    ignoreAccessibiliy?: boolean;\n    cachedGrouppers: {\n        [id: string]: {\n            isActive: boolean | undefined;\n            first?: HTMLElement | null;\n        };\n    };\n    isFindAll?: boolean;\n}\n\nexport interface FindFocusableProps {\n    /**\n     * The container used for the search\n     */\n    container?: HTMLElement;\n    /**\n     * The elemet to start from\n     */\n    currentElement?: HTMLElement;\n    /**\n     * includes elements that can be focused programmatically\n     */\n    includeProgrammaticallyFocusable?: boolean;\n    // ignoreGroupper?: boolean;\n    /**\n     * Ignore uncontrolled areas.\n     */\n    ignoreUncontrolled?: boolean;\n    /**\n     * Ignore accessibility check.\n     */\n    ignoreAccessibiliy?: boolean;\n    /**\n     * If true, find previous element instead of the next one.\n     */\n    isBackward?: boolean;\n    /**\n     * @param el element visited\n     * @returns if an element should be accepted\n     */\n    acceptCondition?(el: HTMLElement): boolean;\n    /**\n     * A callback that will be called if an uncontrolled area is met.\n     * @param el uncontrolled element.\n     */\n    onUncontrolled?(el: HTMLElement): void;\n    /**\n     * A callback that will be called for every focusable element found during findAll().\n     * If false is returned from this callback, the search will stop.\n     */\n    onElement?: FindElementCallback;\n}\n\nexport type FindFirstProps = Pick<\n    FindFocusableProps,\n    | \"container\"\n    | \"includeProgrammaticallyFocusable\"\n    | \"ignoreUncontrolled\"\n    | \"ignoreAccessibiliy\"\n>;\n\nexport type FindNextProps = Pick<\n    FindFocusableProps,\n    | \"currentElement\"\n    | \"container\"\n    | \"includeProgrammaticallyFocusable\"\n    | \"ignoreUncontrolled\"\n    | \"ignoreAccessibiliy\"\n    | \"onUncontrolled\"\n>;\n\nexport type FindDefaultProps = Pick<\n    FindFocusableProps,\n    \"container\" | \"includeProgrammaticallyFocusable\" | \"ignoreAccessibiliy\"\n>;\n\nexport type FindAllProps = Pick<\n    FindFocusableProps,\n    | \"container\"\n    | \"currentElement\"\n    | \"isBackward\"\n    | \"includeProgrammaticallyFocusable\"\n    | \"acceptCondition\"\n    | \"ignoreUncontrolled\"\n    | \"ignoreAccessibiliy\"\n    | \"onElement\"\n> & {\n    container: HTMLElement;\n};\n\n/**\n * A callback that is called for every found element during search. Returning false stops search.\n */\nexport type FindElementCallback = (element: HTMLElement) => boolean;\n\nexport interface FocusableAPI extends Disposable {\n    getProps(element: HTMLElement): FocusableProps;\n\n    isFocusable(\n        element: HTMLElement,\n        includeProgrammaticallyFocusable?: boolean,\n        noVisibleCheck?: boolean,\n        noAccessibleCheck?: boolean\n    ): boolean;\n    isVisible(element: HTMLElement): boolean;\n    isAccessible(element: HTMLElement): boolean;\n    // find* return null when there is no element and undefined when there is an uncontrolled area.\n    findFirst(options: FindFirstProps): HTMLElement | null | undefined;\n    findLast(options: FindFirstProps): HTMLElement | null | undefined;\n    findNext(options: FindNextProps): HTMLElement | null | undefined;\n    findPrev(options: FindNextProps): HTMLElement | null | undefined;\n    findDefault(options: FindDefaultProps): HTMLElement | null;\n    /**\n     * @returns All focusables in a given context that satisfy an given condition\n     */\n    findAll(options: FindAllProps): HTMLElement[];\n    findElement(options: FindFocusableProps): HTMLElement | null | undefined;\n}\n\nexport interface DummyInputManager {\n    moveOutWithDefaultAction: (backwards: boolean) => void;\n}\n\nexport interface Visibilities {\n    Invisible: 0;\n    PartiallyVisible: 1;\n    Visible: 2;\n}\nexport const Visibilities: Visibilities = {\n    Invisible: 0,\n    PartiallyVisible: 1,\n    Visible: 2,\n};\nexport type Visibility = Visibilities[keyof Visibilities];\n\nexport interface MoverElementState {\n    isCurrent: boolean | undefined; // Tri-state bool. Undefined when there is no current in the container.\n    visibility: Visibility;\n}\n\nexport interface MoverDirections {\n    Both: 0; // Default, both left/up keys move to the previous, right/down move to the next.\n    Vertical: 1; // Only up/down arrows move to the next/previous.\n    Horizontal: 2; // Only left/right arrows move to the next/previous.\n    Grid: 3; // Two-dimentional movement depending on the visual placement.\n}\nexport const MoverDirections: MoverDirections = {\n    Both: 0,\n    Vertical: 1,\n    Horizontal: 2,\n    Grid: 3,\n};\nexport type MoverDirection = MoverDirections[keyof MoverDirections];\n\nexport type NextTabbable = {\n    element: HTMLElement | null | undefined;\n    uncontrolled?: HTMLElement;\n    lastMoverOrGroupper?: Mover | Groupper;\n};\n\nexport interface MoverProps {\n    direction?: MoverDirection;\n    memorizeCurrent?: boolean;\n    tabbable?: boolean;\n    /**\n     * Whether to allow cyclic navigation in the mover\n     * Can only be applied if navigationType is MoverKeys.Arrows\n     *\n     * @defaultValue false\n     */\n    cyclic?: boolean;\n    /**\n     * In case we need a rich state of the elements inside a Mover,\n     * we can track it. It takes extra resourses and might affect\n     * performance when a Mover has many elements inside, so make sure\n     * you use this prop when it is really needed.\n     */\n    trackState?: boolean;\n    /**\n     * When set to Visibility.Visible or Visibility.PartiallyVisible,\n     * uses the visibility part of the trackState prop to be able to\n     * go to first/last visible element (instead of first/last focusable\n     * element in DOM) when tabbing from outside of the mover.\n     */\n    visibilityAware?: Visibility;\n    disableHomeEndKeys?: boolean;\n}\n\nexport type MoverEvent = TabsterEventWithDetails<MoverElementState>;\n\nexport interface Mover extends TabsterPart<MoverProps> {\n    readonly id: string;\n    readonly dummyManager: DummyInputManager | undefined;\n    dispose(): void;\n    setCurrent(element: HTMLElement | undefined): void;\n    getCurrent(): HTMLElement | null;\n    getState(element: HTMLElement): MoverElementState | undefined;\n    findNextTabbable(\n        current?: HTMLElement,\n        isBackward?: boolean\n    ): NextTabbable | null;\n    acceptElement(\n        element: HTMLElement,\n        state: FocusableAcceptElementState\n    ): number | undefined;\n}\n\nexport type MoverConstructor = (\n    tabster: TabsterCore,\n    element: HTMLElement,\n    props: MoverProps\n) => Mover;\n\ninterface MoverAPIInternal {\n    /** @internal */\n    createMover(element: HTMLElement, props: MoverProps): Mover;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MoverAPI extends MoverAPIInternal, Disposable {}\n\nexport interface GroupperTabbabilities {\n    Unlimited: 0;\n    Limited: 1; // The tabbability is limited to the container and explicit Enter is needed to go inside.\n    LimitedTrapFocus: 2; // The focus is limited as above, plus trapped when inside.\n}\nexport const GroupperTabbabilities: GroupperTabbabilities = {\n    Unlimited: 0,\n    Limited: 1,\n    LimitedTrapFocus: 2,\n};\nexport type GroupperTabbability =\n    GroupperTabbabilities[keyof GroupperTabbabilities];\n\nexport interface GroupperProps {\n    tabbability?: GroupperTabbability;\n    delegated?: boolean; // This allows to tweak the groupper behaviour for the cases when\n    // the groupper container is not focusable and groupper has Limited or LimitedTrapFocus\n    // tabbability. By default, the groupper will automatically become active once the focus\n    // goes to first focusable element inside the groupper during tabbing. When true, the\n    // groupper will become active only after Enter is pressed on first focusable element\n    // inside the groupper.\n}\n\nexport interface Groupper extends TabsterPart<GroupperProps> {\n    readonly id: string;\n    readonly dummyManager: DummyInputManager | undefined;\n    dispose(): void;\n    makeTabbable(isUnlimited: boolean): void;\n    isActive(noIfFirstIsFocused?: boolean): boolean | undefined; // Tri-state boolean, undefined when parent is not active, false when parent is active.\n    setFirst(element: HTMLElement | undefined): void;\n    getFirst(orContainer: boolean): HTMLElement | undefined;\n    findNextTabbable(\n        current?: HTMLElement,\n        isBackward?: boolean\n    ): NextTabbable | null;\n    acceptElement(\n        element: HTMLElement,\n        state: FocusableAcceptElementState\n    ): number | undefined;\n}\n\nexport type GroupperConstructor = (\n    tabster: TabsterCore,\n    element: HTMLElement,\n    props: GroupperProps\n) => Groupper;\n\nexport interface GroupperAPIInternal {\n    /** @internal */\n    createGroupper(element: HTMLElement, props: GroupperProps): Groupper;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface GroupperAPI extends GroupperAPIInternal, Disposable {}\n\nexport interface GroupperAPIInternal {\n    forgetCurrentGrouppers(): void;\n}\n\nexport interface ModalizerProps {\n    id: string;\n    isOthersAccessible?: boolean;\n    isAlwaysAccessible?: boolean;\n    isNoFocusFirst?: boolean;\n    isNoFocusDefault?: boolean;\n    /** A focus trap variant, keeps focus inside the modal when tabbing */\n    isTrapped?: boolean;\n}\n\nexport type ModalizerEventDetails = { eventName: \"beforefocusout\" };\n\nexport type ModalizerEvent = TabsterEventWithDetails<ModalizerEventDetails>;\n\nexport interface Modalizer extends TabsterPart<ModalizerProps> {\n    readonly internalId: string;\n    readonly userId: string;\n    /**\n     * @returns - Whether the element is inside the modalizer\n     */\n    contains(element: HTMLElement): boolean;\n    dispose(): void;\n    isActive(): boolean;\n    onBeforeFocusOut(): boolean;\n    /**\n     * Sets the active state of the modalizr\n     * When active, sets `aria-hidden` on all other elements\n     * Reverts `aria-hidden` changes when set to inactive\n     *\n     * @param active Whether the modalizer is active\n     */\n    setActive(active: boolean): void;\n}\n\nexport type ModalizerConstructor = (\n    tabster: TabsterCore,\n    element: HTMLElement,\n    props: ModalizerProps\n) => Modalizer;\n\nexport interface RootProps {\n    restoreFocusOrder?: RestoreFocusOrder;\n}\n\nexport interface Root extends TabsterPart<RootProps> {\n    readonly uid: string;\n    dispose(): void;\n    moveOutWithDefaultAction(backwards: boolean): void;\n}\n\nexport type RootConstructor = (\n    tabster: TabsterCore,\n    element: HTMLElement,\n    props: RootProps\n) => Root;\n\nexport interface GetTabsterContextOptions {\n    /**\n     * Should visit **all** element ancestors to verify if `dir='rtl'` is set\n     */\n    checkRtl?: boolean;\n}\n\nexport type TabsterContextMoverGroupper =\n    | { isMover: true; mover: Mover }\n    | { isMover: false; groupper: Groupper };\n\nexport interface TabsterContext {\n    root: Root;\n    modalizer?: Modalizer;\n    groupper?: Groupper;\n    mover?: Mover;\n    isGroupperFirst?: boolean;\n    /**\n     * Whether `dir='rtl'` is set on an ancestor\n     */\n    isRtl?: boolean;\n    /**\n     * The uncontrolled container of this element (if any).\n     */\n    uncontrolled?: HTMLElement;\n    isExcludedFromMover?: boolean;\n    ignoreKeydown: NonNullable<FocusableProps[\"ignoreKeydown\"]>;\n}\n\nexport interface RootFocusEventDetails {\n    element: HTMLElement;\n    fromAdjacent?: boolean;\n}\n\ninterface RootAPIInternal {\n    /**@internal*/\n    createRoot(element: HTMLElement, props: RootProps): Root;\n    /**@internal*/\n    onRoot(root: Root, removed?: boolean): void;\n}\n\nexport interface RootAPI extends Disposable, RootAPIInternal {\n    eventTarget: EventTarget;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface UncontrolledAPI {}\n\ninterface ModalizerAPIInternal {\n    /** @internal */\n    createModalizer(element: HTMLElement, props: ModalizerProps): Modalizer;\n    /** @internal */\n    updateModalizer: (modalizer: Modalizer, removed?: boolean) => void;\n}\n\nexport interface ModalizerAPI extends ModalizerAPIInternal, Disposable {\n    /**\n     * Activates a Modalizer and focuses the first or default element within\n     *\n     * @param elementFromModalizer An element that belongs to a Modalizer\n     * @param noFocusFirst Do not focus on the first element in the Modalizer\n     * @param noFocusDefault Do not focus the default element in the Modalizre\n     */\n    focus(\n        elementFromModalizer: HTMLElement,\n        noFocusFirst?: boolean,\n        noFocusDefault?: boolean\n    ): boolean;\n}\n\nexport interface DeloserOnElement {\n    deloser: Deloser;\n}\n\nexport interface RootOnElement {\n    root: Root;\n}\n\nexport interface ModalizerOnElement {\n    modalizer: Modalizer;\n}\n\nexport interface FocusableOnElement {\n    focusable: FocusableProps;\n}\n\nexport interface MoverOnElement {\n    mover: Mover;\n}\n\nexport interface GroupperOnElement {\n    groupper: Groupper;\n}\n\nexport interface UncontrolledOnElement {\n    uncontrolled: Record<string, never>;\n}\n\nexport interface ObservedOnElement {\n    observed: ObservedElementProps;\n}\n\nexport interface OutlineOnElement {\n    outline: OutlinedElementProps;\n}\n\nexport type TabsterAttributeProps = Partial<{\n    deloser: DeloserProps;\n    root: RootProps;\n    uncontrolled: UncontrolledOnElement[\"uncontrolled\"];\n    modalizer: ModalizerProps;\n    focusable: FocusableProps;\n    groupper: GroupperProps;\n    mover: MoverProps;\n    observed: ObservedElementProps;\n    outline: OutlinedElementProps;\n}>;\n\nexport interface TabsterAttributeOnElement {\n    string: string;\n    object: TabsterAttributeProps;\n}\n\nexport interface TabsterAugmentedAttributes {\n    [name: string]: string | null;\n}\n\nexport type TabsterOnElement = Partial<\n    RootOnElement &\n        DeloserOnElement &\n        ModalizerOnElement &\n        FocusableOnElement &\n        MoverOnElement &\n        GroupperOnElement &\n        ObservedOnElement &\n        OutlineOnElement &\n        UncontrolledOnElement\n>;\n\nexport interface OutlineElements {\n    container: HTMLDivElement;\n    left: HTMLDivElement;\n    top: HTMLDivElement;\n    right: HTMLDivElement;\n    bottom: HTMLDivElement;\n}\n\nexport interface TabsterElementStorageEntry {\n    tabster?: TabsterOnElement;\n    attr?: TabsterAttributeOnElement;\n    aug?: TabsterAugmentedAttributes;\n}\n\nexport interface TabsterElementStorage {\n    [uid: string]: TabsterElementStorageEntry;\n}\n\nexport type DisposeFunc = () => void;\n\nexport interface InternalAPI {\n    stopObserver(): void;\n    resumeObserver(syncState: boolean): void;\n}\n\ninterface TabsterCoreInternal {\n    /** @internal */\n    groupper?: GroupperAPI;\n    /** @internal */\n    mover?: MoverAPI;\n    /** @internal */\n    outline?: OutlineAPI;\n    /** @internal */\n    deloser?: DeloserAPI;\n    /** @internal */\n    modalizer?: ModalizerAPI;\n    /** @internal */\n    observedElement?: ObservedElementAPI;\n    /** @internal */\n    crossOrigin?: CrossOriginAPI;\n    /** @internal */\n    internal: InternalAPI;\n\n    // The version of the tabster package this instance is on\n    /** @internal */\n    _version: string;\n\n    // No operation flag for the debugging purposes\n    /** @internal */\n    _noop: boolean;\n\n    /** @internal */\n    storageEntry(\n        element: HTMLElement,\n        addremove?: boolean\n    ): TabsterElementStorageEntry | undefined;\n    /** @internal */\n    getWindow: GetWindow;\n\n    /** @internal */\n    createTabster(noRefCount?: boolean): Tabster;\n    /** @internal */\n    disposeTabster(wrapper: Tabster, allInstances?: boolean): void;\n    /** @internal */\n    forceCleanup(): void;\n}\n\nexport interface Tabster {\n    keyboardNavigation: KeyboardNavigationState;\n    focusedElement: FocusedElementState;\n    focusable: FocusableAPI;\n    root: RootAPI;\n    uncontrolled: UncontrolledAPI;\n\n    /** @internal */\n    core: TabsterCore;\n}\n\nexport interface TabsterCore\n    extends Pick<TabsterCoreProps, \"controlTab\" | \"rootDummyInputs\">,\n        Disposable,\n        TabsterCoreInternal,\n        Omit<Tabster, \"core\"> {}\n\nexport interface TabsterCompat {\n    attributeTransform?: <P>(old: P) => TabsterAttributeProps;\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as Types from \"./Types\";\n\nexport function getTabsterOnElement(\n    tabster: Types.TabsterCore,\n    element: HTMLElement\n): Types.TabsterOnElement | undefined {\n    return tabster.storageEntry(element)?.tabster;\n}\n\nexport function updateTabsterByAttribute(\n    tabster: Types.TabsterCore,\n    element: HTMLElement,\n    dispose?: boolean\n): void {\n    const newAttrValue =\n        dispose || tabster._noop\n            ? undefined\n            : element.getAttribute(Types.TabsterAttributeName);\n\n    let entry = tabster.storageEntry(element);\n    let newAttr: Types.TabsterAttributeOnElement | undefined;\n\n    if (newAttrValue) {\n        if (newAttrValue !== entry?.attr?.string) {\n            try {\n                const newValue = JSON.parse(\n                    newAttrValue\n                ) as Types.TabsterAttributeProps;\n\n                if (typeof newValue !== \"object\") {\n                    throw new Error(\n                        `Value is not a JSON object, got '${newAttrValue}'.`\n                    );\n                }\n\n                newAttr = {\n                    string: newAttrValue,\n                    object: newValue,\n                };\n            } catch (e) {\n                if (__DEV__) {\n                    console.error(\n                        `data-tabster attribute error: ${e}`,\n                        element\n                    );\n                }\n            }\n        } else {\n            return;\n        }\n    } else if (!entry) {\n        return;\n    }\n\n    if (!entry) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        entry = tabster.storageEntry(element, true)!;\n    }\n\n    if (!entry.tabster) {\n        entry.tabster = {};\n    }\n\n    const tabsterOnElement = entry.tabster || {};\n    const oldTabsterProps = entry.attr?.object || {};\n    const newTabsterProps = newAttr?.object || {};\n\n    for (const key of Object.keys(\n        oldTabsterProps\n    ) as (keyof Types.TabsterAttributeProps)[]) {\n        if (!newTabsterProps[key]) {\n            if (key === \"root\") {\n                const root = tabsterOnElement[key];\n\n                if (root) {\n                    tabster.root.onRoot(root, true);\n                }\n            } else if (key === \"modalizer\") {\n                const modalizer = tabsterOnElement.modalizer;\n\n                if (tabster.modalizer && modalizer) {\n                    tabster.modalizer.updateModalizer(modalizer, true);\n                }\n            }\n\n            switch (key) {\n                case \"deloser\":\n                case \"root\":\n                case \"groupper\":\n                case \"modalizer\":\n                case \"mover\":\n                    // eslint-disable-next-line no-case-declarations\n                    const part = tabsterOnElement[key];\n                    if (part) {\n                        part.dispose();\n                        delete tabsterOnElement[key];\n                    }\n                    break;\n\n                case \"observed\":\n                    delete tabsterOnElement[key];\n                    if (tabster.observedElement) {\n                        tabster.observedElement.onObservedElementUpdate(\n                            element\n                        );\n                    }\n                    break;\n\n                case \"focusable\":\n                case \"outline\":\n                case \"uncontrolled\":\n                    delete tabsterOnElement[key];\n                    break;\n            }\n        }\n    }\n\n    for (const key of Object.keys(\n        newTabsterProps\n    ) as (keyof Types.TabsterAttributeProps)[]) {\n        switch (key) {\n            case \"deloser\":\n                if (tabsterOnElement.deloser) {\n                    tabsterOnElement.deloser.setProps(\n                        newTabsterProps.deloser as Types.DeloserProps\n                    );\n                } else {\n                    if (tabster.deloser) {\n                        tabsterOnElement.deloser =\n                            tabster.deloser.createDeloser(\n                                element,\n                                newTabsterProps.deloser as Types.DeloserProps\n                            );\n                    } else if (__DEV__) {\n                        console.error(\n                            \"Deloser API used before initializing, please call `getDeloser()`\"\n                        );\n                    }\n                }\n                break;\n\n            case \"root\":\n                if (tabsterOnElement.root) {\n                    tabsterOnElement.root.setProps(\n                        newTabsterProps.root as Types.RootProps\n                    );\n                } else {\n                    tabsterOnElement.root = tabster.root.createRoot(\n                        element,\n                        newTabsterProps.root as Types.RootProps\n                    );\n                }\n                tabster.root.onRoot(tabsterOnElement.root);\n                break;\n\n            case \"modalizer\":\n                if (tabsterOnElement.modalizer) {\n                    tabsterOnElement.modalizer.setProps(\n                        newTabsterProps.modalizer as Types.ModalizerProps\n                    );\n                } else {\n                    if (tabster.modalizer) {\n                        tabsterOnElement.modalizer =\n                            tabster.modalizer.createModalizer(\n                                element,\n                                newTabsterProps.modalizer as Types.ModalizerProps\n                            );\n                    } else if (__DEV__) {\n                        console.error(\n                            \"Modalizer API used before initializing, please call `getModalizer()`\"\n                        );\n                    }\n                }\n                break;\n\n            case \"focusable\":\n                tabsterOnElement.focusable = newTabsterProps.focusable;\n                break;\n\n            case \"groupper\":\n                if (tabsterOnElement.groupper) {\n                    tabsterOnElement.groupper.setProps(\n                        newTabsterProps.groupper as Types.GroupperProps\n                    );\n                } else {\n                    if (tabster.groupper) {\n                        tabsterOnElement.groupper =\n                            tabster.groupper.createGroupper(\n                                element,\n                                newTabsterProps.groupper as Types.GroupperProps\n                            );\n                    } else if (__DEV__) {\n                        console.error(\n                            \"Groupper API used before initializing, please call `getGroupper()`\"\n                        );\n                    }\n                }\n                break;\n\n            case \"mover\":\n                if (tabsterOnElement.mover) {\n                    tabsterOnElement.mover.setProps(\n                        newTabsterProps.mover as Types.MoverProps\n                    );\n                } else {\n                    if (tabster.mover) {\n                        tabsterOnElement.mover = tabster.mover.createMover(\n                            element,\n                            newTabsterProps.mover as Types.MoverProps\n                        );\n                    } else if (__DEV__) {\n                        console.error(\n                            \"Mover API used before initializing, please call `getMover()`\"\n                        );\n                    }\n                }\n                break;\n\n            case \"observed\":\n                if (tabster.observedElement) {\n                    tabsterOnElement.observed = newTabsterProps.observed;\n                    tabster.observedElement.onObservedElementUpdate(element);\n                } else if (__DEV__) {\n                    console.error(\n                        \"ObservedElement API used before initializing, please call `getObservedElement()`\"\n                    );\n                }\n                break;\n\n            case \"uncontrolled\":\n                tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;\n                break;\n\n            case \"outline\":\n                if (tabster.outline) {\n                    tabsterOnElement.outline = newTabsterProps.outline;\n                } else if (__DEV__) {\n                    console.error(\n                        \"Outline API used before initializing, please call `getOutline()`\"\n                    );\n                }\n                break;\n\n            default:\n                console.error(\n                    `Unknown key '${key}' in data-tabster attribute value.`\n                );\n        }\n    }\n\n    if (newAttr) {\n        entry.attr = newAttr;\n    } else {\n        if (Object.keys(tabsterOnElement).length === 0) {\n            delete entry.tabster;\n            delete entry.attr;\n        }\n        tabster.storageEntry(element, false);\n    }\n}\n\nexport function augmentAttribute(\n    tabster: Types.TabsterCore,\n    element: HTMLElement,\n    name: string,\n    value?: string | null // Restore original value when undefined.\n): void {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const entry = tabster.storageEntry(element, true)!;\n\n    if (!entry.aug) {\n        if (value === undefined) {\n            return;\n        }\n\n        entry.aug = {};\n    }\n\n    if (value === undefined) {\n        if (name in entry.aug) {\n            const origVal = entry.aug[name];\n\n            delete entry.aug[name];\n\n            if (origVal === null) {\n                element.removeAttribute(name);\n            } else {\n                element.setAttribute(name, origVal);\n            }\n        }\n    } else {\n        if (!(name in entry.aug)) {\n            entry.aug[name] = element.getAttribute(name);\n        }\n\n        if (value === null) {\n            element.removeAttribute(name);\n        } else {\n            element.setAttribute(name, value);\n        }\n    }\n\n    if (value === undefined && Object.keys(entry.aug).length === 0) {\n        delete entry.aug;\n        tabster.storageEntry(element, false);\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport type { GetWindow } from \"./Types\";\n\nexport function createEventTarget(getWindow: GetWindow): EventTarget {\n    const global = getWindow() as unknown as typeof globalThis;\n\n    if (global.EventTarget) {\n        return new global.EventTarget();\n    }\n\n    return global.document.createElement(\"div\");\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as Types from \"../Types\";\n\nexport abstract class Subscribable<A, B = undefined>\n    implements Types.Subscribable<A, B>\n{\n    protected _val: A | undefined;\n    private _callbacks: Types.SubscribableCallback<A, B>[] = [];\n\n    dispose(): void {\n        this._callbacks = [];\n        delete this._val;\n    }\n\n    subscribe(callback: Types.SubscribableCallback<A, B>): void {\n        const index = this._callbacks.indexOf(callback);\n\n        if (index < 0) {\n            this._callbacks.push(callback);\n        }\n    }\n\n    unsubscribe(callback: Types.SubscribableCallback<A, B>): void {\n        const index = this._callbacks.indexOf(callback);\n\n        if (index >= 0) {\n            this._callbacks.splice(index, 1);\n        }\n    }\n\n    protected setVal(val: A, details: B): void {\n        if (this._val === val) {\n            return;\n        }\n\n        this._val = val;\n\n        this._callCallbacks(val, details);\n    }\n\n    protected getVal(): A | undefined {\n        return this._val;\n    }\n\n    protected trigger(val: A, details: B): void {\n        this._callCallbacks(val, details);\n    }\n\n    private _callCallbacks(val: A, details: B): void {\n        this._callbacks.forEach((callback) => callback(val, details));\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { createKeyborg, disposeKeyborg, Keyborg } from \"keyborg\";\n\nimport * as Types from \"../Types\";\nimport { Subscribable } from \"./Subscribable\";\n\nexport class KeyboardNavigationState\n    extends Subscribable<boolean>\n    implements Types.KeyboardNavigationState\n{\n    private _keyborg?: Keyborg;\n\n    constructor(getWindow: Types.GetWindow) {\n        super();\n        this._keyborg = createKeyborg(getWindow());\n        this._keyborg.subscribe(this._onChange);\n    }\n\n    dispose(): void {\n        super.dispose();\n\n        if (this._keyborg) {\n            this._keyborg.unsubscribe(this._onChange);\n\n            disposeKeyborg(this._keyborg);\n\n            delete this._keyborg;\n        }\n    }\n\n    private _onChange = (isNavigatingWithKeyboard: boolean) => {\n        this.setVal(isNavigatingWithKeyboard, undefined);\n    };\n\n    static setVal(instance: Types.KeyboardNavigationState, val: boolean): void {\n        (instance as KeyboardNavigationState)._keyborg?.setVal(val);\n    }\n\n    isNavigatingWithKeyboard(): boolean {\n        return !!this._keyborg?.isNavigatingWithKeyboard();\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { nativeFocus } from \"keyborg\";\n\nimport * as Types from \"./Types\";\nimport { GetWindow, Visibilities, Visibility } from \"./Types\";\n\ninterface HTMLElementWithBoundingRectCacheId extends HTMLElement {\n    __tabsterCacheId?: string;\n}\n\ninterface FocusedElementWithIgnoreFlag extends HTMLElement {\n    __shouldIgnoreFocus: boolean;\n}\n\nexport interface WindowWithUID extends Window {\n    __tabsterCrossOriginWindowUID?: string;\n}\n\nexport interface HTMLElementWithUID extends HTMLElement {\n    __tabsterElementUID?: string;\n}\n\nexport interface HTMLElementWithDummyContainer extends HTMLElement {\n    __tabsterDummyContainer?: WeakHTMLElement;\n}\n\nexport interface TabsterDOMRect {\n    bottom: number;\n    left: number;\n    right: number;\n    top: number;\n}\n\nexport interface InstanceContext {\n    elementByUId: { [uid: string]: WeakHTMLElement<HTMLElementWithUID> };\n    basics: InternalBasics;\n    WeakRef?: WeakRefConstructor;\n    containerBoundingRectCache: {\n        [id: string]: {\n            rect: TabsterDOMRect;\n            element: HTMLElementWithBoundingRectCacheId;\n        };\n    };\n    lastContainerBoundingRectCacheId: number;\n    containerBoundingRectCacheTimer?: number;\n    fakeWeakRefs: TabsterWeakRef<unknown>[];\n    fakeWeakRefsTimer?: number;\n    fakeWeakRefsStarted: boolean;\n}\n\nlet _isBrokenIE11: boolean;\n\nconst _DOMRect =\n    typeof DOMRect !== \"undefined\"\n        ? DOMRect\n        : class {\n              readonly bottom: number;\n              readonly left: number;\n              readonly right: number;\n              readonly top: number;\n\n              constructor(\n                  x?: number,\n                  y?: number,\n                  width?: number,\n                  height?: number\n              ) {\n                  this.left = x || 0;\n                  this.top = y || 0;\n                  this.right = (x || 0) + (width || 0);\n                  this.bottom = (y || 0) + (height || 0);\n              }\n          };\n\nlet _uidCounter = 0;\n\ntry {\n    // IE11 only accepts `filter` argument as a function (not object with the `acceptNode`\n    // property as the docs define). Also `entityReferenceExpansion` argument is not\n    // optional. And it throws exception when the above arguments aren't there.\n    document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);\n    _isBrokenIE11 = false;\n} catch (e) {\n    _isBrokenIE11 = true;\n}\n\ninterface WindowWithUtilsConext extends Window {\n    __tabsterInstanceContext?: InstanceContext;\n    Promise: PromiseConstructor;\n    WeakRef: WeakRefConstructor;\n}\n\nexport function getInstanceContext(getWindow: GetWindow): InstanceContext {\n    const win = getWindow() as WindowWithUtilsConext;\n\n    let ctx = win.__tabsterInstanceContext;\n\n    if (!ctx) {\n        ctx = {\n            elementByUId: {},\n            basics: {\n                Promise: win.Promise || undefined,\n                WeakRef: win.WeakRef || undefined,\n            },\n            containerBoundingRectCache: {},\n            lastContainerBoundingRectCacheId: 0,\n            fakeWeakRefs: [],\n            fakeWeakRefsStarted: false,\n        };\n\n        win.__tabsterInstanceContext = ctx;\n    }\n\n    return ctx;\n}\n\nexport function disposeInstanceContext(win: Window): void {\n    const ctx = (win as WindowWithUtilsConext).__tabsterInstanceContext;\n\n    if (ctx) {\n        ctx.elementByUId = {};\n\n        delete ctx.WeakRef;\n\n        ctx.containerBoundingRectCache = {};\n\n        if (ctx.containerBoundingRectCacheTimer) {\n            win.clearTimeout(ctx.containerBoundingRectCacheTimer);\n        }\n\n        if (ctx.fakeWeakRefsTimer) {\n            win.clearTimeout(ctx.fakeWeakRefsTimer);\n        }\n\n        ctx.fakeWeakRefs = [];\n\n        delete (win as WindowWithUtilsConext).__tabsterInstanceContext;\n    }\n}\n\nexport function createWeakMap<K extends object, V>(win: Window): WeakMap<K, V> {\n    const ctx = (win as WindowWithUtilsConext).__tabsterInstanceContext;\n    return new (ctx?.basics.WeakMap || WeakMap)();\n}\n\ninterface TabsterWeakRef<T> {\n    deref(): T | undefined;\n}\n\nclass FakeWeakRef<T extends HTMLElement = HTMLElement>\n    implements TabsterWeakRef<T>\n{\n    private _target: T | undefined;\n\n    constructor(target: T) {\n        this._target = target;\n    }\n\n    deref(): T | undefined {\n        return this._target;\n    }\n\n    static cleanup(fwr: FakeWeakRef, forceRemove?: boolean): boolean {\n        if (!fwr._target) {\n            return true;\n        }\n\n        if (\n            forceRemove ||\n            !documentContains(fwr._target.ownerDocument, fwr._target)\n        ) {\n            delete fwr._target;\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport class WeakHTMLElement<T extends HTMLElement = HTMLElement, D = undefined>\n    implements Types.WeakHTMLElement<D>\n{\n    private _ref: TabsterWeakRef<T> | undefined;\n    private _data: D | undefined;\n\n    constructor(getWindow: GetWindow, element: T, data?: D) {\n        const context = getInstanceContext(getWindow);\n\n        let ref: TabsterWeakRef<T>;\n        if (context.WeakRef) {\n            ref = new context.WeakRef(element);\n        } else {\n            ref = new FakeWeakRef(element);\n            context.fakeWeakRefs.push(ref);\n        }\n\n        this._ref = ref;\n        this._data = data;\n    }\n\n    get(): T | undefined {\n        const ref = this._ref;\n        let element: T | undefined;\n\n        if (ref) {\n            element = ref.deref();\n\n            if (!element) {\n                delete this._ref;\n            }\n        }\n\n        return element;\n    }\n\n    getData(): D | undefined {\n        return this._data;\n    }\n}\n\nexport function cleanupFakeWeakRefs(\n    getWindow: GetWindow,\n    forceRemove?: boolean\n): void {\n    const context = getInstanceContext(getWindow);\n    context.fakeWeakRefs = context.fakeWeakRefs.filter(\n        (e) => !FakeWeakRef.cleanup(e as FakeWeakRef, forceRemove)\n    );\n}\n\nexport function startFakeWeakRefsCleanup(getWindow: GetWindow): void {\n    const context = getInstanceContext(getWindow);\n\n    if (!context.fakeWeakRefsStarted) {\n        context.fakeWeakRefsStarted = true;\n        context.WeakRef = getWeakRef(context);\n    }\n\n    if (!context.fakeWeakRefsTimer) {\n        context.fakeWeakRefsTimer = getWindow().setTimeout(() => {\n            context.fakeWeakRefsTimer = undefined;\n            cleanupFakeWeakRefs(getWindow);\n            startFakeWeakRefsCleanup(getWindow);\n        }, 2 * 60 * 1000); // 2 minutes.\n    }\n}\n\nexport function stopFakeWeakRefsCleanupAndClearStorage(\n    getWindow: GetWindow\n): void {\n    const context = getInstanceContext(getWindow);\n\n    context.fakeWeakRefsStarted = false;\n\n    if (context.fakeWeakRefsTimer) {\n        getWindow().clearTimeout(context.fakeWeakRefsTimer);\n        context.fakeWeakRefsTimer = undefined;\n        context.fakeWeakRefs = [];\n    }\n}\n\nexport function createElementTreeWalker(\n    doc: Document,\n    root: Node,\n    acceptNode: (node: Node) => number\n): TreeWalker | undefined {\n    // IE11 will throw an exception when the TreeWalker root is not an Element.\n    if (root.nodeType !== Node.ELEMENT_NODE) {\n        return undefined;\n    }\n\n    // TypeScript isn't aware of IE11 behaving badly.\n    const filter = (_isBrokenIE11\n        ? acceptNode\n        : ({ acceptNode } as NodeFilter)) as unknown as NodeFilter;\n\n    return doc.createTreeWalker(\n        root,\n        NodeFilter.SHOW_ELEMENT,\n        filter,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.\n        false /* Last argument is not optional for IE11! */\n    );\n}\n\nexport function getBoundingRect(\n    getWindow: GetWindow,\n    element: HTMLElementWithBoundingRectCacheId\n): TabsterDOMRect {\n    let cacheId = element.__tabsterCacheId;\n    const context = getInstanceContext(getWindow);\n    const cached = cacheId\n        ? context.containerBoundingRectCache[cacheId]\n        : undefined;\n\n    if (cached) {\n        return cached.rect;\n    }\n\n    const scrollingElement =\n        element.ownerDocument && element.ownerDocument.documentElement;\n\n    if (!scrollingElement) {\n        return new _DOMRect();\n    }\n\n    // A bounding rect of the top-level element contains the whole page regardless of the\n    // scrollbar. So, we improvise a little and limiting the final result...\n    let left = 0;\n    let top = 0;\n    let right = scrollingElement.clientWidth;\n    let bottom = scrollingElement.clientHeight;\n\n    if (element !== scrollingElement) {\n        const r = element.getBoundingClientRect();\n        left = Math.max(left, r.left);\n        top = Math.max(top, r.top);\n        right = Math.min(right, r.right);\n        bottom = Math.min(bottom, r.bottom);\n    }\n\n    const rect = new _DOMRect(\n        left < right ? left : -1,\n        top < bottom ? top : -1,\n        left < right ? right - left : 0,\n        top < bottom ? bottom - top : 0\n    );\n\n    if (!cacheId) {\n        cacheId = \"r-\" + ++context.lastContainerBoundingRectCacheId;\n        element.__tabsterCacheId = cacheId;\n    }\n\n    context.containerBoundingRectCache[cacheId] = {\n        rect,\n        element,\n    };\n\n    if (!context.containerBoundingRectCacheTimer) {\n        context.containerBoundingRectCacheTimer = window.setTimeout(() => {\n            context.containerBoundingRectCacheTimer = undefined;\n\n            for (const cId of Object.keys(context.containerBoundingRectCache)) {\n                delete context.containerBoundingRectCache[cId].element\n                    .__tabsterCacheId;\n            }\n\n            context.containerBoundingRectCache = {};\n        }, 50);\n    }\n\n    return rect;\n}\n\nexport function isElementVerticallyVisibleInContainer(\n    getWindow: GetWindow,\n    element: HTMLElement\n): boolean {\n    const container = getScrollableContainer(element);\n\n    if (container) {\n        const containerRect = getBoundingRect(getWindow, container);\n        const elementRect = element.getBoundingClientRect();\n\n        return (\n            elementRect.top >= containerRect.top &&\n            elementRect.bottom <= containerRect.bottom\n        );\n    }\n\n    return false;\n}\n\nexport function isElementVisibleInContainer(\n    getWindow: GetWindow,\n    element: HTMLElement,\n    gap = 0\n): Visibility {\n    const container = getScrollableContainer(element);\n\n    if (container) {\n        const containerRect = getBoundingRect(getWindow, container);\n        const elementRect = element.getBoundingClientRect();\n\n        if (\n            elementRect.left > containerRect.right ||\n            elementRect.top > containerRect.bottom ||\n            elementRect.bottom < containerRect.top ||\n            elementRect.right < containerRect.left\n        ) {\n            return Visibilities.Invisible;\n        }\n\n        if (\n            elementRect.top + gap >= containerRect.top &&\n            elementRect.top <= containerRect.bottom &&\n            elementRect.bottom >= containerRect.top &&\n            elementRect.bottom - gap <= containerRect.bottom &&\n            elementRect.left + gap >= containerRect.left &&\n            elementRect.left <= containerRect.right &&\n            elementRect.right >= containerRect.left &&\n            elementRect.right - gap <= containerRect.right\n        ) {\n            return Visibilities.Visible;\n        }\n\n        return Visibilities.PartiallyVisible;\n    }\n\n    return Visibilities.Invisible;\n}\n\nexport function scrollIntoView(\n    getWindow: GetWindow,\n    element: HTMLElement,\n    alignToTop: boolean\n): void {\n    // Built-in DOM's scrollIntoView() is cool, but when we have nested containers,\n    // it scrolls all of them, not just the deepest one. So, trying to work it around.\n    const container = getScrollableContainer(element);\n\n    if (container) {\n        const containerRect = getBoundingRect(getWindow, container);\n        const elementRect = element.getBoundingClientRect();\n\n        if (alignToTop) {\n            container.scrollTop += elementRect.top - containerRect.top;\n        } else {\n            container.scrollTop += elementRect.bottom - containerRect.bottom;\n        }\n    }\n}\n\nexport function getScrollableContainer(\n    element: HTMLElement\n): HTMLElement | null {\n    const doc = element.ownerDocument;\n\n    if (doc) {\n        for (\n            let el: HTMLElement | null = element.parentElement;\n            el;\n            el = el.parentElement\n        ) {\n            if (\n                el.scrollWidth > el.clientWidth ||\n                el.scrollHeight > el.clientHeight\n            ) {\n                return el;\n            }\n        }\n\n        return doc.documentElement;\n    }\n\n    return null;\n}\n\nexport function makeFocusIgnored(element: HTMLElement): void {\n    (element as FocusedElementWithIgnoreFlag).__shouldIgnoreFocus = true;\n}\n\nexport function shouldIgnoreFocus(element: HTMLElement): boolean {\n    return !!(element as FocusedElementWithIgnoreFlag).__shouldIgnoreFocus;\n}\n\nexport function getUId(wnd: Window & { msCrypto?: Crypto }): string {\n    const rnd = new Uint32Array(4);\n\n    if (wnd.crypto && wnd.crypto.getRandomValues) {\n        wnd.crypto.getRandomValues(rnd);\n    } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {\n        wnd.msCrypto.getRandomValues(rnd);\n    } else {\n        for (let i = 0; i < rnd.length; i++) {\n            rnd[i] = 0xffffffff * Math.random();\n        }\n    }\n\n    const srnd: string[] = [];\n\n    for (let i = 0; i < rnd.length; i++) {\n        srnd.push(rnd[i].toString(36));\n    }\n\n    srnd.push(\"|\");\n    srnd.push((++_uidCounter).toString(36));\n    srnd.push(\"|\");\n    srnd.push(Date.now().toString(36));\n\n    return srnd.join(\"\");\n}\n\nexport function getElementUId(\n    getWindow: GetWindow,\n    element: HTMLElementWithUID\n): string {\n    const context = getInstanceContext(getWindow);\n    let uid = element.__tabsterElementUID;\n\n    if (!uid) {\n        uid = element.__tabsterElementUID = getUId(getWindow());\n    }\n\n    if (\n        !context.elementByUId[uid] &&\n        documentContains(element.ownerDocument, element)\n    ) {\n        context.elementByUId[uid] = new WeakHTMLElement(getWindow, element);\n    }\n\n    return uid;\n}\n\nexport function getElementByUId(\n    context: InstanceContext,\n    uid: string\n): WeakHTMLElement<HTMLElementWithUID, undefined> | undefined {\n    return context.elementByUId[uid];\n}\n\nexport function getWindowUId(win: WindowWithUID): string {\n    let uid = win.__tabsterCrossOriginWindowUID;\n\n    if (!uid) {\n        uid = win.__tabsterCrossOriginWindowUID = getUId(win);\n    }\n\n    return uid;\n}\n\nexport function clearElementCache(\n    getWindow: GetWindow,\n    parent?: HTMLElement\n): void {\n    const context = getInstanceContext(getWindow);\n\n    for (const key of Object.keys(context.elementByUId)) {\n        const wel = context.elementByUId[key];\n        const el = wel && wel.get();\n\n        if (el && parent) {\n            if (!parent.contains(el)) {\n                continue;\n            }\n        }\n\n        delete context.elementByUId[key];\n    }\n}\n\n// IE11 doesn't have document.contains()...\nexport function documentContains(\n    doc: HTMLDocument | null | undefined,\n    element: HTMLElement\n): boolean {\n    return !!doc?.body?.contains(element);\n}\n\nexport function matchesSelector(\n    element: HTMLElement,\n    selector: string\n): boolean {\n    interface HTMLElementWithMatches extends HTMLElement {\n        matchesSelector?: typeof HTMLElement.prototype.matches;\n        msMatchesSelector?: typeof HTMLElement.prototype.matches;\n    }\n\n    const matches =\n        element.matches ||\n        (element as HTMLElementWithMatches).matchesSelector ||\n        (element as HTMLElementWithMatches).msMatchesSelector ||\n        element.webkitMatchesSelector;\n\n    return matches && matches.call(element, selector);\n}\n\nexport function getPromise(getWindow: GetWindow): PromiseConstructor {\n    const context = getInstanceContext(getWindow);\n    if (context.basics.Promise) {\n        return context.basics.Promise;\n    }\n\n    throw new Error(\"No Promise defined.\");\n}\n\nexport function getWeakRef(\n    context: InstanceContext\n): WeakRefConstructor | undefined {\n    return context.basics.WeakRef;\n}\n\ninterface InternalBasics {\n    Promise?: PromiseConstructor;\n    WeakRef?: WeakRefConstructor;\n    WeakMap?: WeakMapConstructor;\n}\n\nexport function setBasics(win: Window, basics: InternalBasics): void {\n    const context = getInstanceContext(() => win);\n\n    let key: keyof InternalBasics;\n\n    key = \"Promise\";\n    if (key in basics) {\n        context.basics[key] = basics[key];\n    }\n\n    key = \"WeakRef\";\n    if (key in basics) {\n        context.basics[key] = basics[key];\n    }\n\n    key = \"WeakMap\";\n    if (key in basics) {\n        context.basics[key] = basics[key];\n    }\n}\n\nlet _lastTabsterPartId = 0;\n\nexport abstract class TabsterPart<P, D = undefined>\n    implements Types.TabsterPart<P>\n{\n    protected _tabster: Types.TabsterCore;\n    protected _element: WeakHTMLElement<HTMLElement, D>;\n    protected _props: P;\n\n    readonly id: string;\n\n    constructor(tabster: Types.TabsterCore, element: HTMLElement, props: P) {\n        const getWindow = tabster.getWindow;\n        this._tabster = tabster;\n        this._element = new WeakHTMLElement(getWindow, element);\n        this._props = { ...props };\n        this.id = \"i\" + ++_lastTabsterPartId;\n    }\n\n    getElement(): HTMLElement | undefined {\n        return this._element.get();\n    }\n\n    getProps(): P {\n        return this._props;\n    }\n\n    setProps(props: P): void {\n        this._props = { ...props };\n    }\n}\n\nexport interface DummyInputProps {\n    /** The input is created to be used only once and autoremoved when focused. */\n    isPhantom?: boolean;\n    /** Whether the input is before or after the content it is guarding.  */\n    isFirst: boolean;\n}\n\nexport type DummyInputFocusCallback = (\n    dummyInput: DummyInput,\n    isBackward: boolean,\n    relatedTarget: HTMLElement | null\n) => void;\n\n/**\n * Dummy HTML elements that are used as focus sentinels for the DOM enclosed within them\n */\nexport class DummyInput {\n    private _isPhantom: DummyInputProps[\"isPhantom\"];\n    private _disposeTimer: number | undefined;\n    private _clearDisposeTimeout: (() => void) | undefined;\n\n    input: HTMLElement | undefined;\n    /** Flag that indicates focus is leaving the boundary of the dummy input */\n    shouldMoveOut?: boolean;\n    isFirst: DummyInputProps[\"isFirst\"];\n    isOutside: boolean;\n    /** Called when the input is focused */\n    onFocusIn?: DummyInputFocusCallback;\n    /** Called when the input is blurred */\n    onFocusOut?: DummyInputFocusCallback;\n\n    constructor(\n        getWindow: Types.GetWindow,\n        isOutside: boolean,\n        props: DummyInputProps,\n        element?: WeakHTMLElement\n    ) {\n        const win = getWindow();\n        const input = win.document.createElement(\"i\");\n\n        input.tabIndex = 0;\n        input.setAttribute(\"role\", \"none\");\n\n        input.setAttribute(Types.TabsterDummyInputAttributeName, \"\");\n        input.setAttribute(\"aria-hidden\", \"true\");\n\n        const style = input.style;\n        style.position = \"fixed\";\n        style.width = style.height = \"1px\";\n        style.opacity = \"0.001\";\n        style.zIndex = \"-1\";\n        style.setProperty(\"content-visibility\", \"hidden\");\n\n        makeFocusIgnored(input);\n\n        this.input = input;\n        this.isFirst = props.isFirst;\n        this.isOutside = isOutside;\n        this._isPhantom = props.isPhantom ?? false;\n\n        input.addEventListener(\"focusin\", this._focusIn);\n        input.addEventListener(\"focusout\", this._focusOut);\n\n        (input as HTMLElementWithDummyContainer).__tabsterDummyContainer =\n            element;\n\n        if (this._isPhantom) {\n            this._disposeTimer = win.setTimeout(() => {\n                delete this._disposeTimer;\n                this.dispose();\n            }, 0);\n\n            this._clearDisposeTimeout = () => {\n                if (this._disposeTimer) {\n                    win.clearTimeout(this._disposeTimer);\n                    delete this._disposeTimer;\n                }\n\n                delete this._clearDisposeTimeout;\n            };\n        }\n    }\n\n    dispose(): void {\n        if (this._clearDisposeTimeout) {\n            this._clearDisposeTimeout();\n        }\n\n        const input = this.input;\n\n        if (!input) {\n            return;\n        }\n\n        delete this.onFocusIn;\n        delete this.onFocusOut;\n        delete this.input;\n\n        input.removeEventListener(\"focusin\", this._focusIn);\n        input.removeEventListener(\"focusout\", this._focusOut);\n\n        delete (input as HTMLElementWithDummyContainer).__tabsterDummyContainer;\n\n        input.parentElement?.removeChild(input);\n    }\n\n    setTopLeft(top: number, left: number): void {\n        const style = this.input?.style;\n\n        if (style) {\n            style.top = `${top}px`;\n            style.left = `${left}px`;\n        }\n    }\n\n    private _isBackward(\n        isIn: boolean,\n        current: HTMLElement,\n        previous: HTMLElement | null\n    ): boolean {\n        return isIn && !previous\n            ? !this.isFirst\n            : !!(\n                  previous &&\n                  current.compareDocumentPosition(previous) &\n                      Node.DOCUMENT_POSITION_FOLLOWING\n              );\n    }\n\n    private _focusIn = (e: FocusEvent): void => {\n        const input = this.input;\n\n        if (this.onFocusIn && input) {\n            const relatedTarget =\n                DummyInputManager.getLastPhantomFrom() ||\n                (e.relatedTarget as HTMLElement | null);\n\n            this.onFocusIn(\n                this,\n                this._isBackward(true, input, relatedTarget),\n                relatedTarget\n            );\n        }\n    };\n\n    private _focusOut = (e: FocusEvent): void => {\n        this.shouldMoveOut = false;\n\n        const input = this.input;\n\n        if (this.onFocusOut && input) {\n            const relatedTarget = e.relatedTarget as HTMLElement | null;\n\n            this.onFocusOut(\n                this,\n                this._isBackward(false, input, relatedTarget),\n                relatedTarget\n            );\n        }\n    };\n}\n\ninterface HTMLElementWithDummyInputs extends HTMLElement {\n    __tabsterDummy?: DummyInputManagerCore;\n}\n\nexport const DummyInputManagerPriorities = {\n    Root: 1,\n    Modalizer: 2,\n    Mover: 3,\n    Groupper: 4,\n};\n\nexport class DummyInputManager {\n    private _instance?: DummyInputManagerCore;\n    private _onFocusIn?: DummyInputFocusCallback;\n    private _onFocusOut?: DummyInputFocusCallback;\n    protected _element: WeakHTMLElement;\n    private static _lastPhantomFrom: HTMLElement | undefined;\n\n    moveOutWithDefaultAction: DummyInputManagerCore[\"moveOutWithDefaultAction\"];\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: WeakHTMLElement,\n        priority: number,\n        outsideByDefault?: boolean\n    ) {\n        this._element = element;\n\n        this._instance = new DummyInputManagerCore(\n            tabster,\n            element,\n            this,\n            priority,\n            outsideByDefault\n        );\n\n        this.moveOutWithDefaultAction = (backwards: boolean) => {\n            this._instance?.moveOutWithDefaultAction(backwards);\n        };\n    }\n\n    protected _setHandlers(\n        onFocusIn?: DummyInputFocusCallback,\n        onFocusOut?: DummyInputFocusCallback\n    ): void {\n        this._onFocusIn = onFocusIn;\n        this._onFocusOut = onFocusOut;\n    }\n\n    getHandler(isIn: boolean): DummyInputFocusCallback | undefined {\n        return isIn ? this._onFocusIn : this._onFocusOut;\n    }\n\n    setTabbable(tabbable: boolean) {\n        this._instance?.setTabbable(this, tabbable);\n    }\n\n    dispose(): void {\n        if (this._instance) {\n            this._instance.dispose(this);\n            delete this._instance;\n        }\n\n        delete this._onFocusIn;\n        delete this._onFocusOut;\n    }\n\n    static getLastPhantomFrom(): HTMLElement | undefined {\n        const ret = DummyInputManager._lastPhantomFrom;\n        delete DummyInputManager._lastPhantomFrom;\n        return ret;\n    }\n\n    static moveWithPhantomDummy(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        moveOutside: boolean,\n        isBackward: boolean\n    ): void {\n        const dummy: DummyInput = new DummyInput(tabster.getWindow, true, {\n            isPhantom: true,\n            isFirst: true,\n        });\n\n        const input = dummy.input;\n\n        if (input) {\n            const parent = element.parentElement;\n\n            if (parent) {\n                let insertBefore = (\n                    (moveOutside && !isBackward) || (!moveOutside && isBackward)\n                        ? element.nextElementSibling\n                        : element\n                ) as HTMLElementWithDummyContainer | null;\n\n                if (insertBefore) {\n                    if (isBackward) {\n                        const beforeBefore =\n                            insertBefore.previousElementSibling as HTMLElementWithDummyContainer | null;\n\n                        if (\n                            beforeBefore &&\n                            beforeBefore.__tabsterDummyContainer\n                        ) {\n                            insertBefore = beforeBefore;\n                        }\n                    } else if (insertBefore.__tabsterDummyContainer) {\n                        insertBefore =\n                            insertBefore.nextElementSibling as HTMLElementWithDummyContainer | null;\n                    }\n                }\n\n                parent.insertBefore(input, insertBefore);\n\n                DummyInputManager._lastPhantomFrom = element;\n\n                tabster.getWindow().setTimeout(() => {\n                    delete DummyInputManager._lastPhantomFrom;\n                }, 0);\n\n                nativeFocus(input);\n            }\n        }\n    }\n}\n\ninterface DummyInputWrapper {\n    manager: DummyInputManager;\n    priority: number;\n    tabbable: boolean;\n}\n\n/**\n * Parent class that encapsulates the behaviour of dummy inputs (focus sentinels)\n */\nclass DummyInputManagerCore {\n    private _unobserve: (() => void) | undefined;\n    private _addTimer: number | undefined;\n    private _getWindow: Types.GetWindow;\n    private _wrappers: DummyInputWrapper[] = [];\n    private _element: WeakHTMLElement | undefined;\n    private _isOutside = false;\n    private _firstDummy: DummyInput | undefined;\n    private _lastDummy: DummyInput | undefined;\n    private _transformElements: HTMLElement[] = [];\n    private _scrollTimer: number | undefined;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: WeakHTMLElement,\n        manager: DummyInputManager,\n        priority: number,\n        outsideByDefault?: boolean\n    ) {\n        const el = element.get() as HTMLElementWithDummyInputs;\n\n        if (!el) {\n            throw new Error(\"No element\");\n        }\n\n        this._getWindow = tabster.getWindow;\n\n        const instance = el.__tabsterDummy;\n\n        (instance || this)._wrappers.push({\n            manager,\n            priority,\n            tabbable: true,\n        });\n\n        if (instance) {\n            return instance;\n        }\n\n        el.__tabsterDummy = this;\n\n        this._firstDummy = new DummyInput(\n            this._getWindow,\n            this._isOutside,\n            {\n                isFirst: true,\n            },\n            element\n        );\n\n        this._lastDummy = new DummyInput(\n            this._getWindow,\n            this._isOutside,\n            {\n                isFirst: false,\n            },\n            element\n        );\n\n        this._firstDummy.onFocusIn = this._onFocusIn;\n        this._firstDummy.onFocusOut = this._onFocusOut;\n        this._lastDummy.onFocusIn = this._onFocusIn;\n        this._lastDummy.onFocusOut = this._onFocusOut;\n\n        this._element = element;\n        this._addDummyInputs();\n\n        // Some elements allow only specific types of direct descendants and we need to\n        // put our dummy inputs inside or outside of the element accordingly.\n        const tagName = element.get()?.tagName;\n        this._isOutside =\n            (outsideByDefault ||\n                tagName === \"UL\" ||\n                tagName === \"OL\" ||\n                tagName === \"TABLE\") &&\n            !(tagName === \"LI\" || tagName === \"TD\" || tagName === \"TH\");\n\n        // older versions of testing frameworks like JSDOM don't support MutationObserver\n        // https://github.com/jsdom/jsdom/issues/639\n        // use this way of getting NODE_ENV because tsdx does not support a test environment\n        // https://github.com/jaredpalmer/tsdx/issues/167\n        if (\n            typeof process === \"undefined\" ||\n            process.env[\"NODE_ENV\"] !== \"test\"\n        ) {\n            this._observeMutations();\n        }\n    }\n\n    dispose(manager: DummyInputManager, force?: boolean): void {\n        const wrappers = (this._wrappers = this._wrappers.filter(\n            (w) => w.manager !== manager && !force\n        ));\n\n        if (wrappers.length === 0) {\n            delete (this._element?.get() as HTMLElementWithDummyInputs)\n                .__tabsterDummy;\n            if (this._unobserve) {\n                this._unobserve();\n                delete this._unobserve;\n            }\n\n            for (const el of this._transformElements) {\n                el.removeEventListener(\"scroll\", this._addTransformOffsets);\n            }\n            this._transformElements = [];\n\n            const win = this._getWindow();\n\n            if (this._scrollTimer) {\n                win.clearTimeout(this._scrollTimer);\n                delete this._scrollTimer;\n            }\n\n            if (this._addTimer) {\n                win.clearTimeout(this._addTimer);\n                delete this._addTimer;\n            }\n\n            this._firstDummy?.dispose();\n            this._lastDummy?.dispose();\n        }\n    }\n\n    private _onFocus(\n        isIn: boolean,\n        dummyInput: DummyInput,\n        isBackward: boolean,\n        relatedTarget: HTMLElement | null\n    ): void {\n        const wrapper = this._getCurrent();\n\n        if (wrapper) {\n            wrapper.manager.getHandler(isIn)?.(\n                dummyInput,\n                isBackward,\n                relatedTarget\n            );\n        }\n    }\n\n    private _onFocusIn = (\n        dummyInput: DummyInput,\n        isBackward: boolean,\n        relatedTarget: HTMLElement | null\n    ): void => {\n        this._onFocus(true, dummyInput, isBackward, relatedTarget);\n    };\n\n    private _onFocusOut = (\n        dummyInput: DummyInput,\n        isBackward: boolean,\n        relatedTarget: HTMLElement | null\n    ): void => {\n        this._onFocus(false, dummyInput, isBackward, relatedTarget);\n    };\n\n    /**\n     * Prepares to move focus out of the given element by focusing\n     * one of the dummy inputs and setting the `shouldMoveOut` flag\n     * @param backwards focus moving to an element behind the given element\n     */\n    moveOutWithDefaultAction = (backwards: boolean): void => {\n        const first = this._firstDummy;\n        const last = this._lastDummy;\n\n        if (first?.input && last?.input) {\n            if (backwards) {\n                first.shouldMoveOut = true;\n                first.input.tabIndex = 0;\n                first.input.focus();\n            } else {\n                last.shouldMoveOut = true;\n                last.input.tabIndex = 0;\n                last.input.focus();\n            }\n        }\n    };\n\n    setTabbable = (manager: DummyInputManager, tabbable: boolean) => {\n        for (const w of this._wrappers) {\n            if (w.manager === manager) {\n                w.tabbable = tabbable;\n                break;\n            }\n        }\n\n        const wrapper = this._getCurrent();\n\n        if (wrapper) {\n            const tabIndex = wrapper.tabbable ? 0 : -1;\n\n            let input = this._firstDummy?.input;\n\n            if (input) {\n                input.tabIndex = tabIndex;\n            }\n\n            input = this._lastDummy?.input;\n\n            if (input) {\n                input.tabIndex = tabIndex;\n            }\n        }\n    };\n\n    private _getCurrent(): DummyInputWrapper | undefined {\n        this._wrappers.sort((a, b) => {\n            if (a.tabbable !== b.tabbable) {\n                return a.tabbable ? -1 : 1;\n            }\n\n            return a.priority - b.priority;\n        });\n\n        return this._wrappers[0];\n    }\n\n    /**\n     * Adds dummy inputs as the first and last child of the given element\n     * Called each time the children under the element is mutated\n     */\n    private _addDummyInputs() {\n        if (this._addTimer) {\n            return;\n        }\n\n        this._addTimer = this._getWindow().setTimeout(() => {\n            delete this._addTimer;\n\n            const element = this._element?.get();\n            const dif = this._firstDummy?.input;\n            const dil = this._lastDummy?.input;\n\n            if (!element || !dif || !dil) {\n                return;\n            }\n\n            if (this._isOutside) {\n                const elementParent = element.parentElement;\n\n                if (elementParent) {\n                    const nextSibling = element.nextElementSibling;\n\n                    if (nextSibling !== dil) {\n                        elementParent.insertBefore(dil, nextSibling);\n                    }\n\n                    if (element.previousElementSibling !== dif) {\n                        elementParent.insertBefore(dif, element);\n                    }\n                }\n            } else {\n                if (element.lastElementChild !== dil) {\n                    element.appendChild(dil);\n                }\n\n                const firstElementChild = element.firstElementChild;\n\n                if (firstElementChild && firstElementChild !== dif) {\n                    element.insertBefore(dif, firstElementChild);\n                }\n            }\n\n            this._addTransformOffsets();\n        }, 0);\n    }\n\n    /**\n     * Creates a mutation observer to ensure that on DOM changes, the dummy inputs\n     * stay as the first and last child elements\n     */\n    private _observeMutations(): void {\n        if (this._unobserve) {\n            return;\n        }\n\n        const observer = new MutationObserver(() => {\n            if (this._unobserve) {\n                this._addDummyInputs();\n            }\n        });\n\n        const element = this._element?.get();\n        const actualElement = this._isOutside\n            ? element?.parentElement\n            : element;\n\n        if (actualElement) {\n            observer.observe(actualElement, { childList: true });\n\n            this._unobserve = () => {\n                observer.disconnect();\n            };\n        }\n    }\n\n    private _addTransformOffsets = (): void => {\n        const win = this._getWindow();\n\n        if (this._scrollTimer) {\n            win.clearTimeout(this._scrollTimer);\n        }\n\n        // Making sure we're not updating the dummy inputs while scrolling to avoid excessive reflows.\n        this._scrollTimer = win.setTimeout(() => {\n            delete this._scrollTimer;\n            this._reallyAddTransformOffsets();\n        }, 100);\n    };\n\n    private _reallyAddTransformOffsets(): void {\n        const from = this._firstDummy?.input || this._lastDummy?.input;\n        const transformElements = this._transformElements;\n        const newTransformElements: HTMLElement[] = [];\n        const transformElementsMap = new WeakMap<HTMLElement, HTMLElement>();\n        const newTransformElementsMap = new WeakMap<HTMLElement, HTMLElement>();\n        let scrollTop = 0;\n        let scrollLeft = 0;\n\n        for (const el of transformElements) {\n            transformElementsMap.set(el, el);\n        }\n\n        const win = this._getWindow();\n\n        for (\n            let element: HTMLElement | undefined | null = from;\n            element;\n            element = element.parentElement\n        ) {\n            const transform = win.getComputedStyle(element).transform;\n            if (transform && transform !== \"none\") {\n                let el = transformElementsMap.get(element);\n\n                if (!el) {\n                    el = element;\n                    el.addEventListener(\"scroll\", this._addTransformOffsets);\n                }\n\n                newTransformElements.push(el);\n                newTransformElementsMap.set(el, el);\n\n                scrollTop += el.scrollTop;\n                scrollLeft += el.scrollLeft;\n            }\n        }\n\n        for (const el of transformElements) {\n            if (!newTransformElementsMap.get(el)) {\n                el.removeEventListener(\"scroll\", this._addTransformOffsets);\n            }\n        }\n\n        this._transformElements = newTransformElements;\n\n        this._firstDummy?.setTopLeft(scrollTop, scrollLeft);\n        this._lastDummy?.setTopLeft(scrollTop, scrollLeft);\n    }\n}\n\nexport function getLastChild(container: HTMLElement): HTMLElement | undefined {\n    let lastChild: HTMLElement | null = null;\n\n    for (let i = container.lastElementChild; i; i = i.lastElementChild) {\n        lastChild = i as HTMLElement;\n    }\n\n    return lastChild || undefined;\n}\n\nexport function getAdjacentElement(\n    from: HTMLElement,\n    prev?: boolean\n): HTMLElement | undefined {\n    let cur: HTMLElement | null = from;\n    let adjacent: HTMLElement | null = null;\n\n    while (cur && !adjacent) {\n        adjacent = (\n            prev ? cur.previousElementSibling : cur.nextElementSibling\n        ) as HTMLElement | null;\n        cur = cur.parentElement;\n    }\n\n    return adjacent || undefined;\n}\n\nexport function triggerEvent<D>(\n    target: HTMLElement | EventTarget,\n    name: string,\n    details: D\n): boolean {\n    const event = document.createEvent(\n        \"HTMLEvents\"\n    ) as Types.TabsterEventWithDetails<D>;\n\n    event.initEvent(name, true, true);\n\n    event.details = details;\n\n    target.dispatchEvent(event);\n\n    return !event.defaultPrevented;\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { createEventTarget } from \"./EventTarget\";\nimport { getTabsterOnElement } from \"./Instance\";\nimport { KeyboardNavigationState } from \"./State/KeyboardNavigation\";\nimport * as Types from \"./Types\";\nimport {\n    DummyInput,\n    DummyInputManager,\n    DummyInputManagerPriorities,\n    getElementUId,\n    TabsterPart,\n    triggerEvent,\n    WeakHTMLElement,\n} from \"./Utils\";\n\nexport interface WindowWithTabsterInstance extends Window {\n    __tabsterInstance?: Types.TabsterCore;\n}\n\nfunction _setInformativeStyle(\n    weakElement: WeakHTMLElement,\n    remove: boolean,\n    id?: string\n) {\n    if (__DEV__) {\n        const element = weakElement.get();\n\n        if (element) {\n            if (remove) {\n                element.style.removeProperty(\"--tabster-root\");\n            } else {\n                element.style.setProperty(\"--tabster-root\", id + \",\");\n            }\n        }\n    }\n}\n\nclass RootDummyManager extends DummyInputManager {\n    private _tabster: Types.TabsterCore;\n    private _setFocused: (focused: boolean, fromAdjacent?: boolean) => void;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: WeakHTMLElement,\n        setFocused: (focused: boolean, fromAdjacent?: boolean) => void\n    ) {\n        super(tabster, element, DummyInputManagerPriorities.Root);\n\n        this._setHandlers(this._onDummyInputFocus);\n\n        this._tabster = tabster;\n        this._setFocused = setFocused;\n    }\n\n    private _onDummyInputFocus = (dummyInput: DummyInput): void => {\n        if (dummyInput.shouldMoveOut) {\n            // When we've reached the last focusable element, we want to let the browser\n            // to move the focus outside of the page. In order to do that we're synchronously\n            // calling focus() of the dummy input from the Tab key handler and allowing\n            // the default action to move the focus out.\n            this._setFocused(false, true);\n        } else {\n            // The only way a dummy input gets focused is during the keyboard navigation.\n            KeyboardNavigationState.setVal(\n                this._tabster.keyboardNavigation,\n                true\n            );\n\n            const element = this._element.get();\n\n            if (element) {\n                this._setFocused(true, true);\n\n                const hasFocused = dummyInput.isFirst\n                    ? this._tabster.focusedElement.focusFirst({\n                          container: element,\n                      })\n                    : this._tabster.focusedElement.focusLast({\n                          container: element,\n                      });\n\n                if (hasFocused) {\n                    return;\n                }\n            }\n\n            dummyInput.input?.blur();\n        }\n    };\n}\n\nexport class Root\n    extends TabsterPart<Types.RootProps, undefined>\n    implements Types.Root\n{\n    readonly uid: string;\n\n    private _dummyManager?: RootDummyManager;\n    private _isFocused = false;\n    private _setFocusedTimer: number | undefined;\n    private _setTabbableTimer: number | undefined;\n    private _onDispose: (root: Root) => void;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        onDispose: (root: Root) => void,\n        props: Types.RootProps\n    ) {\n        super(tabster, element, props);\n\n        this._onDispose = onDispose;\n\n        const win = tabster.getWindow;\n        this.uid = getElementUId(win, element);\n\n        if (tabster.controlTab || tabster.rootDummyInputs) {\n            this._dummyManager = new RootDummyManager(\n                tabster,\n                this._element,\n                this._setFocused\n            );\n        }\n\n        tabster.focusedElement.subscribe(this._onFocus);\n\n        this._add();\n    }\n\n    dispose(): void {\n        this._onDispose(this);\n\n        const win = this._tabster.getWindow();\n\n        if (this._setFocusedTimer) {\n            win.clearTimeout(this._setFocusedTimer);\n            delete this._setFocusedTimer;\n        }\n\n        if (this._setTabbableTimer) {\n            win.clearTimeout(this._setTabbableTimer);\n            delete this._setTabbableTimer;\n        }\n\n        this._dummyManager?.dispose();\n        this._remove();\n    }\n\n    moveOutWithDefaultAction(isBackward: boolean) {\n        const dummyManager = this._dummyManager;\n\n        if (dummyManager) {\n            dummyManager.moveOutWithDefaultAction(isBackward);\n        } else {\n            const el = this.getElement();\n\n            if (el) {\n                RootDummyManager.moveWithPhantomDummy(\n                    this._tabster,\n                    el,\n                    true,\n                    isBackward\n                );\n            }\n        }\n    }\n\n    private _setFocused = (\n        hasFocused: boolean,\n        fromAdjacent?: boolean\n    ): void => {\n        if (this._setFocusedTimer) {\n            this._tabster.getWindow().clearTimeout(this._setFocusedTimer);\n            delete this._setFocusedTimer;\n        }\n\n        if (this._isFocused === hasFocused) {\n            return;\n        }\n\n        const element = this._element.get();\n\n        if (element) {\n            if (hasFocused) {\n                this._isFocused = true;\n                triggerEvent<Types.RootFocusEventDetails>(\n                    this._tabster.root.eventTarget,\n                    \"focus\",\n                    { element, fromAdjacent }\n                );\n            } else {\n                this._setFocusedTimer = this._tabster\n                    .getWindow()\n                    .setTimeout(() => {\n                        delete this._setFocusedTimer;\n                        this._isFocused = false;\n                        triggerEvent<Types.RootFocusEventDetails>(\n                            this._tabster.root.eventTarget,\n                            \"blur\",\n                            { element, fromAdjacent }\n                        );\n                    }, 0);\n            }\n        }\n    };\n\n    private _onFocus = (e: HTMLElement | undefined) => {\n        const win = this._tabster.getWindow();\n\n        if (this._setTabbableTimer) {\n            win.clearTimeout(this._setTabbableTimer);\n            delete this._setTabbableTimer;\n        }\n\n        if (e) {\n            const ctx = RootAPI.getTabsterContext(this._tabster, e);\n\n            if (ctx) {\n                this._setFocused(ctx.root.getElement() === this._element.get());\n            }\n\n            if (!ctx || ctx.uncontrolled || this._tabster.rootDummyInputs) {\n                this._dummyManager?.setTabbable(false);\n                return;\n            }\n        } else {\n            this._setFocused(false);\n        }\n\n        this._setTabbableTimer = win.setTimeout(() => {\n            delete this._setTabbableTimer;\n            this._dummyManager?.setTabbable(true);\n        }, 0);\n    };\n\n    private _add(): void {\n        if (__DEV__) {\n            _setInformativeStyle(this._element, false, this.uid);\n        }\n    }\n\n    private _remove(): void {\n        if (__DEV__) {\n            _setInformativeStyle(this._element, true);\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateRootProps(props: Types.RootProps): void {\n    // TODO: Implement validation.\n}\n\nexport class RootAPI implements Types.RootAPI {\n    private _tabster: Types.TabsterCore;\n    private _win: Types.GetWindow;\n    private _initTimer: number | undefined;\n    private _autoRoot: Types.RootProps | undefined;\n    private _autoRootInstance: Root | undefined;\n    private _roots: Record<string, Types.Root> = {};\n    rootById: { [id: string]: Types.Root } = {};\n    eventTarget: EventTarget;\n\n    constructor(tabster: Types.TabsterCore, autoRoot?: Types.RootProps) {\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._initTimer = this._win().setTimeout(this._init, 0);\n        this._autoRoot = autoRoot;\n        this.eventTarget = createEventTarget(this._win);\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n    };\n\n    dispose(): void {\n        const win = this._win();\n\n        if (this._autoRootInstance) {\n            this._autoRootInstance.dispose();\n            delete this._autoRootInstance;\n            delete this._autoRoot;\n        }\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        Object.keys(this._roots).forEach((rootId) => {\n            if (this._roots[rootId]) {\n                this._roots[rootId].dispose();\n                delete this._roots[rootId];\n            }\n        });\n\n        this.rootById = {};\n    }\n\n    createRoot(element: HTMLElement, props: Types.RootProps): Types.Root {\n        if (__DEV__) {\n            validateRootProps(props);\n        }\n\n        const newRoot = new Root(\n            this._tabster,\n            element,\n            this._onRootDispose,\n            props\n        ) as Types.Root;\n\n        this._roots[newRoot.id] = newRoot;\n\n        return newRoot;\n    }\n\n    static getRootByUId(\n        getWindow: Types.GetWindow,\n        id: string\n    ): Types.Root | undefined {\n        const tabster = (getWindow() as WindowWithTabsterInstance)\n            .__tabsterInstance;\n        return tabster && (tabster.root as RootAPI).rootById[id];\n    }\n\n    /**\n     * Fetches the tabster context for an element walking up its ancestors\n     *\n     * @param tabster Tabster instance\n     * @param element The element the tabster context should represent\n     * @param options Additional options\n     * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations\n     */\n    static getTabsterContext(\n        tabster: Types.TabsterCore,\n        element: Node,\n        options: Types.GetTabsterContextOptions = {}\n    ): Types.TabsterContext | undefined {\n        if (!element.ownerDocument) {\n            return undefined;\n        }\n\n        const checkRtl = options.checkRtl;\n        let root: Types.Root | undefined;\n        let modalizer: Types.Modalizer | undefined;\n        let groupper: Types.Groupper | undefined;\n        let mover: Types.Mover | undefined;\n        let isExcludedFromMover = false;\n        let isGroupperFirst: boolean | undefined;\n        let isRtl: boolean | undefined;\n        let uncontrolled: HTMLElement | undefined;\n        let curElement: Node | null = element;\n        const ignoreKeydown: Types.FocusableProps[\"ignoreKeydown\"] = {};\n\n        while (curElement && (!root || checkRtl)) {\n            const tabsterOnElement = getTabsterOnElement(\n                tabster,\n                curElement as HTMLElement\n            );\n\n            if (checkRtl && isRtl === undefined) {\n                const dir = (curElement as HTMLElement).dir;\n\n                if (dir) {\n                    isRtl = dir.toLowerCase() === \"rtl\";\n                }\n            }\n\n            if (!tabsterOnElement) {\n                curElement = curElement.parentElement;\n                continue;\n            }\n\n            if (tabsterOnElement.uncontrolled) {\n                uncontrolled = curElement as HTMLElement;\n            }\n\n            if (\n                !mover &&\n                tabsterOnElement.focusable?.excludeFromMover &&\n                !groupper\n            ) {\n                isExcludedFromMover = true;\n            }\n\n            const curGroupper = tabsterOnElement.groupper;\n            const curMover = tabsterOnElement.mover;\n\n            if (!groupper && curGroupper) {\n                groupper = curGroupper;\n            }\n\n            if (!mover && curMover) {\n                mover = curMover;\n                isGroupperFirst = !!groupper;\n            }\n\n            if (!modalizer && tabsterOnElement.modalizer) {\n                modalizer = tabsterOnElement.modalizer;\n            }\n\n            if (tabsterOnElement.root) {\n                root = tabsterOnElement.root;\n            }\n\n            if (tabsterOnElement.focusable?.ignoreKeydown) {\n                Object.assign(\n                    ignoreKeydown,\n                    tabsterOnElement.focusable.ignoreKeydown\n                );\n            }\n\n            curElement = curElement.parentElement;\n        }\n\n        // No root element could be found, try to get an auto root\n        if (!root) {\n            const rootAPI = tabster.root as RootAPI;\n            const autoRoot = rootAPI._autoRoot;\n\n            if (autoRoot && !rootAPI._autoRootInstance) {\n                const body = element.ownerDocument?.body;\n\n                if (body) {\n                    rootAPI._autoRootInstance = new Root(\n                        rootAPI._tabster,\n                        body,\n                        rootAPI._onRootDispose,\n                        autoRoot\n                    );\n                }\n            }\n\n            root = rootAPI._autoRootInstance;\n        }\n\n        if (groupper && !mover) {\n            isGroupperFirst = true;\n        }\n\n        return root\n            ? {\n                  root,\n                  modalizer,\n                  groupper,\n                  mover,\n                  isGroupperFirst,\n                  isRtl: checkRtl ? !!isRtl : undefined,\n                  uncontrolled,\n                  isExcludedFromMover,\n                  ignoreKeydown,\n              }\n            : undefined;\n    }\n\n    onRoot(root: Types.Root, removed?: boolean): void {\n        if (removed) {\n            delete this.rootById[root.uid];\n        } else {\n            this.rootById[root.uid] = root;\n        }\n    }\n\n    private _onRootDispose = (root: Root) => {\n        delete this._roots[root.id];\n    };\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getTabsterOnElement } from \"./Instance\";\nimport { RootAPI } from \"./Root\";\nimport * as Types from \"./Types\";\nimport {\n    documentContains,\n    getElementUId,\n    getPromise,\n    TabsterPart,\n    triggerEvent,\n    WeakHTMLElement,\n} from \"./Utils\";\n\nconst _containerHistoryLength = 10;\n\nexport abstract class DeloserItemBase<C> {\n    abstract resetFocus(): Promise<boolean>;\n    abstract belongsTo(deloser: C): boolean;\n}\n\nexport class DeloserItem extends DeloserItemBase<Types.Deloser> {\n    readonly uid: string;\n    private _tabster: Types.TabsterCore;\n    private _deloser: Types.Deloser;\n\n    constructor(tabster: Types.TabsterCore, deloser: Types.Deloser) {\n        super();\n        this.uid = deloser.uid;\n        this._tabster = tabster;\n        this._deloser = deloser;\n    }\n\n    belongsTo(deloser: Types.Deloser): boolean {\n        return deloser === this._deloser;\n    }\n\n    unshift(element: HTMLElement): void {\n        this._deloser.unshift(element);\n    }\n\n    async focusAvailable(): Promise<boolean> {\n        const available = this._deloser.findAvailable();\n        return available\n            ? this._tabster.focusedElement.focus(available)\n            : false;\n    }\n\n    async resetFocus(): Promise<boolean> {\n        const getWindow = this._tabster.getWindow;\n        return getPromise(getWindow).resolve(this._deloser.resetFocus());\n    }\n}\n\nexport abstract class DeloserHistoryByRootBase<\n    I,\n    D extends DeloserItemBase<I>\n> {\n    protected _tabster: Types.TabsterCore;\n    protected _history: D[] = [];\n    readonly rootUId: string;\n\n    constructor(tabster: Types.TabsterCore, rootUId: string) {\n        this._tabster = tabster;\n        this.rootUId = rootUId;\n    }\n\n    getLength(): number {\n        return this._history.length;\n    }\n\n    removeDeloser(deloser: I): void {\n        this._history = this._history.filter((c) => !c.belongsTo(deloser));\n    }\n\n    hasDeloser(deloser: I): boolean {\n        return this._history.some((d) => d.belongsTo(deloser));\n    }\n\n    abstract focusAvailable(from: I | null): Promise<boolean>;\n    abstract resetFocus(from: I | null): Promise<boolean>;\n}\n\nclass DeloserHistoryByRoot extends DeloserHistoryByRootBase<\n    Types.Deloser,\n    DeloserItem\n> {\n    unshiftToDeloser(deloser: Types.Deloser, element: HTMLElement): void {\n        let item: DeloserItem | undefined;\n\n        for (let i = 0; i < this._history.length; i++) {\n            if (this._history[i].belongsTo(deloser)) {\n                item = this._history[i];\n                this._history.splice(i, 1);\n                break;\n            }\n        }\n\n        if (!item) {\n            item = new DeloserItem(this._tabster, deloser);\n        }\n\n        item.unshift(element);\n\n        this._history.unshift(item);\n\n        this._history.splice(\n            _containerHistoryLength,\n            this._history.length - _containerHistoryLength\n        );\n    }\n\n    async focusAvailable(from: Types.Deloser | null): Promise<boolean> {\n        let skip = !!from;\n\n        for (const i of this._history) {\n            if (from && i.belongsTo(from)) {\n                skip = false;\n            }\n\n            if (!skip && (await i.focusAvailable())) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    async resetFocus(from: Types.Deloser | null): Promise<boolean> {\n        let skip = !!from;\n        const resetQueue: { [id: string]: DeloserItem } = {};\n\n        for (const i of this._history) {\n            if (from && i.belongsTo(from)) {\n                skip = false;\n            }\n\n            if (!skip && !resetQueue[i.uid]) {\n                resetQueue[i.uid] = i;\n            }\n        }\n\n        // Nothing is found, at least try to reset.\n        for (const id of Object.keys(resetQueue)) {\n            if (await resetQueue[id].resetFocus()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport class DeloserHistory {\n    private _tabster: Types.TabsterCore;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    private _history: DeloserHistoryByRootBase<\n        unknown,\n        DeloserItemBase<unknown>\n    >[] = [];\n\n    constructor(tabster: Types.TabsterCore) {\n        this._tabster = tabster;\n    }\n\n    dispose(): void {\n        this._history = [];\n    }\n\n    process(element: HTMLElement): Types.Deloser | undefined {\n        const ctx = RootAPI.getTabsterContext(this._tabster, element);\n        const rootUId = ctx && ctx.root.uid;\n        const deloser = DeloserAPI.getDeloser(this._tabster, element);\n\n        if (!rootUId || !deloser) {\n            return undefined;\n        }\n\n        const historyByRoot = this.make(\n            rootUId,\n            () => new DeloserHistoryByRoot(this._tabster, rootUId)\n        );\n\n        if (!ctx || !ctx.modalizer || ctx.modalizer?.isActive()) {\n            historyByRoot.unshiftToDeloser(deloser, element);\n        }\n\n        return deloser;\n    }\n\n    make<\n        I,\n        D extends DeloserItemBase<I>,\n        C extends DeloserHistoryByRootBase<I, D>\n    >(rootUId: string, createInstance: () => C): C {\n        let historyByRoot: C | undefined;\n\n        for (let i = 0; i < this._history.length; i++) {\n            const hbr = this._history[i] as C;\n\n            if (hbr.rootUId === rootUId) {\n                historyByRoot = hbr;\n                this._history.splice(i, 1);\n                break;\n            }\n        }\n\n        if (!historyByRoot) {\n            historyByRoot = createInstance();\n        }\n\n        this._history.unshift(historyByRoot);\n\n        this._history.splice(\n            _containerHistoryLength,\n            this._history.length - _containerHistoryLength\n        );\n\n        return historyByRoot;\n    }\n\n    removeDeloser(deloser: Types.Deloser): void {\n        this._history.forEach((i) => {\n            i.removeDeloser(deloser);\n        });\n\n        this._history = this._history.filter((i) => i.getLength() > 0);\n    }\n\n    async focusAvailable(from: Types.Deloser | null): Promise<boolean> {\n        let skip = !!from;\n\n        for (const h of this._history) {\n            if (from && h.hasDeloser(from)) {\n                skip = false;\n            }\n\n            if (!skip && (await h.focusAvailable(from))) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    async resetFocus(from: Types.Deloser | null): Promise<boolean> {\n        let skip = !!from;\n\n        for (const h of this._history) {\n            if (from && h.hasDeloser(from)) {\n                skip = false;\n            }\n\n            if (!skip && (await h.resetFocus(from))) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nfunction _setInformativeStyle(\n    weakElement: WeakHTMLElement,\n    remove: boolean,\n    isActive?: boolean,\n    snapshotIndex?: number\n): void {\n    if (__DEV__) {\n        const element = weakElement.get();\n\n        if (element) {\n            if (remove) {\n                element.style.removeProperty(\"--tabster-deloser\");\n            } else {\n                element.style.setProperty(\n                    \"--tabster-deloser\",\n                    (isActive ? \"active\" : \"inactive\") +\n                        \",\" +\n                        (\"snapshot-\" + snapshotIndex)\n                );\n            }\n        }\n    }\n}\n\nfunction buildElementSelector(\n    element: HTMLElement,\n    withClass?: boolean,\n    withIndex?: boolean\n): string {\n    const selector: string[] = [];\n    const escapeRegExp = /(:|\\.|\\[|\\]|,|=|@)/g;\n    const escapeReplaceValue = \"\\\\$1\";\n\n    if (element.id) {\n        selector.push(\n            \"#\" + element.id.replace(escapeRegExp, escapeReplaceValue)\n        );\n    }\n\n    if (withClass !== false && element.className) {\n        element.className.split(\" \").forEach((cls) => {\n            cls = cls.trim();\n\n            if (cls) {\n                selector.push(\n                    \".\" + cls.replace(escapeRegExp, escapeReplaceValue)\n                );\n            }\n        });\n    }\n\n    let index = 0;\n    let el: Element | null;\n\n    if (withIndex !== false && selector.length === 0) {\n        el = element;\n        while (el) {\n            index++;\n            el = el.previousElementSibling;\n        }\n        selector.unshift(\":nth-child(\" + index + \")\");\n    }\n\n    selector.unshift(element.tagName.toLowerCase());\n\n    return selector.join(\"\");\n}\n\nfunction buildSelector(element: HTMLElement): string | undefined {\n    if (!documentContains(element.ownerDocument, element)) {\n        return undefined;\n    }\n\n    const selector: string[] = [buildElementSelector(element)];\n\n    let el = element.parentElement;\n\n    while (el) {\n        const isBody = el.tagName === \"BODY\";\n        selector.unshift(buildElementSelector(el, false, !isBody));\n\n        if (isBody) {\n            break;\n        }\n\n        el = el.parentElement;\n    }\n\n    return selector.join(\" \");\n}\n\nexport class Deloser\n    extends TabsterPart<Types.DeloserProps>\n    implements Types.Deloser\n{\n    readonly uid: string;\n    private _isActive = false;\n    private _history: WeakHTMLElement<HTMLElement, string>[][] = [[]];\n    private _snapshotIndex = 0;\n    private _onDispose: (deloser: Deloser) => void;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        onDispose: (deloser: Deloser) => void,\n        props: Types.DeloserProps\n    ) {\n        super(tabster, element, props);\n\n        this.uid = getElementUId(tabster.getWindow, element);\n        this._onDispose = onDispose;\n\n        if (__DEV__) {\n            _setInformativeStyle(\n                this._element,\n                false,\n                this._isActive,\n                this._snapshotIndex\n            );\n        }\n    }\n\n    dispose(): void {\n        this._remove();\n\n        this._onDispose(this);\n\n        this._isActive = false;\n        this._snapshotIndex = 0;\n\n        this._props = {};\n        this._history = [];\n    }\n\n    isActive = (): boolean => {\n        return this._isActive;\n    };\n\n    setActive(active: boolean): void {\n        this._isActive = active;\n\n        if (__DEV__) {\n            _setInformativeStyle(\n                this._element,\n                false,\n                this._isActive,\n                this._snapshotIndex\n            );\n        }\n    }\n\n    getActions(): Types.DeloserElementActions {\n        return {\n            focusDefault: this.focusDefault,\n            focusFirst: this.focusFirst,\n            resetFocus: this.resetFocus,\n            clearHistory: this.clearHistory,\n            setSnapshot: this.setSnapshot,\n            isActive: this.isActive,\n        };\n    }\n\n    setSnapshot = (index: number): void => {\n        this._snapshotIndex = index;\n\n        if (this._history.length > index + 1) {\n            this._history.splice(index + 1, this._history.length - index - 1);\n        }\n\n        if (!this._history[index]) {\n            this._history[index] = [];\n        }\n\n        if (__DEV__) {\n            _setInformativeStyle(\n                this._element,\n                false,\n                this._isActive,\n                this._snapshotIndex\n            );\n        }\n    };\n\n    focusFirst = (): boolean => {\n        const e = this._element.get();\n        return !!e && this._tabster.focusedElement.focusFirst({ container: e });\n    };\n\n    unshift(element: HTMLElement): void {\n        let cur = this._history[this._snapshotIndex];\n\n        cur = this._history[this._snapshotIndex] = cur.filter((we) => {\n            const e = we.get();\n            return e && e !== element;\n        });\n\n        cur.unshift(\n            new WeakHTMLElement(\n                this._tabster.getWindow,\n                element,\n                buildSelector(element)\n            )\n        );\n\n        while (cur.length > _containerHistoryLength) {\n            cur.pop();\n        }\n    }\n\n    focusDefault = (): boolean => {\n        const e = this._element.get();\n        return !!e && this._tabster.focusedElement.focusDefault(e);\n    };\n\n    resetFocus = (): boolean => {\n        const e = this._element.get();\n        return !!e && this._tabster.focusedElement.resetFocus(e);\n    };\n\n    findAvailable(): HTMLElement | null {\n        const element = this._element.get();\n\n        if (!element || !this._tabster.focusable.isVisible(element)) {\n            return null;\n        }\n\n        let restoreFocusOrder = this._props.restoreFocusOrder;\n        let available: HTMLElement | null = null;\n\n        const ctx = RootAPI.getTabsterContext(this._tabster, element);\n\n        if (!ctx) {\n            return null;\n        }\n\n        const root = ctx.root;\n        const rootElement = root.getElement();\n\n        if (!rootElement) {\n            return null;\n        }\n\n        if (restoreFocusOrder === undefined) {\n            restoreFocusOrder = root.getProps().restoreFocusOrder;\n        }\n\n        if (restoreFocusOrder === Types.RestoreFocusOrders.RootDefault) {\n            available = this._tabster.focusable.findDefault({\n                container: rootElement,\n            });\n        }\n\n        if (\n            !available &&\n            restoreFocusOrder === Types.RestoreFocusOrders.RootFirst\n        ) {\n            available = this._findFirst(rootElement);\n        }\n\n        if (available) {\n            return available;\n        }\n\n        const availableInHistory = this._findInHistory();\n        const availableDefault = this._tabster.focusable.findDefault({\n            container: element,\n        });\n        const availableFirst = this._findFirst(element);\n\n        if (\n            availableInHistory &&\n            restoreFocusOrder === Types.RestoreFocusOrders.History\n        ) {\n            return availableInHistory;\n        }\n\n        if (\n            availableDefault &&\n            restoreFocusOrder === Types.RestoreFocusOrders.DeloserDefault\n        ) {\n            return availableDefault;\n        }\n\n        if (\n            availableFirst &&\n            restoreFocusOrder === Types.RestoreFocusOrders.DeloserFirst\n        ) {\n            return availableFirst;\n        }\n\n        return availableDefault || availableInHistory || availableFirst || null;\n    }\n\n    clearHistory = (preserveExisting?: boolean): void => {\n        const element = this._element.get();\n\n        if (!element) {\n            this._history[this._snapshotIndex] = [];\n\n            return;\n        }\n\n        this._history[this._snapshotIndex] = this._history[\n            this._snapshotIndex\n        ].filter((we) => {\n            const e = we.get();\n            return e && preserveExisting ? element.contains(e) : false;\n        });\n    };\n\n    customFocusLostHandler(element: HTMLElement): boolean {\n        return triggerEvent(element, Types.DeloserEventName, this.getActions());\n    }\n\n    private _findInHistory(): HTMLElement | null {\n        const cur = this._history[this._snapshotIndex].slice(0);\n\n        this.clearHistory(true);\n\n        for (let i = 0; i < cur.length; i++) {\n            const we = cur[i];\n            const e = we.get();\n            const element = this._element.get();\n\n            if (e && element && element.contains(e)) {\n                if (this._tabster.focusable.isFocusable(e)) {\n                    return e;\n                }\n            } else if (!this._props.noSelectorCheck) {\n                // Element is not in the DOM, try to locate the node by it's\n                // selector. This might return not exactly the right node,\n                // but it would be easily fixable by having more detailed selectors.\n                const selector = we.getData();\n\n                if (selector && element) {\n                    let els: NodeListOf<Element>;\n\n                    try {\n                        els = element.ownerDocument.querySelectorAll(selector);\n                    } catch (e) {\n                        if (__DEV__) {\n                            // This should never happen, unless there is some bug in buildElementSelector().\n                            console.error(\n                                `Failed to querySelectorAll('${selector}')`\n                            );\n                        }\n                        continue;\n                    }\n\n                    for (let i = 0; i < els.length; i++) {\n                        const el = els[i] as HTMLElement;\n\n                        if (el && this._tabster.focusable.isFocusable(el)) {\n                            return el;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private _findFirst(element: HTMLElement): HTMLElement | null {\n        if (this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n            const first = this._tabster.focusable.findFirst({\n                container: element,\n            });\n\n            if (first) {\n                return first;\n            }\n        }\n\n        return null;\n    }\n\n    private _remove(): void {\n        if (__DEV__) {\n            _setInformativeStyle(this._element, true);\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateDeloserProps(props: Types.DeloserProps): void {\n    // TODO: Implement validation.\n}\n\nexport class DeloserAPI implements Types.DeloserAPI {\n    private _tabster: Types.TabsterCore;\n    private _win: Types.GetWindow;\n    private _initTimer: number | undefined;\n    /**\n     * Tracks if focus is inside a deloser\n     */\n    private _inDeloser = false;\n    private _curDeloser: Types.Deloser | undefined;\n    private _history: DeloserHistory;\n    private _restoreFocusTimer: number | undefined;\n    private _isRestoringFocus = false;\n    private _isPaused = false;\n    private _autoDeloser: Types.DeloserProps | undefined;\n    private _autoDeloserInstance: Deloser | undefined;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        props?: { autoDeloser: Types.DeloserProps }\n    ) {\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._history = new DeloserHistory(tabster);\n        this._initTimer = this._win().setTimeout(this._init, 0);\n\n        const autoDeloser = props?.autoDeloser;\n        if (autoDeloser) {\n            this._autoDeloser = autoDeloser;\n        }\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n\n    dispose(): void {\n        const win = this._win();\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        if (this._restoreFocusTimer) {\n            win.clearTimeout(this._restoreFocusTimer);\n            this._restoreFocusTimer = undefined;\n        }\n\n        if (this._autoDeloserInstance) {\n            this._autoDeloserInstance.dispose();\n            delete this._autoDeloserInstance;\n            delete this._autoDeloser;\n        }\n\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        this._history.dispose();\n\n        delete this._curDeloser;\n    }\n\n    createDeloser(\n        element: HTMLElement,\n        props: Types.DeloserProps\n    ): Types.Deloser {\n        if (__DEV__) {\n            validateDeloserProps(props);\n        }\n\n        const deloser = new Deloser(\n            this._tabster,\n            element,\n            this._onDeloserDispose,\n            props\n        );\n\n        if (\n            element.contains(\n                this._tabster.focusedElement.getFocusedElement() ?? null\n            )\n        ) {\n            this._activate(deloser);\n        }\n\n        return deloser;\n    }\n\n    getActions(element: HTMLElement): Types.DeloserElementActions | undefined {\n        for (let e: HTMLElement | null = element; e; e = e.parentElement) {\n            const tabsterOnElement = getTabsterOnElement(this._tabster, e);\n\n            if (tabsterOnElement && tabsterOnElement.deloser) {\n                return tabsterOnElement.deloser.getActions();\n            }\n        }\n\n        return undefined;\n    }\n\n    pause(): void {\n        this._isPaused = true;\n\n        if (this._restoreFocusTimer) {\n            this._win().clearTimeout(this._restoreFocusTimer);\n            this._restoreFocusTimer = undefined;\n        }\n    }\n\n    resume(restore?: boolean): void {\n        this._isPaused = false;\n\n        if (restore) {\n            this._scheduleRestoreFocus();\n        }\n    }\n\n    private _onFocus = (e: HTMLElement | undefined): void => {\n        if (this._restoreFocusTimer) {\n            this._win().clearTimeout(this._restoreFocusTimer);\n            this._restoreFocusTimer = undefined;\n        }\n\n        if (!e) {\n            this._scheduleRestoreFocus();\n\n            return;\n        }\n\n        const deloser = this._history.process(e);\n\n        if (deloser) {\n            this._activate(deloser);\n        } else {\n            this._deactivate();\n        }\n    };\n\n    /**\n     * Activates and sets the current deloser\n     */\n    private _activate(deloser: Types.Deloser) {\n        const curDeloser = this._curDeloser;\n        if (curDeloser !== deloser) {\n            this._inDeloser = true;\n            curDeloser?.setActive(false);\n            deloser.setActive(true);\n            this._curDeloser = deloser;\n        }\n    }\n\n    /**\n     * Called when focus should no longer be in a deloser\n     */\n    private _deactivate() {\n        this._inDeloser = false;\n        this._curDeloser?.setActive(false);\n        this._curDeloser = undefined;\n    }\n\n    private _scheduleRestoreFocus(force?: boolean): void {\n        if (this._isPaused || this._isRestoringFocus) {\n            return;\n        }\n\n        const restoreFocus = async () => {\n            this._restoreFocusTimer = undefined;\n            const lastFocused =\n                this._tabster.focusedElement.getLastFocusedElement();\n\n            if (\n                !force &&\n                (this._isRestoringFocus ||\n                    !this._inDeloser ||\n                    !!lastFocused?.offsetParent)\n            ) {\n                return;\n            }\n\n            const curDeloser = this._curDeloser;\n            if (curDeloser) {\n                if (\n                    lastFocused &&\n                    curDeloser.customFocusLostHandler(lastFocused)\n                ) {\n                    return;\n                }\n\n                const el = curDeloser.findAvailable();\n\n                if (el && this._tabster.focusedElement.focus(el)) {\n                    return;\n                }\n            }\n\n            this._deactivate();\n\n            this._isRestoringFocus = true;\n\n            if (!(await this._history.focusAvailable(null))) {\n                await this._history.resetFocus(null);\n            }\n\n            this._isRestoringFocus = false;\n        };\n\n        if (force) {\n            restoreFocus();\n        } else {\n            this._restoreFocusTimer = this._win().setTimeout(restoreFocus, 100);\n        }\n    }\n\n    static getDeloser(\n        tabster: Types.TabsterCore,\n        element: HTMLElement\n    ): Types.Deloser | undefined {\n        for (let e: HTMLElement | null = element; e; e = e.parentElement) {\n            const tabsterOnElement = getTabsterOnElement(tabster, e);\n\n            if (tabsterOnElement && tabsterOnElement.deloser) {\n                return tabsterOnElement.deloser;\n            }\n        }\n\n        const deloserAPI = tabster.deloser && (tabster.deloser as DeloserAPI);\n\n        if (deloserAPI) {\n            if (deloserAPI._autoDeloserInstance) {\n                return deloserAPI._autoDeloserInstance;\n            }\n\n            const autoDeloserProps = deloserAPI._autoDeloser;\n\n            if (!deloserAPI._autoDeloserInstance && autoDeloserProps) {\n                const body = element.ownerDocument?.body;\n\n                if (body) {\n                    deloserAPI._autoDeloserInstance = new Deloser(\n                        tabster,\n                        body,\n                        (tabster.deloser as DeloserAPI)._onDeloserDispose,\n                        autoDeloserProps\n                    );\n                }\n            }\n\n            return deloserAPI._autoDeloserInstance;\n        }\n\n        return undefined;\n    }\n\n    private _onDeloserDispose = (deloser: Deloser) => {\n        this._history.removeDeloser(deloser);\n\n        if (deloser.isActive()) {\n            this._scheduleRestoreFocus();\n        }\n    };\n\n    static getHistory(instance: Types.DeloserAPI): DeloserHistory {\n        return (instance as DeloserAPI)._history;\n    }\n\n    static forceRestoreFocus(instance: Types.DeloserAPI): void {\n        (instance as DeloserAPI)._scheduleRestoreFocus(true);\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    DeloserAPI,\n    DeloserHistoryByRootBase,\n    DeloserItemBase,\n} from \"./Deloser\";\nimport { getTabsterOnElement } from \"./Instance\";\nimport { KeyboardNavigationState } from \"./State/KeyboardNavigation\";\nimport { RootAPI } from \"./Root\";\nimport { Subscribable } from \"./State/Subscribable\";\nimport * as Types from \"./Types\";\nimport {\n    getElementUId,\n    getInstanceContext,\n    getPromise,\n    getUId,\n    getWindowUId,\n    HTMLElementWithUID,\n} from \"./Utils\";\n\nconst _transactionTimeout = 1500;\nconst _pingTimeout = 3000;\n\nconst _targetIdUp = \"up\";\n\nconst CrossOriginTransactionTypes: Types.CrossOriginTransactionTypes = {\n    Bootstrap: 1,\n    FocusElement: 2,\n    State: 3,\n    GetElement: 4,\n    RestoreFocusInDeloser: 5,\n    Ping: 6,\n};\n\ninterface CrossOriginInstanceContext {\n    ignoreKeyboardNavigationStateUpdate: boolean;\n    focusOwner?: string;\n    focusOwnerTimestamp?: number;\n    deloserByUId: { [uid: string]: Types.Deloser };\n    origOutlineSetup?: (props?: Partial<Types.OutlineProps>) => void;\n}\n\ninterface KnownTargets {\n    [id: string]: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        send: (payload: Types.CrossOriginTransactionData<any, any>) => void;\n        last?: number;\n    };\n}\n\nclass CrossOriginDeloserItem extends DeloserItemBase<CrossOriginDeloser> {\n    private _deloser: CrossOriginDeloser;\n    private _transactions: CrossOriginTransactions;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        deloser: CrossOriginDeloser,\n        trasactions: CrossOriginTransactions\n    ) {\n        super();\n        this._deloser = deloser;\n        this._transactions = trasactions;\n    }\n\n    belongsTo(deloser: CrossOriginDeloser): boolean {\n        return deloser.deloserUId === this._deloser.deloserUId;\n    }\n\n    async focusAvailable(): Promise<boolean> {\n        const data: RestoreFocusInDeloserTransactionData = {\n            ...this._deloser,\n            reset: false,\n        };\n\n        return this._transactions\n            .beginTransaction(RestoreFocusInDeloserTransaction, data)\n            .then((value) => !!value);\n    }\n\n    async resetFocus(): Promise<boolean> {\n        const data: RestoreFocusInDeloserTransactionData = {\n            ...this._deloser,\n            reset: true,\n        };\n\n        return this._transactions\n            .beginTransaction(RestoreFocusInDeloserTransaction, data)\n            .then((value) => !!value);\n    }\n}\n\nclass CrossOriginDeloserHistoryByRoot extends DeloserHistoryByRootBase<\n    CrossOriginDeloser,\n    CrossOriginDeloserItem\n> {\n    private _transactions: CrossOriginTransactions;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        rootUId: string,\n        transactions: CrossOriginTransactions\n    ) {\n        super(tabster, rootUId);\n        this._transactions = transactions;\n    }\n\n    unshift(deloser: CrossOriginDeloser): void {\n        let item: CrossOriginDeloserItem | undefined;\n\n        for (let i = 0; i < this._history.length; i++) {\n            if (this._history[i].belongsTo(deloser)) {\n                item = this._history[i];\n                this._history.splice(i, 1);\n                break;\n            }\n        }\n\n        if (!item) {\n            item = new CrossOriginDeloserItem(\n                this._tabster,\n                deloser,\n                this._transactions\n            );\n        }\n\n        this._history.unshift(item);\n\n        this._history.splice(10, this._history.length - 10);\n    }\n\n    async focusAvailable(): Promise<boolean> {\n        for (const i of this._history) {\n            if (await i.focusAvailable()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    async resetFocus(): Promise<boolean> {\n        for (const i of this._history) {\n            if (await i.resetFocus()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nabstract class CrossOriginTransaction<I, O> {\n    abstract type: Types.CrossOriginTransactionType;\n    readonly id: string;\n    readonly beginData: I;\n    readonly timeout?: number;\n    protected tabster: Types.TabsterCore;\n    protected endData: O | undefined;\n    protected owner: Types.GetWindow;\n    protected ownerId: string;\n    protected sendUp: Types.CrossOriginTransactionSend | undefined;\n    private _promise: Promise<O>;\n    protected _resolve: ((endData?: O | PromiseLike<O>) => void) | undefined;\n    private _reject: ((reason: string) => void) | undefined;\n    private _knownTargets: KnownTargets;\n    private _sentTo: Types.CrossOriginSentTo;\n    protected targetId: string | undefined;\n    private _inProgress: { [id: string]: boolean } = {};\n    private _isDone = false;\n    private _isSelfResponding = false;\n    private _sentCount = 0;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        getOwner: Types.GetWindow,\n        knownTargets: KnownTargets,\n        value: I,\n        timeout?: number,\n        sentTo?: Types.CrossOriginSentTo,\n        targetId?: string,\n        sendUp?: Types.CrossOriginTransactionSend\n    ) {\n        this.tabster = tabster;\n        this.owner = getOwner;\n        this.ownerId = getWindowUId(getOwner());\n        this.id = getUId(getOwner());\n        this.beginData = value;\n        this._knownTargets = knownTargets;\n        this._sentTo = sentTo || { [this.ownerId]: true };\n        this.targetId = targetId;\n        this.sendUp = sendUp;\n        this.timeout = timeout;\n        this._promise = new (getPromise(getOwner))<O>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n\n    protected getTargets(knownTargets: KnownTargets): KnownTargets | null {\n        return this.targetId === _targetIdUp\n            ? this.sendUp\n                ? { [_targetIdUp]: { send: this.sendUp } }\n                : null\n            : this.targetId\n            ? knownTargets[this.targetId]\n                ? {\n                      [this.targetId]: {\n                          send: knownTargets[this.targetId].send,\n                      },\n                  }\n                : null\n            : Object.keys(knownTargets).length === 0 && this.sendUp\n            ? { [_targetIdUp]: { send: this.sendUp } }\n            : Object.keys(knownTargets).length > 0\n            ? knownTargets\n            : null;\n    }\n\n    begin(\n        selfResponse?: (\n            data: Types.CrossOriginTransactionData<I, O>\n        ) => Promise<O | undefined>\n    ): Promise<O | undefined> {\n        const targets = this.getTargets(this._knownTargets);\n        const sentTo: Types.CrossOriginSentTo = { ...this._sentTo };\n\n        if (targets) {\n            for (const id of Object.keys(targets)) {\n                sentTo[id] = true;\n            }\n        }\n\n        const data: Types.CrossOriginTransactionData<I, O> = {\n            transaction: this.id,\n            type: this.type,\n            isResponse: false,\n            timestamp: Date.now(),\n            owner: this.ownerId,\n            sentto: sentTo,\n            timeout: this.timeout,\n            beginData: this.beginData,\n        };\n\n        if (this.targetId) {\n            data.target = this.targetId;\n        }\n\n        if (selfResponse) {\n            this._isSelfResponding = true;\n\n            selfResponse(data).then((value) => {\n                this._isSelfResponding = false;\n\n                if (value !== undefined) {\n                    if (!this.endData) {\n                        this.endData = value;\n                    }\n                }\n\n                if (this.endData || this._sentCount === 0) {\n                    this.end();\n                }\n            });\n        }\n\n        if (targets) {\n            for (const id of Object.keys(targets)) {\n                if (!(id in this._sentTo)) {\n                    this._send(targets[id].send, id, data);\n                }\n            }\n        }\n\n        if (this._sentCount === 0 && !this._isSelfResponding) {\n            this.end();\n        }\n\n        return this._promise;\n    }\n\n    private _send(\n        send: (data: Types.CrossOriginTransactionData<I, O>) => void,\n        targetId: string,\n        data: Types.CrossOriginTransactionData<I, O>\n    ) {\n        if (this._inProgress[targetId] === undefined) {\n            this._inProgress[targetId] = true;\n            this._sentCount++;\n            send(data);\n        }\n    }\n\n    end(error?: string): void {\n        if (this._isDone) {\n            return;\n        }\n\n        this._isDone = true;\n\n        if (this.endData === undefined && error) {\n            if (this._reject) {\n                this._reject(error);\n            }\n        } else if (this._resolve) {\n            this._resolve(this.endData);\n        }\n    }\n\n    onResponse(data: Types.CrossOriginTransactionData<I, O>): void {\n        const endData = data.endData;\n\n        if (endData !== undefined && !this.endData) {\n            this.endData = endData;\n        }\n\n        const inProgressId =\n            data.target === _targetIdUp ? _targetIdUp : data.owner;\n\n        if (this._inProgress[inProgressId]) {\n            this._inProgress[inProgressId] = false;\n            this._sentCount--;\n\n            if (\n                this.endData ||\n                (this._sentCount === 0 && !this._isSelfResponding)\n            ) {\n                this.end();\n            }\n        }\n    }\n}\n\ninterface CrossOriginTransactionClass<I, O> {\n    new (\n        tabster: Types.TabsterCore,\n        getOwner: Types.GetWindow,\n        knownTargets: KnownTargets,\n        value: I,\n        timeout?: number,\n        sentTo?: Types.CrossOriginSentTo,\n        targetId?: string,\n        sendUp?: Types.CrossOriginTransactionSend\n    ): CrossOriginTransaction<I, O>;\n    shouldForward?(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<I, O>,\n        getOwner: Types.GetWindow,\n        ownerId: string\n    ): boolean;\n    makeResponse(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<I, O>,\n        getOwner: Types.GetWindow,\n        ownerId: string,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<O | undefined>,\n        isSelfResponse?: boolean\n    ): Promise<O>;\n    shouldSelfRespond?(\n        tabster: Types.TabsterCore,\n        data: I,\n        getOwner: Types.GetWindow,\n        ownerId: string\n    ): boolean;\n}\n\ninterface BootstrapTransactionContents {\n    isNavigatingWithKeyboard: boolean;\n}\n\nclass BootstrapTransaction extends CrossOriginTransaction<\n    undefined,\n    BootstrapTransactionContents\n> {\n    type = CrossOriginTransactionTypes.Bootstrap;\n\n    static shouldForward() {\n        return false;\n    }\n\n    static async makeResponse(\n        tabster: Types.TabsterCore\n    ): Promise<BootstrapTransactionContents> {\n        return {\n            isNavigatingWithKeyboard:\n                tabster.keyboardNavigation.isNavigatingWithKeyboard(),\n        };\n    }\n}\n\ninterface CrossOriginElementDataIn {\n    uid?: string;\n    id?: string;\n    rootId?: string;\n    ownerId?: string;\n    observedName?: string;\n    /**\n     * Optionally wait if the element is accessible or focusable before returning it\n     */\n    accessibility?: Types.ObservedElementAccesibility;\n}\n\ninterface FocusElementData extends CrossOriginElementDataIn {\n    noFocusedProgrammaticallyFlag?: boolean;\n    noAccessibleCheck?: boolean;\n}\n\nclass FocusElementTransaction extends CrossOriginTransaction<\n    FocusElementData,\n    boolean\n> {\n    type = CrossOriginTransactionTypes.FocusElement;\n\n    static shouldSelfRespond() {\n        return true;\n    }\n\n    static shouldForward(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<FocusElementData, boolean>,\n        getOwner: Types.GetWindow\n    ): boolean {\n        const el = GetElementTransaction.findElement(\n            tabster,\n            getOwner,\n            data.beginData\n        );\n        return !el || !tabster.focusable.isFocusable(el);\n    }\n\n    static async makeResponse(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<FocusElementData, boolean>,\n        getOwner: Types.GetWindow,\n        ownerId: string,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<boolean | undefined>\n    ): Promise<boolean> {\n        const el = GetElementTransaction.findElement(\n            tabster,\n            getOwner,\n            data.beginData\n        );\n        return (\n            (!!el && tabster.focusedElement.focus(el, true)) ||\n            !!(await forwardResult)\n        );\n    }\n}\n\nconst CrossOriginStates: {\n    Focused: 1;\n    Blurred: 2;\n    Observed: 3;\n    DeadWindow: 4;\n    KeyboardNavigation: 5;\n    Outline: 6;\n} = {\n    Focused: 1,\n    Blurred: 2,\n    Observed: 3,\n    DeadWindow: 4,\n    KeyboardNavigation: 5,\n    Outline: 6,\n};\ntype CrossOriginState =\n    typeof CrossOriginStates[keyof typeof CrossOriginStates];\n\ninterface CrossOriginElementDataOut {\n    ownerUId: string;\n    uid?: string;\n    id?: string;\n    rootUId?: string;\n    deloserUId?: string;\n    observedName?: string;\n    observedDetails?: string;\n}\n\ninterface CrossOriginStateData extends CrossOriginElementDataOut {\n    state: CrossOriginState;\n    isFocusedProgrammatically?: boolean;\n    force?: boolean;\n    isNavigatingWithKeyboard?: boolean;\n    outline?: Partial<Types.OutlineProps>;\n}\n\nclass StateTransaction extends CrossOriginTransaction<\n    CrossOriginStateData,\n    true\n> {\n    type = CrossOriginTransactionTypes.State;\n\n    static shouldSelfRespond(\n        tabster: Types.TabsterCore,\n        data: CrossOriginStateData\n    ): boolean {\n        return (\n            data.state !== CrossOriginStates.DeadWindow &&\n            data.state !== CrossOriginStates.KeyboardNavigation\n        );\n    }\n\n    static async makeResponse(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<CrossOriginStateData, true>,\n        getOwner: Types.GetWindow,\n        ownerId: string,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<true | undefined>,\n        isSelfResponse?: boolean\n    ): Promise<true> {\n        const timestamp = data.timestamp;\n        const beginData = data.beginData;\n\n        if (timestamp && beginData) {\n            switch (beginData.state) {\n                case CrossOriginStates.Focused:\n                    return StateTransaction._makeFocusedResponse(\n                        tabster,\n                        timestamp,\n                        beginData,\n                        transactions,\n                        isSelfResponse\n                    );\n                case CrossOriginStates.Blurred:\n                    return StateTransaction._makeBlurredResponse(\n                        tabster,\n                        timestamp,\n                        beginData,\n                        transactions.ctx\n                    );\n                case CrossOriginStates.Observed:\n                    return StateTransaction._makeObservedResponse(\n                        tabster,\n                        beginData\n                    );\n                case CrossOriginStates.DeadWindow:\n                    return StateTransaction._makeDeadWindowResponse(\n                        tabster,\n                        beginData,\n                        transactions,\n                        forwardResult\n                    );\n                case CrossOriginStates.KeyboardNavigation:\n                    return StateTransaction._makeKeyboardNavigationResponse(\n                        tabster,\n                        transactions.ctx,\n                        beginData.isNavigatingWithKeyboard\n                    );\n                case CrossOriginStates.Outline:\n                    return StateTransaction._makeOutlineResponse(\n                        tabster,\n                        transactions.ctx,\n                        beginData.outline\n                    );\n            }\n        }\n\n        return true;\n    }\n\n    static createElement(\n        tabster: Types.TabsterCore,\n        beginData: CrossOriginElementDataOut\n    ): CrossOriginElement | null {\n        return beginData.uid\n            ? new CrossOriginElement(\n                  tabster,\n                  beginData.uid,\n                  beginData.ownerUId,\n                  beginData.id,\n                  beginData.rootUId,\n                  beginData.observedName,\n                  beginData.observedDetails\n              )\n            : null;\n    }\n\n    private static async _makeFocusedResponse(\n        tabster: Types.TabsterCore,\n        timestamp: number,\n        beginData: CrossOriginStateData,\n        transactions: CrossOriginTransactions,\n        isSelfResponse?: boolean\n    ): Promise<true> {\n        const element = StateTransaction.createElement(tabster, beginData);\n\n        if (beginData && beginData.ownerUId && element) {\n            transactions.ctx.focusOwner = beginData.ownerUId;\n            transactions.ctx.focusOwnerTimestamp = timestamp;\n\n            if (!isSelfResponse && beginData.rootUId && beginData.deloserUId) {\n                const deloserAPI = tabster.deloser;\n\n                if (deloserAPI) {\n                    const history = DeloserAPI.getHistory(deloserAPI);\n\n                    const deloser: CrossOriginDeloser = {\n                        ownerUId: beginData.ownerUId,\n                        deloserUId: beginData.deloserUId,\n                        rootUId: beginData.rootUId,\n                    };\n\n                    const historyItem = history.make(\n                        beginData.rootUId,\n                        () =>\n                            new CrossOriginDeloserHistoryByRoot(\n                                tabster,\n                                deloser.rootUId,\n                                transactions\n                            )\n                    );\n\n                    historyItem.unshift(deloser);\n                }\n            }\n\n            CrossOriginFocusedElementState.setVal(\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tabster.crossOrigin!.focusedElement,\n                element,\n                {\n                    isFocusedProgrammatically:\n                        beginData.isFocusedProgrammatically,\n                }\n            );\n        }\n\n        return true;\n    }\n\n    private static async _makeBlurredResponse(\n        tabster: Types.TabsterCore,\n        timestamp: number,\n        beginData: CrossOriginStateData,\n        context: CrossOriginInstanceContext\n    ): Promise<true> {\n        if (\n            beginData &&\n            (beginData.ownerUId === context.focusOwner || beginData.force) &&\n            (!context.focusOwnerTimestamp ||\n                context.focusOwnerTimestamp < timestamp)\n        ) {\n            CrossOriginFocusedElementState.setVal(\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tabster.crossOrigin!.focusedElement,\n                undefined,\n                {}\n            );\n        }\n\n        return true;\n    }\n\n    private static async _makeObservedResponse(\n        tabster: Types.TabsterCore,\n        beginData: CrossOriginStateData\n    ): Promise<true> {\n        const name = beginData.observedName;\n        const element = StateTransaction.createElement(tabster, beginData);\n\n        if (name && element) {\n            CrossOriginObservedElementState.trigger(\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tabster.crossOrigin!.observedElement,\n                element,\n                { names: [name], details: beginData.observedDetails }\n            );\n        }\n\n        return true;\n    }\n\n    private static async _makeDeadWindowResponse(\n        tabster: Types.TabsterCore,\n        beginData: CrossOriginStateData,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<true | undefined>\n    ): Promise<true> {\n        const deadUId = beginData && beginData.ownerUId;\n\n        if (deadUId) {\n            transactions.removeTarget(deadUId);\n        }\n\n        return forwardResult.then(() => {\n            if (deadUId === transactions.ctx.focusOwner) {\n                const deloserAPI = tabster.deloser;\n\n                if (deloserAPI) {\n                    DeloserAPI.forceRestoreFocus(deloserAPI);\n                }\n            }\n            return true;\n        });\n    }\n\n    private static async _makeKeyboardNavigationResponse(\n        tabster: Types.TabsterCore,\n        context: CrossOriginInstanceContext,\n        isNavigatingWithKeyboard?: boolean\n    ): Promise<true> {\n        if (\n            isNavigatingWithKeyboard !== undefined &&\n            tabster.keyboardNavigation.isNavigatingWithKeyboard() !==\n                isNavigatingWithKeyboard\n        ) {\n            context.ignoreKeyboardNavigationStateUpdate = true;\n            KeyboardNavigationState.setVal(\n                tabster.keyboardNavigation,\n                isNavigatingWithKeyboard\n            );\n            context.ignoreKeyboardNavigationStateUpdate = false;\n        }\n        return true;\n    }\n\n    private static async _makeOutlineResponse(\n        tabster: Types.TabsterCore,\n        context: CrossOriginInstanceContext,\n        props?: Partial<Types.OutlineProps>\n    ): Promise<true> {\n        if (context.origOutlineSetup) {\n            context.origOutlineSetup.call(\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tabster.outline!,\n                props\n            );\n        }\n        return true;\n    }\n}\n\nclass GetElementTransaction extends CrossOriginTransaction<\n    CrossOriginElementDataIn | undefined,\n    CrossOriginElementDataOut\n> {\n    type = CrossOriginTransactionTypes.GetElement;\n\n    static shouldSelfRespond() {\n        return true;\n    }\n\n    static findElement(\n        tabster: Types.TabsterCore,\n        getOwner: Types.GetWindow,\n        data?: CrossOriginElementDataIn\n    ): HTMLElement | null {\n        let element: HTMLElement | null | undefined;\n\n        if (\n            data &&\n            (!data.ownerId || data.ownerId === getWindowUId(getOwner()))\n        ) {\n            if (data.id) {\n                element = getOwner().document.getElementById(data.id);\n\n                if (element && data.rootId) {\n                    const ctx = RootAPI.getTabsterContext(tabster, element);\n\n                    if (!ctx || ctx.root.uid !== data.rootId) {\n                        return null;\n                    }\n                }\n            } else if (data.uid) {\n                const ref = getInstanceContext(getOwner).elementByUId[data.uid];\n                element = ref && ref.get();\n            } else if (data.observedName) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                element = tabster.observedElement!.getElement(\n                    data.observedName\n                );\n            }\n        }\n\n        return element || null;\n    }\n\n    static getElementData(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        getOwner: Types.GetWindow,\n        context: CrossOriginInstanceContext,\n        ownerUId: string\n    ): CrossOriginElementDataOut {\n        const deloser = DeloserAPI.getDeloser(tabster, element);\n        const ctx = RootAPI.getTabsterContext(tabster, element);\n        const tabsterOnElement = getTabsterOnElement(tabster, element);\n        const observed = tabsterOnElement && tabsterOnElement.observed;\n\n        return {\n            uid: getElementUId(getOwner, element),\n            ownerUId,\n            id: element.id || undefined,\n            rootUId: ctx ? ctx.root.uid : undefined,\n            deloserUId: deloser\n                ? getDeloserUID(getOwner, context, deloser)\n                : undefined,\n            observedName: observed && observed.names && observed.names[0],\n            observedDetails: observed && observed.details,\n        };\n    }\n\n    static async makeResponse(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<\n            CrossOriginElementDataIn | undefined,\n            CrossOriginElementDataOut\n        >,\n        getOwner: Types.GetWindow,\n        ownerUId: string,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<CrossOriginElementDataOut | undefined>\n    ): Promise<CrossOriginElementDataOut | undefined> {\n        const beginData = data.beginData;\n        let element: HTMLElement | undefined;\n        let dataOut: CrossOriginElementDataOut | undefined;\n\n        if (beginData === undefined) {\n            element = tabster.focusedElement.getFocusedElement();\n        } else if (beginData) {\n            element =\n                GetElementTransaction.findElement(\n                    tabster,\n                    getOwner,\n                    beginData\n                ) || undefined;\n        }\n\n        if (!element && beginData) {\n            const name = beginData.observedName;\n            const timeout = data.timeout;\n            const accessibility = beginData.accessibility;\n\n            if (name && timeout) {\n                const e: {\n                    element?: HTMLElement | null;\n                    crossOrigin?: CrossOriginElementDataOut;\n                } = await new (getPromise(getOwner))((resolve) => {\n                    let isWaitElementResolved = false;\n                    let isForwardResolved = false;\n                    let isResolved = false;\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    tabster\n                        .observedElement!.waitElement(\n                            name,\n                            timeout,\n                            accessibility\n                        )\n                        .result.then((value) => {\n                            isWaitElementResolved = true;\n\n                            if (!isResolved && (value || isForwardResolved)) {\n                                isResolved = true;\n                                resolve({ element: value });\n                            }\n                        });\n\n                    forwardResult.then((value) => {\n                        isForwardResolved = true;\n\n                        if (!isResolved && (value || isWaitElementResolved)) {\n                            isResolved = true;\n                            resolve({ crossOrigin: value });\n                        }\n                    });\n                });\n\n                if (e.element) {\n                    element = e.element;\n                } else if (e.crossOrigin) {\n                    dataOut = e.crossOrigin;\n                }\n            }\n        }\n\n        return element\n            ? GetElementTransaction.getElementData(\n                  tabster,\n                  element,\n                  getOwner,\n                  transactions.ctx,\n                  ownerUId\n              )\n            : dataOut;\n    }\n}\n\ninterface CrossOriginDeloser {\n    ownerUId: string;\n    deloserUId: string;\n    rootUId: string;\n}\n\ninterface RestoreFocusInDeloserTransactionData extends CrossOriginDeloser {\n    reset: boolean;\n}\n\nclass RestoreFocusInDeloserTransaction extends CrossOriginTransaction<\n    RestoreFocusInDeloserTransactionData,\n    boolean\n> {\n    type = CrossOriginTransactionTypes.RestoreFocusInDeloser;\n\n    static async makeResponse(\n        tabster: Types.TabsterCore,\n        data: Types.CrossOriginTransactionData<\n            RestoreFocusInDeloserTransactionData,\n            boolean\n        >,\n        getOwner: Types.GetWindow,\n        ownerId: string,\n        transactions: CrossOriginTransactions,\n        forwardResult: Promise<boolean | undefined>\n    ): Promise<boolean> {\n        const forwardRet = await forwardResult;\n        const begin = !forwardRet && data.beginData;\n        const uid = begin && begin.deloserUId;\n        const deloser = uid && transactions.ctx.deloserByUId[uid];\n        const deloserAPI = tabster.deloser;\n\n        if (begin && deloser && deloserAPI) {\n            const history = DeloserAPI.getHistory(deloserAPI);\n            return begin.reset\n                ? history.resetFocus(deloser)\n                : history.focusAvailable(deloser);\n        }\n\n        return !!forwardRet;\n    }\n}\n\nclass PingTransaction extends CrossOriginTransaction<undefined, true> {\n    type = CrossOriginTransactionTypes.Ping;\n\n    static shouldForward() {\n        return false;\n    }\n\n    static async makeResponse(): Promise<true> {\n        return true;\n    }\n}\n\ninterface CrossOriginTransactionWrapper<I, O> {\n    transaction: CrossOriginTransaction<I, O>;\n    timer?: number;\n}\n\nclass CrossOriginTransactions {\n    private _owner: Types.GetWindow;\n    private _ownerUId: string;\n    private _knownTargets: KnownTargets = {};\n    private _transactions: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [id: string]: CrossOriginTransactionWrapper<any, any>;\n    } = {};\n    private _tabster: Types.TabsterCore;\n    private _pingTimer: number | undefined;\n    private _isDefaultSendUp = false;\n    private _deadPromise: Promise<true | undefined> | undefined;\n    isSetUp = false;\n    sendUp: Types.CrossOriginTransactionSend | undefined;\n    ctx: CrossOriginInstanceContext;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        getOwner: Types.GetWindow,\n        context: CrossOriginInstanceContext\n    ) {\n        this._tabster = tabster;\n        this._owner = getOwner;\n        this._ownerUId = getWindowUId(getOwner());\n        this.ctx = context;\n    }\n\n    setup(\n        sendUp?: Types.CrossOriginTransactionSend | null\n    ): (msg: Types.CrossOriginMessage) => void {\n        if (this.isSetUp) {\n            if (__DEV__) {\n                console.error(\"CrossOrigin is already set up.\");\n            }\n        } else {\n            this.isSetUp = true;\n\n            this.setSendUp(sendUp);\n\n            this._owner().addEventListener(\"pagehide\", this._onPageHide);\n\n            this._ping();\n        }\n\n        return this._onMessage;\n    }\n\n    setSendUp(\n        sendUp?: Types.CrossOriginTransactionSend | null\n    ): (msg: Types.CrossOriginMessage) => void {\n        if (!this.isSetUp) {\n            throw new Error(\"CrossOrigin is not set up.\");\n        }\n\n        this.sendUp = sendUp || undefined;\n\n        const owner = this._owner();\n\n        if (sendUp === undefined) {\n            if (!this._isDefaultSendUp) {\n                if (owner.document) {\n                    this._isDefaultSendUp = true;\n\n                    if (\n                        owner.parent &&\n                        owner.parent !== owner &&\n                        owner.parent.postMessage\n                    ) {\n                        this.sendUp = (\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data: Types.CrossOriginTransactionData<any, any>\n                        ) => {\n                            owner.parent.postMessage(JSON.stringify(data), \"*\");\n                        };\n                    }\n\n                    owner.addEventListener(\"message\", this._onBrowserMessage);\n                }\n            }\n        } else if (this._isDefaultSendUp) {\n            owner.removeEventListener(\"message\", this._onBrowserMessage);\n            this._isDefaultSendUp = false;\n        }\n\n        return this._onMessage;\n    }\n\n    async dispose(): Promise<void> {\n        const owner = this._owner();\n\n        if (this._pingTimer) {\n            owner.clearTimeout(this._pingTimer);\n            this._pingTimer = undefined;\n        }\n\n        owner.removeEventListener(\"message\", this._onBrowserMessage);\n        owner.removeEventListener(\"pagehide\", this._onPageHide);\n\n        await this._dead();\n\n        delete this._deadPromise;\n\n        for (const id of Object.keys(this._transactions)) {\n            const t = this._transactions[id];\n\n            if (t.timer) {\n                owner.clearTimeout(t.timer);\n                delete t.timer;\n            }\n\n            t.transaction.end();\n        }\n\n        this._knownTargets = {};\n\n        delete this.sendUp;\n    }\n\n    beginTransaction<I, O>(\n        Transaction: CrossOriginTransactionClass<I, O>,\n        value: I,\n        timeout?: number,\n        sentTo?: Types.CrossOriginSentTo,\n        targetId?: string,\n        withReject?: boolean\n    ): Promise<O | undefined> {\n        if (!this._owner) {\n            return getPromise(this._owner).reject();\n        }\n\n        const transaction = new Transaction(\n            this._tabster,\n            this._owner,\n            this._knownTargets,\n            value,\n            timeout,\n            sentTo,\n            targetId,\n            this.sendUp\n        );\n        let selfResponse:\n            | ((\n                  data: Types.CrossOriginTransactionData<I, O>\n              ) => Promise<O | undefined>)\n            | undefined;\n\n        if (\n            Transaction.shouldSelfRespond &&\n            Transaction.shouldSelfRespond(\n                this._tabster,\n                value,\n                this._owner,\n                this._ownerUId\n            )\n        ) {\n            selfResponse = (data: Types.CrossOriginTransactionData<I, O>) => {\n                return Transaction.makeResponse(\n                    this._tabster,\n                    data,\n                    this._owner,\n                    this._ownerUId,\n                    this,\n                    getPromise(this._owner).resolve(undefined),\n                    true\n                );\n            };\n        }\n\n        return this._beginTransaction(\n            transaction,\n            timeout,\n            selfResponse,\n            withReject\n        );\n    }\n\n    removeTarget(uid: string): void {\n        delete this._knownTargets[uid];\n    }\n\n    private _beginTransaction<I, O>(\n        transaction: CrossOriginTransaction<I, O>,\n        timeout?: number,\n        selfResponse?: (\n            data: Types.CrossOriginTransactionData<I, O>\n        ) => Promise<O | undefined>,\n        withReject?: boolean\n    ): Promise<O | undefined> {\n        const owner = this._owner();\n\n        const wrapper: CrossOriginTransactionWrapper<I, O> = {\n            transaction,\n            timer: owner.setTimeout(() => {\n                delete wrapper.timer;\n                transaction.end(\"Cross origin transaction timed out.\");\n            }, _transactionTimeout + (timeout || 0)),\n        };\n\n        this._transactions[transaction.id] = wrapper;\n\n        const ret = transaction.begin(selfResponse);\n\n        ret.catch(() => {\n            /**/\n        }).finally(() => {\n            if (wrapper.timer) {\n                owner.clearTimeout(wrapper.timer);\n            }\n            delete this._transactions[transaction.id];\n        });\n\n        return ret.then(\n            (value) => value,\n            withReject ? undefined : () => undefined\n        );\n    }\n\n    forwardTransaction(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        data: Types.CrossOriginTransactionData<any, any>\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): Promise<any> {\n        const owner = this._owner;\n        let targetId = data.target;\n\n        if (targetId === this._ownerUId) {\n            return getPromise(owner).resolve();\n        }\n\n        const Transaction = this._getTransactionClass(data.type);\n\n        if (Transaction) {\n            if (\n                Transaction.shouldForward === undefined ||\n                Transaction.shouldForward(\n                    this._tabster,\n                    data,\n                    owner,\n                    this._ownerUId\n                )\n            ) {\n                const sentTo = data.sentto;\n\n                if (targetId === _targetIdUp) {\n                    targetId = undefined;\n                    sentTo[this._ownerUId] = true;\n                }\n\n                delete sentTo[_targetIdUp];\n\n                return this._beginTransaction(\n                    new Transaction(\n                        this._tabster,\n                        owner,\n                        this._knownTargets,\n                        data.beginData,\n                        data.timeout,\n                        sentTo,\n                        targetId,\n                        this.sendUp\n                    ),\n                    data.timeout\n                );\n            } else {\n                return getPromise(owner).resolve();\n            }\n        }\n\n        return getPromise(owner).reject(\n            `Unknown transaction type ${data.type}`\n        );\n    }\n\n    private _getTransactionClass(\n        type: Types.CrossOriginTransactionType\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): CrossOriginTransactionClass<any, any> | null {\n        switch (type) {\n            case CrossOriginTransactionTypes.Bootstrap:\n                return BootstrapTransaction;\n            case CrossOriginTransactionTypes.FocusElement:\n                return FocusElementTransaction;\n            case CrossOriginTransactionTypes.State:\n                return StateTransaction;\n            case CrossOriginTransactionTypes.GetElement:\n                return GetElementTransaction;\n            case CrossOriginTransactionTypes.RestoreFocusInDeloser:\n                return RestoreFocusInDeloserTransaction;\n            case CrossOriginTransactionTypes.Ping:\n                return PingTransaction;\n            default:\n                return null;\n        }\n    }\n\n    private _onMessage = (e: Types.CrossOriginMessage) => {\n        if (e.data.owner === this._ownerUId || !this._tabster) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const data: Types.CrossOriginTransactionData<any, any> = e.data;\n        let transactionId: string;\n\n        if (\n            !data ||\n            !(transactionId = data.transaction) ||\n            !data.type ||\n            !data.timestamp ||\n            !data.owner ||\n            !data.sentto\n        ) {\n            return;\n        }\n\n        let knownTarget = this._knownTargets[data.owner];\n\n        if (!knownTarget && e.send && data.owner !== this._ownerUId) {\n            knownTarget = this._knownTargets[data.owner] = { send: e.send };\n        }\n\n        if (knownTarget) {\n            knownTarget.last = Date.now();\n        }\n\n        if (data.isResponse) {\n            const t = this._transactions[transactionId];\n\n            if (t && t.transaction && t.transaction.type === data.type) {\n                t.transaction.onResponse(data);\n            }\n        } else {\n            const Transaction = this._getTransactionClass(data.type);\n\n            const forwardResult = this.forwardTransaction(data);\n\n            if (Transaction && e.send) {\n                Transaction.makeResponse(\n                    this._tabster,\n                    data,\n                    this._owner,\n                    this._ownerUId,\n                    this,\n                    forwardResult,\n                    false\n                ).then((r) => {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const response: Types.CrossOriginTransactionData<any, any> =\n                        {\n                            transaction: data.transaction,\n                            type: data.type,\n                            isResponse: true,\n                            timestamp: Date.now(),\n                            owner: this._ownerUId,\n                            timeout: data.timeout,\n                            sentto: {},\n                            target:\n                                data.target === _targetIdUp\n                                    ? _targetIdUp\n                                    : data.owner,\n                            endData: r,\n                        };\n\n                    e.send(response);\n                });\n            }\n        }\n    };\n\n    private _onPageHide = () => {\n        this._dead();\n    };\n\n    private async _dead(): Promise<void> {\n        if (!this._deadPromise && this.ctx.focusOwner === this._ownerUId) {\n            this._deadPromise = this.beginTransaction(StateTransaction, {\n                ownerUId: this._ownerUId,\n                state: CrossOriginStates.DeadWindow,\n            });\n        }\n\n        if (this._deadPromise) {\n            await this._deadPromise;\n        }\n    }\n\n    private async _ping(): Promise<void> {\n        if (this._pingTimer) {\n            return;\n        }\n\n        let deadWindows: { [key: string]: boolean } | undefined;\n        const now = Date.now();\n        const targets = Object.keys(this._knownTargets).filter(\n            (uid) => now - (this._knownTargets[uid].last || 0) > _pingTimeout\n        );\n\n        if (this.sendUp) {\n            targets.push(_targetIdUp);\n        }\n\n        if (targets.length) {\n            await getPromise(this._owner).all(\n                targets.map((uid) =>\n                    this.beginTransaction(\n                        PingTransaction,\n                        undefined,\n                        undefined,\n                        undefined,\n                        uid,\n                        true\n                    ).then(\n                        () => true,\n                        () => {\n                            if (uid !== _targetIdUp) {\n                                if (!deadWindows) {\n                                    deadWindows = {};\n                                }\n                                deadWindows[uid] = true;\n                                delete this._knownTargets[uid];\n                            }\n                            return false;\n                        }\n                    )\n                )\n            );\n        }\n\n        if (deadWindows) {\n            const focused = await this.beginTransaction(\n                GetElementTransaction,\n                undefined\n            );\n\n            if (\n                !focused &&\n                this.ctx.focusOwner &&\n                this.ctx.focusOwner in deadWindows\n            ) {\n                await this.beginTransaction(StateTransaction, {\n                    ownerUId: this._ownerUId,\n                    state: CrossOriginStates.Blurred,\n                    force: true,\n                });\n\n                const deloserAPI = this._tabster.deloser;\n\n                if (deloserAPI) {\n                    DeloserAPI.forceRestoreFocus(deloserAPI);\n                }\n            }\n        }\n\n        this._pingTimer = this._owner().setTimeout(() => {\n            this._pingTimer = undefined;\n            this._ping();\n        }, _pingTimeout);\n    }\n\n    private _onBrowserMessage = (e: MessageEvent) => {\n        if (e.source === this._owner()) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const send = (data: Types.CrossOriginTransactionData<any, any>) => {\n            if (e.source && e.source.postMessage) {\n                // eslint-disable-next-line @typescript-eslint/ban-types\n                (e.source.postMessage as Function)(JSON.stringify(data), \"*\");\n            }\n        };\n\n        try {\n            this._onMessage({\n                data: JSON.parse(e.data),\n                send,\n            });\n        } catch (e) {\n            /* Ignore */\n        }\n    };\n}\n\nexport class CrossOriginElement implements Types.CrossOriginElement {\n    private _tabster: Types.TabsterCore;\n    readonly uid: string;\n    readonly ownerId: string;\n    readonly id?: string;\n    readonly rootId?: string;\n    readonly observedName?: string;\n    readonly observedDetails?: string;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        uid: string,\n        ownerId: string,\n        id?: string,\n        rootId?: string,\n        observedName?: string,\n        observedDetails?: string\n    ) {\n        this._tabster = tabster;\n        this.uid = uid;\n        this.ownerId = ownerId;\n        this.id = id;\n        this.rootId = rootId;\n        this.observedName = observedName;\n        this.observedDetails = observedDetails;\n    }\n\n    focus(\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean> {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tabster.crossOrigin!.focusedElement.focus(\n            this,\n            noFocusedProgrammaticallyFlag,\n            noAccessibleCheck\n        );\n    }\n}\n\nexport class CrossOriginFocusedElementState\n    extends Subscribable<\n        CrossOriginElement | undefined,\n        Types.FocusedElementDetails\n    >\n    implements Types.CrossOriginFocusedElementState\n{\n    private _transactions: CrossOriginTransactions;\n\n    constructor(transactions: CrossOriginTransactions) {\n        super();\n        this._transactions = transactions;\n    }\n\n    async focus(\n        element: Types.CrossOriginElement,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean> {\n        return this._focus(\n            {\n                uid: element.uid,\n                id: element.id,\n                rootId: element.rootId,\n                ownerId: element.ownerId,\n                observedName: element.observedName,\n            },\n            noFocusedProgrammaticallyFlag,\n            noAccessibleCheck\n        );\n    }\n\n    async focusById(\n        elementId: string,\n        rootId?: string,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean> {\n        return this._focus(\n            { id: elementId, rootId },\n            noFocusedProgrammaticallyFlag,\n            noAccessibleCheck\n        );\n    }\n\n    async focusByObservedName(\n        observedName: string,\n        timeout?: number,\n        rootId?: string,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): Promise<boolean> {\n        return this._focus(\n            { observedName, rootId },\n            noFocusedProgrammaticallyFlag,\n            noAccessibleCheck,\n            timeout\n        );\n    }\n\n    private async _focus(\n        elementData: CrossOriginElementDataIn,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean,\n        timeout?: number\n    ): Promise<boolean> {\n        return this._transactions\n            .beginTransaction(\n                FocusElementTransaction,\n                {\n                    ...elementData,\n                    noFocusedProgrammaticallyFlag,\n                    noAccessibleCheck,\n                },\n                timeout\n            )\n            .then((value) => !!value);\n    }\n\n    static setVal(\n        instance: Types.CrossOriginFocusedElementState,\n        val: CrossOriginElement | undefined,\n        details: Types.FocusedElementDetails\n    ): void {\n        (instance as CrossOriginFocusedElementState).setVal(val, details);\n    }\n}\n\nexport class CrossOriginObservedElementState\n    extends Subscribable<CrossOriginElement, Types.ObservedElementProps>\n    implements Types.CrossOriginObservedElementState\n{\n    private _tabster: Types.TabsterCore;\n    private _transactions: CrossOriginTransactions;\n    private _lastRequestFocusId = 0;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        transactions: CrossOriginTransactions\n    ) {\n        super();\n        this._tabster = tabster;\n        this._transactions = transactions;\n    }\n\n    async getElement(\n        observedName: string,\n        accessibility?: Types.ObservedElementAccesibility\n    ): Promise<CrossOriginElement | null> {\n        return this.waitElement(observedName, 0, accessibility);\n    }\n\n    async waitElement(\n        observedName: string,\n        timeout: number,\n        accessibility?: Types.ObservedElementAccesibility\n    ): Promise<CrossOriginElement | null> {\n        return this._transactions\n            .beginTransaction(\n                GetElementTransaction,\n                {\n                    observedName,\n                    accessibility,\n                },\n                timeout\n            )\n            .then((value) =>\n                value\n                    ? StateTransaction.createElement(this._tabster, value)\n                    : null\n            );\n    }\n\n    async requestFocus(\n        observedName: string,\n        timeout: number\n    ): Promise<boolean> {\n        const requestId = ++this._lastRequestFocusId;\n        return this.waitElement(\n            observedName,\n            timeout,\n            Types.ObservedElementAccesibilities.Focusable\n        ).then((element) =>\n            this._lastRequestFocusId === requestId && element\n                ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  this._tabster.crossOrigin!.focusedElement.focus(element, true)\n                : false\n        );\n    }\n\n    static trigger(\n        instance: Types.CrossOriginObservedElementState,\n        element: CrossOriginElement,\n        details: Types.ObservedElementProps\n    ): void {\n        (instance as CrossOriginObservedElementState).trigger(element, details);\n    }\n}\n\nexport class CrossOriginAPI implements Types.CrossOriginAPI {\n    private _tabster: Types.TabsterCore;\n    private _initTimer: number | undefined;\n    private _win: Types.GetWindow;\n    private _transactions: CrossOriginTransactions;\n    private _blurTimer: number | undefined;\n    private _ctx: CrossOriginInstanceContext;\n\n    focusedElement: Types.CrossOriginFocusedElementState;\n    observedElement: Types.CrossOriginObservedElementState;\n\n    constructor(tabster: Types.TabsterCore) {\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._ctx = {\n            ignoreKeyboardNavigationStateUpdate: false,\n            deloserByUId: {},\n        };\n\n        this._transactions = new CrossOriginTransactions(\n            tabster,\n            this._win,\n            this._ctx\n        );\n        this.focusedElement = new CrossOriginFocusedElementState(\n            this._transactions\n        );\n        this.observedElement = new CrossOriginObservedElementState(\n            tabster,\n            this._transactions\n        );\n    }\n\n    setup(\n        sendUp?: Types.CrossOriginTransactionSend | null\n    ): (msg: Types.CrossOriginMessage) => void {\n        if (this.isSetUp()) {\n            return this._transactions.setSendUp(sendUp);\n        } else {\n            this._initTimer = this._win().setTimeout(this._init, 0);\n            return this._transactions.setup(sendUp);\n        }\n    }\n\n    isSetUp(): boolean {\n        return this._transactions.isSetUp;\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        const tabster = this._tabster;\n\n        tabster.keyboardNavigation.subscribe(\n            this._onKeyboardNavigationStateChanged\n        );\n        tabster.focusedElement.subscribe(this._onFocus);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        tabster.observedElement!.subscribe(this._onObserved);\n\n        if (!this._ctx.origOutlineSetup) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this._ctx.origOutlineSetup = tabster.outline!.setup;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            tabster.outline!.setup = this._outlineSetup;\n        }\n\n        this._transactions\n            .beginTransaction(\n                BootstrapTransaction,\n                undefined,\n                undefined,\n                undefined,\n                _targetIdUp\n            )\n            .then((data) => {\n                if (\n                    data &&\n                    this._tabster.keyboardNavigation.isNavigatingWithKeyboard() !==\n                        data.isNavigatingWithKeyboard\n                ) {\n                    this._ctx.ignoreKeyboardNavigationStateUpdate = true;\n                    KeyboardNavigationState.setVal(\n                        this._tabster.keyboardNavigation,\n                        data.isNavigatingWithKeyboard\n                    );\n                    this._ctx.ignoreKeyboardNavigationStateUpdate = false;\n                }\n            });\n    };\n\n    dispose(): void {\n        if (this._initTimer) {\n            this._win().clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        const tabster = this._tabster;\n\n        tabster.keyboardNavigation.unsubscribe(\n            this._onKeyboardNavigationStateChanged\n        );\n        tabster.focusedElement.unsubscribe(this._onFocus);\n        tabster.observedElement?.unsubscribe(this._onObserved);\n\n        this._transactions.dispose();\n        this.focusedElement.dispose();\n        this.observedElement.dispose();\n\n        this._ctx.deloserByUId = {};\n    }\n\n    private _onKeyboardNavigationStateChanged = (value: boolean): void => {\n        if (!this._ctx.ignoreKeyboardNavigationStateUpdate) {\n            this._transactions.beginTransaction(StateTransaction, {\n                state: CrossOriginStates.KeyboardNavigation,\n                ownerUId: getWindowUId(this._win()),\n                isNavigatingWithKeyboard: value,\n            });\n        }\n    };\n\n    private _onFocus = (element: HTMLElementWithUID | undefined): void => {\n        const win = this._win();\n\n        const ownerUId = getWindowUId(win);\n\n        if (this._blurTimer) {\n            win.clearTimeout(this._blurTimer);\n            this._blurTimer = undefined;\n        }\n\n        if (element) {\n            this._transactions.beginTransaction(StateTransaction, {\n                ...GetElementTransaction.getElementData(\n                    this._tabster,\n                    element,\n                    this._win,\n                    this._ctx,\n                    ownerUId\n                ),\n                state: CrossOriginStates.Focused,\n            });\n        } else {\n            this._blurTimer = win.setTimeout(() => {\n                this._blurTimer = undefined;\n\n                if (this._ctx.focusOwner && this._ctx.focusOwner === ownerUId) {\n                    this._transactions\n                        .beginTransaction(GetElementTransaction, undefined)\n                        .then((value) => {\n                            if (!value && this._ctx.focusOwner === ownerUId) {\n                                this._transactions.beginTransaction(\n                                    StateTransaction,\n                                    {\n                                        ownerUId,\n                                        state: CrossOriginStates.Blurred,\n                                        force: false,\n                                    }\n                                );\n                            }\n                        });\n                }\n            }, 0);\n        }\n    };\n\n    private _onObserved = (\n        element: HTMLElement,\n        details: Types.ObservedElementProps\n    ): void => {\n        const d = GetElementTransaction.getElementData(\n            this._tabster,\n            element,\n            this._win,\n            this._ctx,\n            getWindowUId(this._win())\n        ) as CrossOriginStateData;\n\n        d.state = CrossOriginStates.Observed;\n        d.observedName = details.names?.[0];\n        d.observedDetails = details.details;\n\n        this._transactions.beginTransaction(StateTransaction, d);\n    };\n\n    private _outlineSetup = (props?: Partial<Types.OutlineProps>): void => {\n        this._transactions.beginTransaction(StateTransaction, {\n            state: CrossOriginStates.Outline,\n            ownerUId: getWindowUId(this._win()),\n            outline: props,\n        });\n    };\n}\n\nfunction getDeloserUID(\n    getWindow: Types.GetWindow,\n    context: CrossOriginInstanceContext,\n    deloser: Types.Deloser\n): string | undefined {\n    const deloserElement = deloser.getElement();\n\n    if (deloserElement) {\n        const uid = getElementUId(getWindow, deloserElement);\n\n        if (!context.deloserByUId[uid]) {\n            context.deloserByUId[uid] = deloser;\n        }\n\n        return uid;\n    }\n\n    return undefined;\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getTabsterOnElement } from \"./Instance\";\nimport { RootAPI } from \"./Root\";\nimport * as Types from \"./Types\";\nimport {\n    createElementTreeWalker,\n    getLastChild,\n    matchesSelector,\n    shouldIgnoreFocus,\n    HTMLElementWithDummyContainer,\n} from \"./Utils\";\n\nconst _focusableSelector = [\n    \"a[href]\",\n    \"button:not([disabled])\",\n    \"input:not([disabled])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"*[tabindex]\",\n    \"*[contenteditable]\",\n].join(\", \");\n\nexport class FocusableAPI implements Types.FocusableAPI {\n    private _tabster: Types.TabsterCore;\n    private _win: Types.GetWindow;\n\n    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow) {\n        this._tabster = tabster;\n        this._win = getWindow;\n    }\n\n    dispose(): void {\n        /**/\n    }\n\n    private _getBody(): HTMLElement | undefined {\n        const last = this._tabster.focusedElement.getLastFocusedElement();\n\n        if (last && last.ownerDocument) {\n            return last.ownerDocument.body;\n        }\n\n        return this._win().document.body;\n    }\n\n    getProps(element: HTMLElement): Types.FocusableProps {\n        const tabsterOnElement = getTabsterOnElement(this._tabster, element);\n        return (tabsterOnElement && tabsterOnElement.focusable) || {};\n    }\n\n    isFocusable(\n        el: HTMLElement,\n        includeProgrammaticallyFocusable?: boolean,\n        noVisibleCheck?: boolean,\n        noAccessibleCheck?: boolean\n    ): boolean {\n        if (\n            matchesSelector(el, _focusableSelector) &&\n            (includeProgrammaticallyFocusable || el.tabIndex !== -1)\n        ) {\n            return (\n                (noVisibleCheck || this.isVisible(el)) &&\n                (noAccessibleCheck || this.isAccessible(el))\n            );\n        }\n\n        return false;\n    }\n\n    isVisible(el: HTMLElement): boolean {\n        if (!el.ownerDocument) {\n            return false;\n        }\n\n        if (el.offsetParent === null && el.ownerDocument.body !== el) {\n            return false;\n        }\n\n        const win = el.ownerDocument.defaultView;\n\n        if (!win) {\n            return false;\n        }\n\n        const rect = el.ownerDocument.body.getBoundingClientRect();\n\n        if (rect.width === 0 && rect.height === 0) {\n            // This might happen, for example, if our <body> is in hidden <iframe>.\n            return false;\n        }\n\n        const computedStyle = win.getComputedStyle(el);\n\n        if (computedStyle.visibility === \"hidden\") {\n            return false;\n        }\n\n        return true;\n    }\n\n    isAccessible(el: HTMLElement): boolean {\n        for (let e: HTMLElement | null = el; e; e = e.parentElement) {\n            const tabsterOnElement = getTabsterOnElement(this._tabster, e);\n\n            if (this._isHidden(e)) {\n                return false;\n            }\n\n            const ignoreDisabled =\n                tabsterOnElement?.focusable?.ignoreAriaDisabled;\n\n            if (!ignoreDisabled && this._isDisabled(e)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private _isDisabled(el: HTMLElement): boolean {\n        return el.hasAttribute(\"disabled\");\n    }\n\n    private _isHidden(el: HTMLElement): boolean {\n        const attrVal = el.getAttribute(\"aria-hidden\");\n\n        if (attrVal && attrVal.toLowerCase() === \"true\") {\n            return true;\n        }\n\n        return false;\n    }\n\n    findFirst(options: Types.FindFirstProps): HTMLElement | null | undefined {\n        return this.findElement({\n            container: this._getBody(),\n            ...options,\n        });\n    }\n\n    findLast(options: Types.FindFirstProps): HTMLElement | null | undefined {\n        return this.findElement({\n            container: this._getBody(),\n            isBackward: true,\n            ...options,\n        });\n    }\n\n    findNext(options: Types.FindNextProps): HTMLElement | null | undefined {\n        return this.findElement({\n            container: this._getBody(),\n            ...options,\n        });\n    }\n\n    findPrev(options: Types.FindNextProps): HTMLElement | null | undefined {\n        return this.findElement({\n            container: this._getBody(),\n            isBackward: true,\n            ...options,\n        });\n    }\n\n    findDefault(options: Types.FindDefaultProps): HTMLElement | null {\n        return (\n            this.findElement({\n                ...options,\n                acceptCondition: (el) =>\n                    this._tabster.focusable.isFocusable(\n                        el,\n                        options.includeProgrammaticallyFocusable\n                    ) && !!this.getProps(el).isDefault,\n            }) || null\n        );\n    }\n\n    findAll(options: Types.FindAllProps): HTMLElement[] {\n        return this._findElements(true, options) || [];\n    }\n\n    findElement(\n        options: Types.FindFocusableProps\n    ): HTMLElement | null | undefined {\n        const found = this._findElements(false, options);\n        return found ? found[0] : found;\n    }\n\n    private _findElements(\n        findAll: boolean,\n        options: Types.FindFocusableProps\n    ): HTMLElement[] | null | undefined {\n        const {\n            container,\n            currentElement = null,\n            includeProgrammaticallyFocusable,\n            ignoreUncontrolled,\n            ignoreAccessibiliy,\n            isBackward,\n            onUncontrolled,\n            onElement,\n        } = options;\n\n        const elements: HTMLElement[] = [];\n\n        let { acceptCondition } = options;\n\n        if (!container) {\n            return null;\n        }\n\n        if (!acceptCondition) {\n            acceptCondition = (el) =>\n                this._tabster.focusable.isFocusable(\n                    el,\n                    includeProgrammaticallyFocusable,\n                    ignoreAccessibiliy,\n                    ignoreAccessibiliy\n                );\n        }\n\n        const acceptElementState: Types.FocusableAcceptElementState = {\n            container,\n            from: currentElement || container,\n            isBackward,\n            acceptCondition,\n            includeProgrammaticallyFocusable,\n            ignoreUncontrolled,\n            ignoreAccessibiliy,\n            cachedGrouppers: {},\n        };\n\n        const walker = createElementTreeWalker(\n            container.ownerDocument,\n            container,\n            (node) =>\n                this._acceptElement(node as HTMLElement, acceptElementState)\n        );\n\n        if (!walker) {\n            return null;\n        }\n\n        const prepareForNextElement = (\n            shouldContinueIfNotFound?: boolean\n        ): boolean => {\n            const foundElement = acceptElementState.foundElement;\n\n            if (foundElement) {\n                elements.push(foundElement);\n            }\n\n            if (findAll) {\n                if (foundElement) {\n                    acceptElementState.found = false;\n                    delete acceptElementState.foundElement;\n                    delete acceptElementState.fromCtx;\n                    acceptElementState.from = foundElement;\n\n                    if (onElement && !onElement(foundElement)) {\n                        return false;\n                    }\n                }\n\n                return !!(foundElement || shouldContinueIfNotFound);\n            } else {\n                return !!(shouldContinueIfNotFound && !foundElement);\n            }\n        };\n\n        if (currentElement) {\n            walker.currentNode = currentElement;\n        } else if (isBackward) {\n            const lastChild = getLastChild(container);\n\n            if (!lastChild) {\n                return null;\n            }\n\n            if (\n                this._acceptElement(lastChild, acceptElementState) ===\n                    NodeFilter.FILTER_ACCEPT &&\n                !prepareForNextElement(true)\n            ) {\n                return elements;\n            }\n\n            walker.currentNode = lastChild;\n        }\n\n        let foundElement: HTMLElement | null | undefined;\n        do {\n            foundElement =\n                ((isBackward\n                    ? walker.previousNode()\n                    : walker.nextNode()) as HTMLElement | null) || undefined;\n        } while (prepareForNextElement());\n\n        if (!findAll) {\n            const nextUncontrolled = acceptElementState.nextUncontrolled;\n\n            if (nextUncontrolled) {\n                if (onUncontrolled) {\n                    onUncontrolled(nextUncontrolled);\n                }\n\n                if (foundElement) {\n                    // We have an uncontrolled area and there is a controlled element after it.\n                    // Return undefined for the default Tab action.\n                    return undefined;\n                } else {\n                    // Otherwise, return null to moveOutWithDefaultAction().\n                    return null;\n                }\n            }\n        }\n\n        return elements.length ? elements : null;\n    }\n\n    private _acceptElement(\n        element: HTMLElement,\n        state: Types.FocusableAcceptElementState\n    ): number {\n        if (state.found) {\n            return NodeFilter.FILTER_ACCEPT;\n        }\n\n        const container = state.container;\n\n        if (element === container) {\n            return NodeFilter.FILTER_SKIP;\n        }\n\n        if (!container.contains(element)) {\n            return NodeFilter.FILTER_REJECT;\n        }\n\n        if (\n            (element as HTMLElementWithDummyContainer).__tabsterDummyContainer\n        ) {\n            return NodeFilter.FILTER_REJECT;\n        }\n\n        let lastToIgnore = state.lastToIgnore;\n\n        if (lastToIgnore) {\n            if (lastToIgnore.contains(element)) {\n                return NodeFilter.FILTER_REJECT;\n            } else {\n                lastToIgnore = state.lastToIgnore = undefined;\n            }\n        }\n\n        const ctx = (state.currentCtx = RootAPI.getTabsterContext(\n            this._tabster,\n            element\n        ));\n\n        // Tabster is opt in, if it is not managed, don't try and get do anything special\n        if (!ctx) {\n            return NodeFilter.FILTER_SKIP;\n        }\n\n        if (state.ignoreUncontrolled) {\n            if (shouldIgnoreFocus(element)) {\n                return NodeFilter.FILTER_SKIP;\n            }\n        } else if (\n            ctx.uncontrolled &&\n            !state.nextUncontrolled &&\n            this._tabster.focusable.isFocusable(element, undefined, true, true)\n        ) {\n            if (!ctx.groupper && !ctx.mover) {\n                state.nextUncontrolled = ctx.uncontrolled;\n                return NodeFilter.FILTER_REJECT;\n            }\n        }\n\n        // We assume iframes are focusable because native tab behaviour would tab inside\n        if (element.tagName === \"IFRAME\" || element.tagName === \"WEBVIEW\") {\n            state.found = true;\n            state.lastToIgnore = state.foundElement = element;\n            return NodeFilter.FILTER_ACCEPT;\n        }\n\n        if (!state.ignoreAccessibiliy && !this.isAccessible(element)) {\n            return NodeFilter.FILTER_REJECT;\n        }\n\n        let result: number | undefined;\n\n        let fromCtx = state.fromCtx;\n\n        if (!fromCtx) {\n            fromCtx = state.fromCtx = RootAPI.getTabsterContext(\n                this._tabster,\n                state.from\n            );\n        }\n\n        const fromMover = fromCtx?.mover;\n        let groupper = ctx.groupper;\n        let mover = ctx.mover;\n\n        if (groupper || mover || fromMover) {\n            const groupperElement = groupper?.getElement();\n            const fromMoverElement = fromMover?.getElement();\n            let moverElement = mover?.getElement();\n\n            if (\n                moverElement &&\n                fromMoverElement &&\n                container.contains(fromMoverElement) &&\n                (!groupperElement ||\n                    !mover ||\n                    fromMoverElement.contains(groupperElement))\n            ) {\n                mover = fromMover;\n                moverElement = fromMoverElement;\n            }\n\n            if (\n                groupperElement &&\n                (groupperElement === container ||\n                    !container.contains(groupperElement))\n            ) {\n                groupper = undefined;\n            }\n\n            if (moverElement && !container.contains(moverElement)) {\n                mover = undefined;\n            }\n\n            if (groupper && mover) {\n                if (\n                    moverElement &&\n                    groupperElement &&\n                    !groupperElement.contains(moverElement)\n                ) {\n                    mover = undefined;\n                } else {\n                    groupper = undefined;\n                }\n            }\n\n            if (groupper) {\n                result = groupper.acceptElement(element, state);\n            }\n\n            if (mover) {\n                result = mover.acceptElement(element, state);\n            }\n        }\n\n        if (result === undefined) {\n            result = state.acceptCondition(element)\n                ? NodeFilter.FILTER_ACCEPT\n                : NodeFilter.FILTER_SKIP;\n        }\n\n        if (result === NodeFilter.FILTER_ACCEPT && !state.found) {\n            state.found = true;\n            state.foundElement = element;\n        }\n\n        return result;\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport const Keys: {\n    Tab: 9;\n    Enter: 13;\n    Esc: 27;\n    Space: 32;\n    PageUp: 33;\n    PageDown: 34;\n    End: 35;\n    Home: 36;\n    Left: 37;\n    Up: 38;\n    Right: 39;\n    Down: 40;\n} = {\n    Tab: 9,\n    Enter: 13,\n    Esc: 27,\n    Space: 32,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36,\n    Left: 37,\n    Up: 38,\n    Right: 39,\n    Down: 40,\n};\n\nexport type Key = typeof Keys[keyof typeof Keys];\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { KeyborgFocusInEvent, KEYBORG_FOCUSIN, nativeFocus } from \"keyborg\";\n\nimport { Keys } from \"../Keys\";\nimport { RootAPI } from \"../Root\";\nimport * as Types from \"../Types\";\nimport {\n    documentContains,\n    DummyInputManager,\n    getLastChild,\n    getAdjacentElement,\n    shouldIgnoreFocus,\n    WeakHTMLElement,\n} from \"../Utils\";\nimport { Subscribable } from \"./Subscribable\";\n\nexport class FocusedElementState\n    extends Subscribable<HTMLElement | undefined, Types.FocusedElementDetails>\n    implements Types.FocusedElementState\n{\n    private static _lastResetElement: WeakHTMLElement | undefined;\n    private static _isTabbingTimer: number | undefined;\n    static isTabbing = false;\n\n    private _tabster: Types.TabsterCore;\n    private _initTimer: number | undefined;\n    private _win: Types.GetWindow;\n    private _nextVal:\n        | {\n              element: WeakHTMLElement | undefined;\n              details: Types.FocusedElementDetails;\n          }\n        | undefined;\n    private _lastVal: WeakHTMLElement | undefined;\n\n    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow) {\n        super();\n\n        this._tabster = tabster;\n        this._win = getWindow;\n        this._initTimer = getWindow().setTimeout(this._init, 0);\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        const win = this._win();\n\n        // Add these event listeners as capture - we want Tabster to run before user event handlers\n        win.document.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);\n        win.document.addEventListener(\"focusout\", this._onFocusOut, true);\n        win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n\n    dispose(): void {\n        super.dispose();\n\n        const win = this._win();\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        win.document.removeEventListener(\n            KEYBORG_FOCUSIN,\n            this._onFocusIn,\n            true\n        );\n        win.document.removeEventListener(\"focusout\", this._onFocusOut, true);\n        win.removeEventListener(\"keydown\", this._onKeyDown, true);\n\n        delete FocusedElementState._lastResetElement;\n\n        delete this._nextVal;\n        delete this._lastVal;\n    }\n\n    static forgetMemorized(\n        instance: Types.FocusedElementState,\n        parent: HTMLElement\n    ): void {\n        let wel = FocusedElementState._lastResetElement;\n        let el = wel && wel.get();\n        if (el && parent.contains(el)) {\n            delete FocusedElementState._lastResetElement;\n        }\n\n        el = (instance as FocusedElementState)._nextVal?.element?.get();\n        if (el && parent.contains(el)) {\n            delete (instance as FocusedElementState)._nextVal;\n        }\n\n        wel = (instance as FocusedElementState)._lastVal;\n        el = wel && wel.get();\n        if (el && parent.contains(el)) {\n            delete (instance as FocusedElementState)._lastVal;\n        }\n    }\n\n    getFocusedElement(): HTMLElement | undefined {\n        return this.getVal();\n    }\n\n    getLastFocusedElement(): HTMLElement | undefined {\n        let el = this._lastVal?.get();\n\n        if (!el || (el && !documentContains(el.ownerDocument, el))) {\n            this._lastVal = el = undefined;\n        }\n\n        return el;\n    }\n\n    focus(\n        element: HTMLElement,\n        noFocusedProgrammaticallyFlag?: boolean,\n        noAccessibleCheck?: boolean\n    ): boolean {\n        if (\n            !this._tabster.focusable.isFocusable(\n                element,\n                noFocusedProgrammaticallyFlag,\n                false,\n                noAccessibleCheck\n            )\n        ) {\n            return false;\n        }\n\n        element.focus();\n\n        return true;\n    }\n\n    focusDefault(container: HTMLElement): boolean {\n        const el = this._tabster.focusable.findDefault({ container });\n\n        if (el) {\n            this._tabster.focusedElement.focus(el);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    private _focusFirstOrLast(\n        isFirst: boolean,\n        props: Types.FindFirstProps\n    ): boolean {\n        const tabsterFocusable = this._tabster.focusable;\n        const container = props.container;\n        let uncontrolled: HTMLElement | undefined;\n        let toFocus: HTMLElement | null | undefined;\n\n        if (container) {\n            const ctx = RootAPI.getTabsterContext(this._tabster, container);\n\n            if (ctx) {\n                let next = FocusedElementState.findNextTabbable(\n                    this._tabster,\n                    ctx,\n                    container,\n                    undefined,\n                    !isFirst\n                );\n\n                if (next) {\n                    toFocus = next.element;\n                    uncontrolled = next.uncontrolled;\n\n                    while (!toFocus && uncontrolled) {\n                        if (\n                            tabsterFocusable.isFocusable(\n                                uncontrolled,\n                                false,\n                                true,\n                                true\n                            )\n                        ) {\n                            toFocus = uncontrolled;\n                        } else {\n                            toFocus = tabsterFocusable[\n                                isFirst ? \"findFirst\" : \"findLast\"\n                            ]({\n                                container: uncontrolled,\n                                ignoreUncontrolled: true,\n                                ignoreAccessibiliy: true,\n                            });\n                        }\n\n                        if (!toFocus) {\n                            next = FocusedElementState.findNextTabbable(\n                                this._tabster,\n                                ctx,\n                                uncontrolled,\n                                undefined,\n                                !isFirst\n                            );\n\n                            if (next) {\n                                toFocus = next.element;\n                                uncontrolled = next.uncontrolled;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (toFocus && !container?.contains(toFocus)) {\n            toFocus = undefined;\n        }\n\n        if (toFocus) {\n            this.focus(toFocus, false, true);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    focusFirst(props: Types.FindFirstProps): boolean {\n        return this._focusFirstOrLast(true, props);\n    }\n\n    focusLast(props: Types.FindFirstProps): boolean {\n        return this._focusFirstOrLast(false, props);\n    }\n\n    resetFocus(container: HTMLElement): boolean {\n        if (!this._tabster.focusable.isVisible(container)) {\n            return false;\n        }\n\n        if (!this._tabster.focusable.isFocusable(container, true, true, true)) {\n            const prevTabIndex = container.getAttribute(\"tabindex\");\n            const prevAriaHidden = container.getAttribute(\"aria-hidden\");\n\n            container.tabIndex = -1;\n            container.setAttribute(\"aria-hidden\", \"true\");\n\n            FocusedElementState._lastResetElement = new WeakHTMLElement(\n                this._win,\n                container\n            );\n\n            this.focus(container, true, true);\n\n            this._setOrRemoveAttribute(container, \"tabindex\", prevTabIndex);\n            this._setOrRemoveAttribute(\n                container,\n                \"aria-hidden\",\n                prevAriaHidden\n            );\n        } else {\n            this.focus(container);\n        }\n\n        return true;\n    }\n\n    private _setOrRemoveAttribute(\n        element: HTMLElement,\n        name: string,\n        value: string | null\n    ): void {\n        if (value === null) {\n            element.removeAttribute(name);\n        } else {\n            element.setAttribute(name, value);\n        }\n    }\n\n    private _setFocusedElement(\n        element?: HTMLElement,\n        relatedTarget?: HTMLElement,\n        isFocusedProgrammatically?: boolean\n    ): void {\n        if (this._tabster._noop) {\n            return;\n        }\n\n        const details: Types.FocusedElementDetails = { relatedTarget };\n\n        if (element) {\n            const lastResetElement =\n                FocusedElementState._lastResetElement?.get();\n            FocusedElementState._lastResetElement = undefined;\n\n            if (lastResetElement === element || shouldIgnoreFocus(element)) {\n                return;\n            }\n\n            details.isFocusedProgrammatically = isFocusedProgrammatically;\n        }\n\n        const nextVal = (this._nextVal = {\n            element: element\n                ? new WeakHTMLElement(this._win, element)\n                : undefined,\n            details,\n        });\n\n        if (element && element !== this._val) {\n            this._validateFocusedElement(element);\n        }\n\n        // _validateFocusedElement() might cause the refocus which will trigger\n        // another call to this function. Making sure that the value is correct.\n        if (this._nextVal === nextVal) {\n            this.setVal(element, details);\n        }\n\n        this._nextVal = undefined;\n    }\n\n    protected setVal(\n        val: HTMLElement | undefined,\n        details: Types.FocusedElementDetails\n    ): void {\n        super.setVal(val, details);\n\n        if (val) {\n            this._lastVal = new WeakHTMLElement(this._win, val);\n        }\n    }\n\n    private _onFocusIn = (e: KeyborgFocusInEvent): void => {\n        this._setFocusedElement(\n            e.target as HTMLElement,\n            e.details.relatedTarget as HTMLElement | undefined,\n            e.details.isFocusedProgrammatically\n        );\n    };\n\n    private _onFocusOut = (e: FocusEvent): void => {\n        this._setFocusedElement(\n            undefined,\n            e.relatedTarget as HTMLElement | undefined\n        );\n    };\n\n    static findNextTabbable(\n        tabster: Types.TabsterCore,\n        ctx: Types.TabsterContext,\n        container?: HTMLElement,\n        currentElement?: HTMLElement,\n        isBackward?: boolean\n    ): Types.NextTabbable | null {\n        const actualContainer = container || ctx.root.getElement();\n\n        if (!actualContainer) {\n            return null;\n        }\n\n        let next: Types.NextTabbable | null = null;\n\n        const isTabbingTimer = FocusedElementState._isTabbingTimer;\n        const win = tabster.getWindow();\n\n        if (isTabbingTimer) {\n            win.clearTimeout(isTabbingTimer);\n        }\n\n        FocusedElementState.isTabbing = true;\n        FocusedElementState._isTabbingTimer = win.setTimeout(() => {\n            delete FocusedElementState._isTabbingTimer;\n            FocusedElementState.isTabbing = false;\n        }, 0);\n\n        const callFindNext = (what: Types.Groupper | Types.Mover) => {\n            next = what.findNextTabbable(currentElement, isBackward);\n        };\n\n        if (ctx.groupper && ctx.mover) {\n            let isGroupperFirst = ctx.isGroupperFirst;\n\n            if (isGroupperFirst && currentElement) {\n                const fromCtx = RootAPI.getTabsterContext(\n                    tabster,\n                    currentElement\n                );\n\n                if (fromCtx?.groupper !== ctx.groupper) {\n                    isGroupperFirst = false;\n                }\n            }\n\n            callFindNext(isGroupperFirst ? ctx.groupper : ctx.mover);\n        } else if (ctx.groupper) {\n            callFindNext(ctx.groupper);\n        } else if (ctx.mover) {\n            callFindNext(ctx.mover);\n        } else {\n            let uncontrolled: HTMLElement | undefined;\n            const onUncontrolled = (el: HTMLElement) => {\n                uncontrolled = el;\n            };\n            const nextElement = isBackward\n                ? tabster.focusable.findPrev({\n                      container: actualContainer,\n                      currentElement,\n                      onUncontrolled,\n                  })\n                : tabster.focusable.findNext({\n                      container: actualContainer,\n                      currentElement,\n                      onUncontrolled,\n                  });\n\n            next = {\n                element: uncontrolled ? undefined : nextElement,\n                uncontrolled,\n            };\n        }\n\n        const lastMoverOrGroupperElement =\n            next?.lastMoverOrGroupper?.getElement();\n\n        if (lastMoverOrGroupperElement) {\n            next = null;\n\n            const adjacentElement = getAdjacentElement(\n                lastMoverOrGroupperElement,\n                isBackward\n            );\n\n            if (adjacentElement) {\n                const adjacentCtx = RootAPI.getTabsterContext(\n                    tabster,\n                    adjacentElement,\n                    {\n                        checkRtl: true,\n                    }\n                );\n\n                if (adjacentCtx) {\n                    let adjacentFrom = getAdjacentElement(\n                        adjacentElement,\n                        !isBackward\n                    );\n\n                    if (adjacentFrom) {\n                        if (!isBackward) {\n                            adjacentFrom = getLastChild(adjacentFrom);\n                        }\n\n                        next = FocusedElementState.findNextTabbable(\n                            tabster,\n                            adjacentCtx,\n                            actualContainer,\n                            adjacentFrom,\n                            isBackward\n                        );\n                    }\n                }\n            }\n        }\n\n        return next;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private _validateFocusedElement = (element: HTMLElement): void => {\n        // TODO: Make sure this is not needed anymore and write tests.\n    };\n\n    private _onKeyDown = (e: KeyboardEvent): void => {\n        if (e.keyCode !== Keys.Tab || e.ctrlKey) {\n            return;\n        }\n\n        const currentElement = this.getVal();\n\n        if (\n            !currentElement ||\n            !currentElement.ownerDocument ||\n            currentElement.contentEditable === \"true\"\n        ) {\n            return;\n        }\n\n        const tabster = this._tabster;\n        const controlTab = tabster.controlTab;\n        const ctx = RootAPI.getTabsterContext(tabster, currentElement);\n\n        if (\n            !ctx ||\n            (!controlTab && !ctx.groupper && !ctx.mover) ||\n            ctx.ignoreKeydown[e.key as \"Tab\"]\n        ) {\n            return;\n        }\n\n        const isBackward = e.shiftKey;\n\n        const next = FocusedElementState.findNextTabbable(\n            tabster,\n            ctx,\n            undefined,\n            currentElement,\n            isBackward\n        );\n\n        if (!next || (!controlTab && !next.element)) {\n            if (!controlTab) {\n                const lastMoverOrGroupper = next?.lastMoverOrGroupper;\n\n                if (lastMoverOrGroupper) {\n                    lastMoverOrGroupper.dummyManager?.moveOutWithDefaultAction(\n                        isBackward\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        let nextElement: HTMLElement | null | undefined;\n\n        if (next) {\n            let uncontrolled = next.uncontrolled;\n\n            if (uncontrolled) {\n                const isGroupperFirst = ctx.isGroupperFirst;\n                let moveOutside = false;\n\n                if (isGroupperFirst !== undefined) {\n                    const groupper = ctx.groupper?.getElement();\n                    const mover = ctx.mover?.getElement();\n                    let moveFrom: HTMLElement | undefined;\n\n                    if (\n                        isGroupperFirst &&\n                        groupper &&\n                        uncontrolled.contains(groupper)\n                    ) {\n                        moveFrom = groupper;\n                    } else if (\n                        !isGroupperFirst &&\n                        mover &&\n                        uncontrolled.contains(mover)\n                    ) {\n                        moveFrom = mover;\n                    }\n\n                    if (moveFrom) {\n                        uncontrolled = moveFrom;\n                        moveOutside = true;\n                    }\n                }\n\n                if (uncontrolled && ctx.uncontrolled !== uncontrolled) {\n                    // We have met an uncontrolled area, just allow default action.\n                    DummyInputManager.moveWithPhantomDummy(\n                        this._tabster,\n                        uncontrolled,\n                        moveOutside,\n                        isBackward\n                    );\n                }\n\n                return;\n            }\n\n            nextElement = next.element;\n\n            if (ctx.modalizer) {\n                const nextElementCtx =\n                    nextElement &&\n                    RootAPI.getTabsterContext(tabster, nextElement);\n\n                if (\n                    !nextElementCtx ||\n                    ctx.root.uid !== nextElementCtx.root.uid ||\n                    !nextElementCtx.modalizer?.isActive()\n                ) {\n                    if (ctx.modalizer.onBeforeFocusOut()) {\n                        e.preventDefault();\n\n                        return;\n                    }\n                }\n\n                // circular focus trap for modalizer\n                if (\n                    !nextElement &&\n                    ctx.modalizer.isActive() &&\n                    ctx.modalizer.getProps().isTrapped\n                ) {\n                    const findFn = isBackward ? \"findLast\" : \"findFirst\";\n                    nextElement = tabster.focusable[findFn]({\n                        container: ctx.modalizer.getElement(),\n                    });\n                }\n            }\n        }\n\n        if (nextElement) {\n            // For iframes just allow normal Tab behaviour\n            if (nextElement.tagName !== \"IFRAME\") {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n\n                nativeFocus(nextElement);\n            }\n        } else {\n            ctx.root.moveOutWithDefaultAction(isBackward);\n        }\n    };\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { nativeFocus } from \"keyborg\";\n\nimport { getTabsterOnElement } from \"./Instance\";\nimport { Keys } from \"./Keys\";\nimport { RootAPI } from \"./Root\";\nimport * as Types from \"./Types\";\nimport { FocusedElementState } from \"./State/FocusedElement\";\nimport {\n    DummyInput,\n    DummyInputManager,\n    DummyInputManagerPriorities,\n    TabsterPart,\n    WeakHTMLElement,\n    getAdjacentElement,\n} from \"./Utils\";\n\nclass GroupperDummyManager extends DummyInputManager {\n    constructor(\n        element: WeakHTMLElement,\n        groupper: Groupper,\n        tabster: Types.TabsterCore\n    ) {\n        super(tabster, element, DummyInputManagerPriorities.Groupper, true);\n\n        this._setHandlers(\n            (\n                dummyInput: DummyInput,\n                isBackward: boolean,\n                relatedTarget: HTMLElement | null\n            ) => {\n                const container = element.get();\n\n                if (container && !dummyInput.shouldMoveOut) {\n                    const input = dummyInput.input;\n\n                    if (input) {\n                        const ctx = RootAPI.getTabsterContext(tabster, input);\n\n                        if (ctx) {\n                            let next: HTMLElement | null | undefined;\n\n                            if (\n                                relatedTarget &&\n                                relatedTarget.contentEditable === \"true\" &&\n                                groupper.getProps().tabbability ===\n                                    Types.GroupperTabbabilities\n                                        .LimitedTrapFocus &&\n                                container.contains(relatedTarget)\n                            ) {\n                                next = groupper.findNextTabbable(\n                                    relatedTarget,\n                                    isBackward\n                                )?.element;\n                            }\n\n                            if (!next) {\n                                next = FocusedElementState.findNextTabbable(\n                                    tabster,\n                                    ctx,\n                                    undefined,\n                                    dummyInput.isOutside\n                                        ? input\n                                        : getAdjacentElement(\n                                              container,\n                                              !isBackward\n                                          ),\n                                    isBackward\n                                )?.element;\n                            }\n\n                            if (next) {\n                                tabster.focusedElement.focus(next);\n                            }\n                        }\n                    }\n                }\n            }\n        );\n    }\n}\n\nexport class Groupper\n    extends TabsterPart<Types.GroupperProps>\n    implements Types.Groupper\n{\n    private _shouldTabInside = false;\n    private _first: WeakHTMLElement | undefined;\n    private _onDispose: (groupper: Groupper) => void;\n\n    dummyManager: GroupperDummyManager | undefined;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        onDispose: (groupper: Groupper) => void,\n        props: Types.GroupperProps\n    ) {\n        super(tabster, element, props);\n        this.makeTabbable(false);\n\n        this._onDispose = onDispose;\n\n        if (!tabster.controlTab) {\n            this.dummyManager = new GroupperDummyManager(\n                this._element,\n                this,\n                tabster\n            );\n        }\n    }\n\n    dispose(): void {\n        this._onDispose(this);\n\n        const element = this._element.get();\n        this.dummyManager?.dispose();\n\n        if (element) {\n            if (__DEV__) {\n                _setInformativeStyle(this._element, true);\n            }\n        }\n\n        delete this._first;\n    }\n\n    findNextTabbable(\n        currentElement?: HTMLElement,\n        isBackward?: boolean\n    ): Types.NextTabbable | null {\n        const groupperElement = this.getElement();\n\n        if (!groupperElement) {\n            return null;\n        }\n\n        const groupperFirstFocusable = this.getFirst(true);\n\n        if (!currentElement || !groupperElement.contains(currentElement)) {\n            return {\n                element: groupperFirstFocusable,\n                lastMoverOrGroupper: groupperFirstFocusable ? undefined : this,\n            };\n        }\n\n        const tabster = this._tabster;\n        let next: HTMLElement | null | undefined = null;\n        let uncontrolled: HTMLElement | undefined;\n        const onUncontrolled = (el: HTMLElement) => {\n            uncontrolled = el;\n        };\n\n        if (this._shouldTabInside && groupperFirstFocusable) {\n            next = isBackward\n                ? tabster.focusable.findPrev({\n                      container: groupperElement,\n                      currentElement,\n                      onUncontrolled,\n                  })\n                : tabster.focusable.findNext({\n                      container: groupperElement,\n                      currentElement,\n                      onUncontrolled,\n                  });\n\n            if (\n                !uncontrolled &&\n                !next &&\n                this._props.tabbability ===\n                    Types.GroupperTabbabilities.LimitedTrapFocus\n            ) {\n                next = isBackward\n                    ? tabster.focusable.findLast({\n                          container: groupperElement,\n                      })\n                    : tabster.focusable.findFirst({\n                          container: groupperElement,\n                      });\n            }\n        }\n\n        return {\n            element: next,\n            uncontrolled,\n            lastMoverOrGroupper: next || uncontrolled ? undefined : this,\n        };\n    }\n\n    makeTabbable(isTabbable: boolean): void {\n        this._shouldTabInside = isTabbable || !this._props.tabbability;\n\n        if (__DEV__) {\n            _setInformativeStyle(this._element, !this._shouldTabInside);\n        }\n    }\n\n    isActive(noIfFirstIsFocused?: boolean): boolean | undefined {\n        const element = this.getElement() || null;\n        let isParentActive = true;\n\n        for (let e = element?.parentElement; e; e = e.parentElement) {\n            const g = getTabsterOnElement(this._tabster, e)?.groupper as\n                | Groupper\n                | undefined;\n\n            if (g) {\n                if (!g._shouldTabInside) {\n                    isParentActive = false;\n                }\n            }\n        }\n\n        let ret = isParentActive\n            ? this._props.tabbability\n                ? this._shouldTabInside\n                : false\n            : undefined;\n\n        if (ret && noIfFirstIsFocused) {\n            const focused = this._tabster.focusedElement.getFocusedElement();\n\n            if (focused) {\n                ret = focused !== this.getFirst(true);\n            }\n        }\n\n        return ret;\n    }\n\n    getFirst(orContainer: boolean): HTMLElement | undefined {\n        const groupperElement = this.getElement();\n        let first: HTMLElement | undefined;\n\n        if (groupperElement) {\n            if (\n                orContainer &&\n                this._tabster.focusable.isFocusable(groupperElement)\n            ) {\n                return groupperElement;\n            }\n\n            first = this._first?.get();\n\n            if (!first) {\n                first =\n                    this._tabster.focusable.findFirst({\n                        container: groupperElement,\n                        ignoreUncontrolled: true,\n                    }) || undefined;\n\n                if (first) {\n                    this.setFirst(first);\n                }\n            }\n        }\n\n        return first;\n    }\n\n    setFirst(element: HTMLElement | undefined): void {\n        if (element) {\n            this._first = new WeakHTMLElement(this._tabster.getWindow, element);\n        } else {\n            delete this._first;\n        }\n    }\n\n    acceptElement(\n        element: HTMLElement,\n        state: Types.FocusableAcceptElementState\n    ): number | undefined {\n        const cachedGrouppers = state.cachedGrouppers;\n\n        let cached = cachedGrouppers[this.id];\n        let isActive: boolean | undefined;\n\n        if (cached) {\n            isActive = cached.isActive;\n        } else {\n            isActive = this.isActive(true);\n\n            cached = cachedGrouppers[this.id] = {\n                isActive,\n            };\n        }\n\n        const groupperElement = this.getElement();\n\n        if (groupperElement) {\n            if (isActive !== true) {\n                if (groupperElement.contains(state.from)) {\n                    return NodeFilter.FILTER_REJECT;\n                }\n\n                let first: HTMLElement | null | undefined;\n\n                if (\"first\" in cached) {\n                    first = cached.first;\n                } else {\n                    first = cached.first = this.getFirst(true);\n                }\n\n                if (first && state.acceptCondition(first)) {\n                    state.lastToIgnore = groupperElement;\n\n                    if (first !== state.from) {\n                        state.found = true;\n                        state.foundElement = first;\n                        return NodeFilter.FILTER_ACCEPT;\n                    } else {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n                }\n            }\n        }\n\n        return undefined;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateGroupperProps(props: Types.GroupperProps): void {\n    // TODO: Implement validation.\n}\n\nexport class GroupperAPI implements Types.GroupperAPI {\n    private _tabster: Types.TabsterCore;\n    private _initTimer: number | undefined;\n    private _win: Types.GetWindow;\n    private _current: Record<string, Types.Groupper> = {};\n    private _grouppers: Record<string, Types.Groupper> = {};\n\n    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow) {\n        this._tabster = tabster;\n        this._win = getWindow;\n        this._initTimer = getWindow().setTimeout(this._init, 0);\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        const win = this._win();\n\n        this._tabster.focusedElement.subscribe(this._onFocus);\n\n        win.document.addEventListener(\"mousedown\", this._onMouseDown, true);\n        win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n\n    dispose(): void {\n        const win = this._win();\n\n        this._current = {};\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        win.document.removeEventListener(\"mousedown\", this._onMouseDown, true);\n        win.removeEventListener(\"keydown\", this._onKeyDown, true);\n\n        Object.keys(this._grouppers).forEach((groupperId) => {\n            if (this._grouppers[groupperId]) {\n                this._grouppers[groupperId].dispose();\n                delete this._grouppers[groupperId];\n            }\n        });\n    }\n\n    createGroupper(element: HTMLElement, props: Types.GroupperProps) {\n        if (__DEV__) {\n            validateGroupperProps(props);\n        }\n\n        const newGroupper = new Groupper(\n            this._tabster,\n            element,\n            this._onGroupperDispose,\n            props\n        );\n\n        this._grouppers[newGroupper.id] = newGroupper;\n\n        return newGroupper;\n    }\n\n    forgetCurrentGrouppers(): void {\n        this._current = {};\n    }\n\n    private _onGroupperDispose = (groupper: Groupper) => {\n        delete this._grouppers[groupper.id];\n    };\n\n    private _onFocus = (element: HTMLElement | undefined): void => {\n        if (element) {\n            this._updateCurrent(element, true, true);\n        }\n    };\n\n    private _onMouseDown = (e: MouseEvent): void => {\n        if (e.target) {\n            this._updateCurrent(e.target as HTMLElement, true);\n        }\n    };\n\n    private _updateCurrent(\n        element: HTMLElement,\n        includeTarget?: boolean,\n        checkTarget?: boolean\n    ): void {\n        const newIds: Record<string, true> = {};\n\n        let isTarget = true;\n\n        for (\n            let el = element as HTMLElement | null;\n            el;\n            el = el.parentElement\n        ) {\n            const groupper = getTabsterOnElement(this._tabster, el)?.groupper;\n\n            if (groupper) {\n                newIds[groupper.id] = true;\n\n                if (isTarget && checkTarget && el !== element) {\n                    isTarget = false;\n                }\n\n                if (includeTarget || !isTarget) {\n                    this._current[groupper.id] = groupper;\n                    const isTabbable =\n                        groupper.isActive() ||\n                        (element !== el &&\n                            (!groupper.getProps().delegated ||\n                                groupper.getFirst(false) !== element));\n\n                    groupper.makeTabbable(isTabbable);\n                }\n\n                isTarget = false;\n            }\n        }\n\n        for (const id of Object.keys(this._current)) {\n            const groupper = this._current[id];\n\n            if (!(groupper.id in newIds)) {\n                groupper.makeTabbable(false);\n                groupper.setFirst(undefined);\n                delete this._current[id];\n            }\n        }\n    }\n\n    private _onKeyDown = (e: KeyboardEvent): void => {\n        if (e.keyCode !== Keys.Enter && e.keyCode !== Keys.Esc) {\n            return;\n        }\n\n        const element = this._tabster.focusedElement.getFocusedElement();\n\n        if (element) {\n            const ctx = RootAPI.getTabsterContext(this._tabster, element);\n            let groupper = ctx?.groupper;\n\n            if (ctx && groupper) {\n                let next: HTMLElement | null | undefined;\n\n                const groupperElement = groupper.getElement();\n\n                if (e.keyCode === Keys.Enter) {\n                    if (ctx.ignoreKeydown.Enter) {\n                        return;\n                    }\n\n                    if (\n                        element === groupperElement ||\n                        (groupper.getProps().delegated &&\n                            element === groupper.getFirst(false))\n                    ) {\n                        next = this._tabster.focusable.findNext({\n                            container: groupperElement,\n                            currentElement: element,\n                        });\n                    }\n                } else if (e.keyCode === Keys.Esc) {\n                    if (ctx.ignoreKeydown.Escape) {\n                        return;\n                    }\n\n                    if (groupperElement && groupperElement.contains(element)) {\n                        if (element !== groupperElement) {\n                            next = groupper.getFirst(true);\n                        } else {\n                            const parentElement = groupperElement.parentElement;\n                            const parentCtx = parentElement\n                                ? RootAPI.getTabsterContext(\n                                      this._tabster,\n                                      parentElement\n                                  )\n                                : undefined;\n\n                            groupper = parentCtx?.groupper;\n                            next = groupper?.getFirst(true);\n                        }\n                    }\n\n                    if (groupper) {\n                        groupper.makeTabbable(false);\n                    }\n                }\n\n                if (next) {\n                    e.preventDefault();\n                    e.stopImmediatePropagation();\n\n                    nativeFocus(next);\n                }\n            }\n        }\n    };\n}\n\nfunction _setInformativeStyle(\n    weakElement: Types.WeakHTMLElement,\n    remove: boolean\n): void {\n    if (__DEV__) {\n        const element = weakElement.get();\n\n        if (element) {\n            if (remove) {\n                element.style.removeProperty(\"--tabster-groupper\");\n            } else {\n                element.style.setProperty(\"--tabster-groupper\", \"unlimited\");\n            }\n        }\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { nativeFocus } from \"keyborg\";\nimport { augmentAttribute } from \"./Instance\";\nimport { Keys } from \"./Keys\";\nimport { RootAPI } from \"./Root\";\nimport * as Types from \"./Types\";\nimport {\n    createElementTreeWalker,\n    DummyInput,\n    DummyInputManager,\n    DummyInputManagerPriorities,\n    TabsterPart,\n    triggerEvent,\n    WeakHTMLElement,\n} from \"./Utils\";\n\nlet _lastInternalId = 0;\n\nfunction _setInformativeStyle(\n    weakElement: WeakHTMLElement,\n    remove: boolean,\n    internalId?: string,\n    userId?: string,\n    isActive?: boolean,\n    isFocused?: boolean\n): void {\n    if (__DEV__) {\n        const element = weakElement.get();\n\n        if (element) {\n            if (remove) {\n                element.style.removeProperty(\"--tabster-modalizer\");\n            } else {\n                element.style.setProperty(\n                    \"--tabster-modalizer\",\n                    internalId +\n                        \",\" +\n                        userId +\n                        \",\" +\n                        (isActive ? \"active\" : \"inactive\") +\n                        \",\" +\n                        \",\" +\n                        (isFocused ? \"focused\" : \"not-focused\")\n                );\n            }\n        }\n    }\n}\n\nexport class Modalizer\n    extends TabsterPart<Types.ModalizerProps>\n    implements Types.Modalizer\n{\n    readonly internalId: string;\n    userId: string;\n\n    private _isActive: boolean | undefined;\n    private _isFocused = false;\n    /**\n     * Parent of modalizer Root, can be used for DOM cleanup if the modalizerRoot is no longer present\n     */\n    private _modalizerParent: WeakHTMLElement | null;\n    private _onDispose: (modalizer: Modalizer) => void;\n    private _moveOutWithDefault: (backwards: boolean) => void;\n    private _onActiveChange: (active: boolean) => void;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        onDispose: (modalizer: Modalizer) => void,\n        moveOutWithDefault: (backwards: boolean) => void,\n        onActiveChange: (active: boolean) => void,\n        props: Types.ModalizerProps\n    ) {\n        super(tabster, element, props);\n\n        this.internalId = \"ml\" + ++_lastInternalId;\n        this.userId = props.id;\n        this._onDispose = onDispose;\n        this._moveOutWithDefault = moveOutWithDefault;\n        this._onActiveChange = onActiveChange;\n        if (!tabster.controlTab) {\n            element.addEventListener(\"keydown\", this._onKeyDown);\n        }\n\n        const parentElement = element.parentElement;\n        if (parentElement) {\n            this._modalizerParent = new WeakHTMLElement(\n                tabster.getWindow,\n                parentElement\n            );\n        } else {\n            this._modalizerParent = null;\n        }\n\n        this._setAccessibilityProps();\n\n        if (__DEV__) {\n            _setInformativeStyle(\n                this._element,\n                false,\n                this.internalId,\n                this.userId,\n                this._isActive,\n                this._isFocused\n            );\n        }\n    }\n\n    private _onKeyDown = (e: KeyboardEvent) => {\n        const keyCode = e.keyCode;\n        const isPrev = e.shiftKey;\n        if (keyCode !== Keys.Tab) {\n            return;\n        }\n\n        const focusedElement = this._tabster.focusedElement.getFocusedElement();\n        const modalizerElement = this.getElement();\n        let findFn: \"findPrev\" | \"findNext\" | \"findFirst\" | \"findLast\" = isPrev\n            ? \"findPrev\"\n            : \"findNext\";\n        let next: HTMLElement | null | undefined;\n        if (focusedElement && modalizerElement?.contains(focusedElement)) {\n            next = this._tabster.focusable[findFn]({\n                container: this.getElement(),\n                currentElement: focusedElement,\n            });\n        }\n\n        // circular focus trap for modalizer\n        if (!next && this._props.isTrapped) {\n            findFn = isPrev ? \"findLast\" : \"findFirst\";\n            next = this._tabster.focusable[findFn]({\n                container: this.getElement(),\n            });\n        }\n\n        if (next) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n\n            nativeFocus(next);\n        } else if (!this._props.isOthersAccessible) {\n            this._moveOutWithDefault(isPrev);\n        }\n    };\n\n    setProps(props: Types.ModalizerProps): void {\n        if (props.id) {\n            this.userId = props.id;\n        }\n\n        this._props = { ...props };\n\n        this._setAccessibilityProps();\n    }\n\n    dispose(): void {\n        this._onDispose(this);\n        this._remove();\n    }\n\n    setActive(active: boolean): void {\n        if (active === this._isActive) {\n            return;\n        }\n\n        this._isActive = active;\n        this._onActiveChange(active);\n\n        if (__DEV__) {\n            _setInformativeStyle(\n                this._element,\n                false,\n                this.internalId,\n                this.userId,\n                this._isActive,\n                this._isFocused\n            );\n        }\n\n        let targetDocument =\n            this._element.get()?.ownerDocument ||\n            this._modalizerParent?.get()?.ownerDocument;\n        // Document can't be determined frm the modalizer root or its parent, fallback to window\n        if (!targetDocument) {\n            targetDocument = this._tabster.getWindow().document;\n        }\n        const root = targetDocument.body;\n\n        // Sets or restores aria-hidden value based on `active` flag\n        const ariaHiddenWalker = createElementTreeWalker(\n            targetDocument,\n            root,\n            (el: HTMLElement) => {\n                // if other content should be accessible no need to do walk the tree\n                if (this._props.isOthersAccessible) {\n                    return NodeFilter.FILTER_REJECT;\n                }\n\n                const modalizerRoot = this._element.get();\n                const modalizerParent = this._modalizerParent?.get();\n                const isModalizerElement = modalizerRoot === el;\n                const containsModalizerRoot = !!el.contains(\n                    modalizerRoot || null\n                );\n                const containsModalizerParent = !!el.contains(\n                    modalizerParent || null\n                );\n\n                if (isModalizerElement) {\n                    return NodeFilter.FILTER_REJECT;\n                }\n\n                if (containsModalizerRoot || containsModalizerParent) {\n                    return NodeFilter.FILTER_SKIP;\n                }\n\n                // Add `aria-hidden` when modalizer is active\n                // Restore `aria-hidden` when modalizer is inactive\n                augmentAttribute(\n                    this._tabster,\n                    el,\n                    \"aria-hidden\",\n                    active ? \"true\" : undefined\n                );\n\n                const modalizerRootOnPage =\n                    modalizerRoot === modalizerRoot?.ownerDocument.body\n                        ? false\n                        : modalizerRoot?.ownerDocument.body.contains(\n                              modalizerRoot\n                          );\n\n                const modalizerParentOnPage =\n                    modalizerParent === modalizerParent?.ownerDocument.body\n                        ? false\n                        : modalizerParent?.ownerDocument.body.contains(\n                              modalizerParent\n                          );\n\n                // if the modalizer root or its parent is not on the page, all nodes need to be visited\n                if (!modalizerParentOnPage && !modalizerRootOnPage) {\n                    return NodeFilter.FILTER_SKIP;\n                }\n\n                return NodeFilter.FILTER_REJECT;\n            }\n        );\n\n        if (ariaHiddenWalker) {\n            while (ariaHiddenWalker.nextNode()) {\n                /** Iterate to update the tree */\n            }\n        }\n    }\n\n    isActive(): boolean {\n        return !!this._isActive;\n    }\n\n    contains(element: HTMLElement) {\n        return !!this.getElement()?.contains(element);\n    }\n\n    onBeforeFocusOut(): boolean {\n        const element = this.getElement();\n\n        return element\n            ? !triggerEvent<Types.ModalizerEventDetails>(\n                  element,\n                  Types.ModalizerEventName,\n                  { eventName: \"beforefocusout\" }\n              )\n            : false;\n    }\n\n    private _remove(): void {\n        if (__DEV__) {\n            _setInformativeStyle(this._element, true);\n        }\n    }\n\n    private _setAccessibilityProps(): void {\n        if (__DEV__) {\n            const element = this._element.get();\n            if (\n                element &&\n                !element.getAttribute(\"aria-label\") &&\n                !element.getAttribute(\"aria-labelledby\")\n            ) {\n                console.warn(\n                    `Modalizer ${this.id} must have either aria-label or aria-labelledby`\n                );\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateModalizerProps(props: Types.ModalizerProps): void {\n    // TODO: Implement validation.\n}\n\n/**\n * Manages the dummy inputs for the Modalizer API\n */\nclass ModalizerAPIDummyManager extends DummyInputManager {\n    private _modalizerAPI: ModalizerAPI;\n    private _tabster: Types.TabsterCore;\n\n    constructor(\n        modalizerAPI: ModalizerAPI,\n        tabster: Types.TabsterCore,\n        element: WeakHTMLElement\n    ) {\n        super(tabster, element, DummyInputManagerPriorities.Modalizer);\n\n        this._modalizerAPI = modalizerAPI;\n        this._tabster = tabster;\n        this.setTabbable(false);\n\n        this._setHandlers(this._onFocusDummyInput);\n    }\n\n    private _onFocusDummyInput = (dummyInput: DummyInput) => {\n        const activeModalizer = this._modalizerAPI.activeModalizer;\n        if (!activeModalizer) {\n            return;\n        }\n\n        if (dummyInput.shouldMoveOut) {\n            return;\n        }\n\n        const findFn = dummyInput.isFirst ? \"findFirst\" : \"findLast\";\n        const next = this._tabster.focusable[findFn]({\n            container: activeModalizer.getElement(),\n        });\n        if (next) {\n            this._tabster.focusedElement.focus(next);\n        }\n    };\n}\n\nexport class ModalizerAPI implements Types.ModalizerAPI {\n    private _tabster: Types.TabsterCore;\n    private _win: Types.GetWindow;\n    private _initTimer: number | undefined;\n    private _dummyManager?: ModalizerAPIDummyManager;\n    /** The currently active modalizer */\n    activeModalizer: Types.Modalizer | undefined;\n    private _focusOutTimer: number | undefined;\n    private _restoreModalizerFocusTimer: number | undefined;\n    /**\n     * Modalizers managed by this API, stored by id\n     */\n    private _modalizers: Record<string, Types.Modalizer>;\n\n    constructor(tabster: Types.TabsterCore) {\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._initTimer = this._win().setTimeout(this._init, 0);\n        this._modalizers = {};\n        if (!tabster.controlTab) {\n            const documentBody = this._win().document.body;\n            this._dummyManager = new ModalizerAPIDummyManager(\n                this,\n                tabster,\n                new WeakHTMLElement(this._win, documentBody)\n            );\n        }\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n\n    dispose(): void {\n        const win = this._win();\n        this._dummyManager?.dispose();\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        win.clearTimeout(this._restoreModalizerFocusTimer);\n        win.clearTimeout(this._focusOutTimer);\n\n        // Dispose all modalizers managed by the API\n        Object.keys(this._modalizers).forEach((modalizerId) => {\n            if (this._modalizers[modalizerId]) {\n                this._modalizers[modalizerId].dispose();\n                delete this._modalizers[modalizerId];\n            }\n        });\n\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        delete this.activeModalizer;\n    }\n\n    createModalizer(\n        element: HTMLElement,\n        props: Types.ModalizerProps\n    ): Types.Modalizer {\n        if (__DEV__) {\n            validateModalizerProps(props);\n        }\n\n        const modalizer = new Modalizer(\n            this._tabster,\n            element,\n            this._onModalizerDispose,\n            this._dummyManager?.moveOutWithDefaultAction ?? (() => null),\n            this._dummyManager?.setTabbable ?? (() => null),\n            props\n        );\n\n        this._modalizers[props.id] = modalizer;\n\n        // Adding a modalizer which is already focused, activate it\n        if (\n            element.contains(\n                this._tabster.focusedElement.getFocusedElement() ?? null\n            )\n        ) {\n            const prevModalizer = this.activeModalizer;\n            if (prevModalizer) {\n                prevModalizer.setActive(false);\n            }\n            this.activeModalizer = modalizer;\n            this.activeModalizer.setActive(true);\n        }\n\n        return modalizer;\n    }\n\n    private _onModalizerDispose = (modalizer: Modalizer) => {\n        modalizer.setActive(false);\n\n        if (this.activeModalizer === modalizer) {\n            this.activeModalizer = undefined;\n        }\n\n        delete this._modalizers[modalizer.userId];\n    };\n\n    focus(\n        elementFromModalizer: HTMLElement,\n        noFocusFirst?: boolean,\n        noFocusDefault?: boolean\n    ): boolean {\n        const ctx = RootAPI.getTabsterContext(\n            this._tabster,\n            elementFromModalizer\n        );\n\n        if (ctx && ctx.modalizer) {\n            this.activeModalizer = ctx.modalizer;\n            this.activeModalizer.setActive(true);\n\n            const props = this.activeModalizer.getProps();\n            const modalizerRoot = this.activeModalizer.getElement();\n\n            if (modalizerRoot) {\n                if (noFocusFirst === undefined) {\n                    noFocusFirst = props.isNoFocusFirst;\n                }\n\n                if (\n                    !noFocusFirst &&\n                    this._tabster.keyboardNavigation.isNavigatingWithKeyboard() &&\n                    this._tabster.focusedElement.focusFirst({\n                        container: modalizerRoot,\n                    })\n                ) {\n                    return true;\n                }\n\n                if (noFocusDefault === undefined) {\n                    noFocusDefault = props.isNoFocusDefault;\n                }\n\n                if (\n                    !noFocusDefault &&\n                    this._tabster.focusedElement.focusDefault(modalizerRoot)\n                ) {\n                    return true;\n                }\n\n                this._tabster.focusedElement.resetFocus(modalizerRoot);\n            }\n        } else if (__DEV__) {\n            console.error(\"Element is not in Modalizer.\", elementFromModalizer);\n        }\n\n        return false;\n    }\n\n    updateModalizer(modalizer: Types.Modalizer, removed?: boolean): void {\n        if (removed) {\n            if (modalizer.isActive()) {\n                modalizer.setActive(false);\n            }\n\n            delete this._modalizers[modalizer.userId];\n\n            if (this.activeModalizer === modalizer) {\n                this.activeModalizer = undefined;\n            }\n        }\n    }\n\n    /**\n     * Subscribes to the focus state and handles modalizer related focus events\n     * @param e - Element that is focused\n     * @param details - Additional data about the focus event\n     */\n    private _onFocus = (\n        focusedElement: HTMLElement | undefined,\n        details: Types.FocusedElementDetails\n    ): void => {\n        const ctx =\n            focusedElement &&\n            RootAPI.getTabsterContext(this._tabster, focusedElement);\n        // Modalizer behaviour is opt in, only apply to elements that have a tabster context\n        if (!ctx || !focusedElement) {\n            return;\n        }\n\n        if (this._focusOutTimer) {\n            this._win().clearTimeout(this._focusOutTimer);\n            this._focusOutTimer = undefined;\n        }\n\n        const modalizer = ctx?.modalizer;\n        if (modalizer === this.activeModalizer) {\n            return;\n        }\n\n        // Developers calling `element.focus()` should change/deactivate active modalizer\n        if (\n            details.isFocusedProgrammatically &&\n            !this.activeModalizer?.contains(focusedElement)\n        ) {\n            this.activeModalizer?.setActive(false);\n            this.activeModalizer = undefined;\n\n            if (modalizer) {\n                this.activeModalizer = modalizer;\n                this.activeModalizer.setActive(true);\n            }\n        } else if (!this.activeModalizer?.getProps().isOthersAccessible) {\n            // Focused outside of the active modalizer, try pull focus back to current modalizer\n            const win = this._win();\n            win.clearTimeout(this._restoreModalizerFocusTimer);\n            // TODO some rendering frameworks (i.e. React) might async rerender the DOM so we need to wait for a duration\n            // Figure out a better way of doing this rather than a 100ms timeout\n            this._restoreModalizerFocusTimer = win.setTimeout(\n                () => this._restoreModalizerFocus(focusedElement),\n                100\n            );\n        }\n    };\n\n    /**\n     * Called when an element is focused outside of an active modalizer.\n     * Attempts to pull focus back into the active modalizer\n     * @param outsideElement - An element being focused outside of the modalizer\n     */\n    private _restoreModalizerFocus(\n        outsideElement: HTMLElement | undefined\n    ): void {\n        if (!outsideElement?.ownerDocument || !this.activeModalizer) {\n            return;\n        }\n\n        let toFocus = this._tabster.focusable.findFirst({\n            container: this.activeModalizer.getElement(),\n        });\n        if (toFocus) {\n            if (\n                outsideElement.compareDocumentPosition(toFocus) &\n                document.DOCUMENT_POSITION_PRECEDING\n            ) {\n                toFocus = this._tabster.focusable.findLast({\n                    container: outsideElement.ownerDocument.body,\n                });\n\n                if (!toFocus) {\n                    // This only might mean that findFirst/findLast are buggy and inconsistent.\n                    throw new Error(\"Something went wrong.\");\n                }\n            }\n\n            this._tabster.focusedElement.focus(toFocus);\n        } else {\n            // Current Modalizer doesn't seem to have focusable elements.\n            // Blurring the currently focused element which is outside of the current Modalizer.\n            outsideElement.blur();\n        }\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { nativeFocus } from \"keyborg\";\nimport { FocusedElementState } from \"./State/FocusedElement\";\nimport { getTabsterOnElement } from \"./Instance\";\nimport { Keys } from \"./Keys\";\nimport { RootAPI } from \"./Root\";\nimport * as Types from \"./Types\";\nimport {\n    createElementTreeWalker,\n    DummyInput,\n    DummyInputManager,\n    DummyInputManagerPriorities,\n    getElementUId,\n    getPromise,\n    HTMLElementWithDummyContainer,\n    isElementVerticallyVisibleInContainer,\n    matchesSelector,\n    scrollIntoView,\n    TabsterPart,\n    triggerEvent,\n    WeakHTMLElement,\n} from \"./Utils\";\n\nconst _inputSelector = [\"input\", \"textarea\", \"*[contenteditable]\"].join(\", \");\n\nclass MoverDummyManager extends DummyInputManager {\n    private _tabster: Types.TabsterCore;\n    private _getMemorized: () => WeakHTMLElement | undefined;\n\n    constructor(\n        element: WeakHTMLElement,\n        tabster: Types.TabsterCore,\n        getMemorized: () => WeakHTMLElement | undefined\n    ) {\n        super(tabster, element, DummyInputManagerPriorities.Mover);\n\n        this._tabster = tabster;\n        this._getMemorized = getMemorized;\n\n        this._setHandlers(this._onFocusDummyInput);\n    }\n\n    private _onFocusDummyInput = (dummyInput: DummyInput) => {\n        const container = this._element.get();\n        const input = dummyInput.input;\n\n        if (container && !dummyInput.shouldMoveOut && input) {\n            const ctx = RootAPI.getTabsterContext(this._tabster, container);\n\n            let toFocus: HTMLElement | null | undefined;\n\n            if (ctx) {\n                toFocus = FocusedElementState.findNextTabbable(\n                    this._tabster,\n                    ctx,\n                    undefined,\n                    input,\n                    !dummyInput.isFirst\n                )?.element;\n            }\n\n            const memorized = this._getMemorized()?.get();\n            if (memorized) {\n                toFocus = memorized;\n            }\n\n            if (toFocus) {\n                nativeFocus(toFocus);\n            }\n        }\n    };\n}\n\n// TypeScript enums produce depressing JavaScript code, so, we're just using\n// a few old style constants here.\nconst _moverUpdateAdd = 1;\nconst _moverUpdateAttr = 2;\nconst _moverUpdateRemove = 3;\n\ninterface MoverUpdateQueueItem {\n    element: HTMLElement;\n    type:\n        | typeof _moverUpdateAdd\n        | typeof _moverUpdateAttr\n        | typeof _moverUpdateRemove;\n}\n\nexport class Mover\n    extends TabsterPart<Types.MoverProps>\n    implements Types.Mover\n{\n    private _unobserve: (() => void) | undefined;\n    private _intersectionObserver: IntersectionObserver | undefined;\n    private _setCurrentTimer: number | undefined;\n    private _current: WeakHTMLElement | undefined;\n    private _prevCurrent: WeakHTMLElement | undefined;\n    private _visible: Record<string, Types.Visibility> = {};\n    private _fullyVisible: string | undefined;\n    private _win: Types.GetWindow;\n    private _onDispose: (mover: Mover) => void;\n    private _allElements: WeakMap<HTMLElement, Mover> | undefined;\n    private _updateQueue: MoverUpdateQueueItem[] | undefined;\n    private _updateTimer: number | undefined;\n\n    dummyManager: MoverDummyManager | undefined;\n\n    constructor(\n        tabster: Types.TabsterCore,\n        element: HTMLElement,\n        onDispose: (mover: Mover) => void,\n        props: Types.MoverProps\n    ) {\n        super(tabster, element, props);\n\n        this._win = tabster.getWindow;\n\n        if (this._props.trackState || this._props.visibilityAware) {\n            this._intersectionObserver = new IntersectionObserver(\n                this._onIntersection,\n                { threshold: [0, 0.25, 0.5, 0.75, 1] }\n            );\n            this._observeState();\n        }\n\n        this._onDispose = onDispose;\n        const getMemorized = () =>\n            props.memorizeCurrent ? this._current : undefined;\n\n        if (!tabster.controlTab) {\n            this.dummyManager = new MoverDummyManager(\n                this._element,\n                tabster,\n                getMemorized\n            );\n        }\n    }\n\n    dispose(): void {\n        this._onDispose(this);\n\n        if (this._intersectionObserver) {\n            this._intersectionObserver.disconnect();\n            delete this._intersectionObserver;\n        }\n\n        delete this._current;\n        delete this._fullyVisible;\n        delete this._allElements;\n        delete this._updateQueue;\n\n        if (this._unobserve) {\n            this._unobserve();\n            delete this._unobserve;\n        }\n\n        const win = this._win();\n\n        if (this._setCurrentTimer) {\n            win.clearTimeout(this._setCurrentTimer);\n            delete this._setCurrentTimer;\n        }\n\n        if (this._updateTimer) {\n            win.clearTimeout(this._updateTimer);\n            delete this._updateTimer;\n        }\n\n        this.dummyManager?.dispose();\n    }\n\n    setCurrent(element: HTMLElement | undefined): void {\n        if (element) {\n            this._current = new WeakHTMLElement(this._win, element);\n        } else {\n            this._current = undefined;\n        }\n\n        if (\n            (this._props.trackState || this._props.visibilityAware) &&\n            !this._setCurrentTimer\n        ) {\n            this._setCurrentTimer = this._win().setTimeout(() => {\n                delete this._setCurrentTimer;\n\n                const changed: (WeakHTMLElement | undefined)[] = [];\n\n                if (this._current !== this._prevCurrent) {\n                    changed.push(this._current);\n                    changed.push(this._prevCurrent);\n                    this._prevCurrent = this._current;\n                }\n\n                for (const weak of changed) {\n                    const el = weak?.get();\n\n                    if (el && this._allElements?.get(el) === this) {\n                        const props = this._props;\n\n                        if (\n                            el &&\n                            (props.visibilityAware !== undefined ||\n                                props.trackState)\n                        ) {\n                            const state = this.getState(el);\n\n                            if (state) {\n                                triggerEvent(el, Types.MoverEventName, state);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    getCurrent(): HTMLElement | null {\n        return this._current?.get() || null;\n    }\n\n    findNextTabbable(\n        currentElement?: HTMLElement,\n        isBackward?: boolean\n    ): Types.NextTabbable | null {\n        const container = this.getElement();\n        const currentIsDummy =\n            container &&\n            (\n                currentElement as HTMLElementWithDummyContainer\n            )?.__tabsterDummyContainer?.get() === container;\n\n        if (!container) {\n            return null;\n        }\n\n        const tabster = this._tabster;\n        const focusable = tabster.focusable;\n        let next: HTMLElement | null | undefined = null;\n        let uncontrolled: HTMLElement | undefined;\n        const onUncontrolled = (el: HTMLElement) => {\n            uncontrolled = el;\n        };\n\n        if (this._props.tabbable || currentIsDummy) {\n            next = isBackward\n                ? focusable.findPrev({\n                      currentElement,\n                      container,\n                      onUncontrolled,\n                  })\n                : focusable.findNext({\n                      currentElement,\n                      container,\n                      onUncontrolled,\n                  });\n        }\n\n        return {\n            element: next,\n            uncontrolled,\n            lastMoverOrGroupper: next || uncontrolled ? undefined : this,\n        };\n    }\n\n    acceptElement(\n        element: HTMLElement,\n        state: Types.FocusableAcceptElementState\n    ): number | undefined {\n        if (!FocusedElementState.isTabbing) {\n            return state.currentCtx?.isExcludedFromMover\n                ? NodeFilter.FILTER_REJECT\n                : undefined;\n        }\n\n        const { memorizeCurrent, visibilityAware } = this._props;\n        const moverElement = this.getElement();\n\n        if (\n            moverElement &&\n            (memorizeCurrent || visibilityAware) &&\n            (!moverElement.contains(state.from) ||\n                (\n                    state.from as HTMLElementWithDummyContainer\n                ).__tabsterDummyContainer?.get() === moverElement)\n        ) {\n            if (memorizeCurrent) {\n                const current = this._current?.get();\n\n                if (current && state.acceptCondition(current)) {\n                    state.found = true;\n                    state.foundElement = current;\n                    state.lastToIgnore = moverElement;\n                    return NodeFilter.FILTER_ACCEPT;\n                }\n            }\n\n            if (visibilityAware) {\n                const found = this._tabster.focusable.findElement({\n                    container: moverElement,\n                    ignoreUncontrolled: true,\n                    isBackward: state.isBackward,\n                    acceptCondition: (el) => {\n                        const id = getElementUId(this._win, el);\n                        const visibility = this._visible[id];\n\n                        return (\n                            moverElement !== el &&\n                            !!this._allElements?.get(el) &&\n                            state.acceptCondition(el) &&\n                            (visibility === Types.Visibilities.Visible ||\n                                (visibility ===\n                                    Types.Visibilities.PartiallyVisible &&\n                                    (visibilityAware ===\n                                        Types.Visibilities.PartiallyVisible ||\n                                        !this._fullyVisible)))\n                        );\n                    },\n                });\n\n                if (found) {\n                    state.found = true;\n                    state.foundElement = found;\n                    state.lastToIgnore = moverElement;\n                    return NodeFilter.FILTER_ACCEPT;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    private _onIntersection = (entries: IntersectionObserverEntry[]): void => {\n        for (const entry of entries) {\n            const el = entry.target as HTMLElement;\n            const id = getElementUId(this._win, el);\n\n            let newVisibility: Types.Visibility | undefined;\n            let fullyVisible = this._fullyVisible;\n\n            if (entry.intersectionRatio >= 0.25) {\n                newVisibility =\n                    entry.intersectionRatio >= 0.75\n                        ? Types.Visibilities.Visible\n                        : Types.Visibilities.PartiallyVisible;\n\n                if (newVisibility === Types.Visibilities.Visible) {\n                    fullyVisible = id;\n                }\n            }\n\n            if (this._visible[id] !== newVisibility) {\n                if (newVisibility === undefined) {\n                    delete this._visible[id];\n\n                    if (fullyVisible === id) {\n                        delete this._fullyVisible;\n                    }\n                } else {\n                    this._visible[id] = newVisibility;\n                    this._fullyVisible = fullyVisible;\n                }\n\n                const state = this.getState(el);\n\n                if (state) {\n                    triggerEvent(el, Types.MoverEventName, state);\n                }\n            }\n        }\n    };\n\n    private _observeState(): void {\n        const element = this.getElement();\n\n        if (\n            this._unobserve ||\n            !element ||\n            typeof MutationObserver === \"undefined\"\n        ) {\n            return;\n        }\n\n        const win = this._win();\n        const allElements = (this._allElements = new WeakMap());\n        const tabsterFocusable = this._tabster.focusable;\n        let updateQueue: MoverUpdateQueueItem[] = (this._updateQueue = []);\n\n        const observer = new MutationObserver((mutations: MutationRecord[]) => {\n            for (const mutation of mutations) {\n                const target = mutation.target;\n                const removed = mutation.removedNodes;\n                const added = mutation.addedNodes;\n\n                if (mutation.type === \"attributes\") {\n                    if (mutation.attributeName === \"tabindex\") {\n                        updateQueue.push({\n                            element: target as HTMLElement,\n                            type: _moverUpdateAttr,\n                        });\n                    }\n                } else {\n                    for (let i = 0; i < removed.length; i++) {\n                        updateQueue.push({\n                            element: removed[i] as HTMLElement as HTMLElement,\n                            type: _moverUpdateRemove,\n                        });\n                    }\n\n                    for (let i = 0; i < added.length; i++) {\n                        updateQueue.push({\n                            element: added[i] as HTMLElement,\n                            type: _moverUpdateAdd,\n                        });\n                    }\n                }\n            }\n\n            requestUpdate();\n        });\n\n        const setElement = (element: HTMLElement, remove?: boolean): void => {\n            const current = allElements.get(element);\n\n            if (current && remove) {\n                this._intersectionObserver?.unobserve(element);\n                allElements.delete(element);\n            }\n\n            if (!current && !remove) {\n                allElements.set(element, this);\n                this._intersectionObserver?.observe(element);\n            }\n        };\n\n        const updateElement = (element: HTMLElement): void => {\n            const isFocusable = tabsterFocusable.isFocusable(element);\n            const current = allElements.get(element);\n\n            if (current) {\n                if (!isFocusable) {\n                    setElement(element, true);\n                }\n            } else {\n                if (isFocusable) {\n                    setElement(element);\n                }\n            }\n        };\n\n        const addNewElements = (element: HTMLElement): void => {\n            const { mover } = getMoverGroupper(element);\n\n            if (mover && mover !== this) {\n                if (\n                    mover.getElement() === element &&\n                    tabsterFocusable.isFocusable(element)\n                ) {\n                    setElement(element);\n                } else {\n                    return;\n                }\n            }\n\n            const walker = createElementTreeWalker(\n                win.document,\n                element,\n                (node: Node): number => {\n                    const { mover, groupper } = getMoverGroupper(\n                        node as HTMLElement\n                    );\n\n                    if (mover && mover !== this) {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n\n                    const groupperFirstFocusable = groupper?.getFirst(true);\n\n                    if (\n                        groupper &&\n                        groupper.getElement() !== node &&\n                        groupperFirstFocusable &&\n                        groupperFirstFocusable !== node\n                    ) {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n\n                    if (tabsterFocusable.isFocusable(node as HTMLElement)) {\n                        setElement(node as HTMLElement);\n                    }\n\n                    return NodeFilter.FILTER_SKIP;\n                }\n            );\n\n            if (walker) {\n                walker.currentNode = element;\n\n                while (walker.nextNode()) {\n                    /* Iterating for the sake of calling processNode() callback. */\n                }\n            }\n        };\n\n        const removeWalk = (element: HTMLElement): void => {\n            const current = allElements.get(element);\n\n            if (current) {\n                setElement(element, true);\n            }\n\n            for (\n                let el = element.firstElementChild;\n                el;\n                el = el.nextElementSibling\n            ) {\n                removeWalk(el as HTMLElement);\n            }\n        };\n\n        const requestUpdate = () => {\n            if (!this._updateTimer && updateQueue.length) {\n                this._updateTimer = win.setTimeout(() => {\n                    delete this._updateTimer;\n\n                    for (const { element, type } of updateQueue) {\n                        switch (type) {\n                            case _moverUpdateAttr:\n                                updateElement(element);\n                                break;\n                            case _moverUpdateAdd:\n                                addNewElements(element);\n                                break;\n                            case _moverUpdateRemove:\n                                removeWalk(element);\n                                break;\n                        }\n                    }\n\n                    updateQueue = this._updateQueue = [];\n                }, 0);\n            }\n        };\n\n        const getMoverGroupper = (\n            element: HTMLElement\n        ): { mover?: Mover; groupper?: Types.Groupper } => {\n            const ret: {\n                mover?: Mover;\n                groupper?: Types.Groupper;\n            } = {};\n\n            for (\n                let el: HTMLElement | null = element;\n                el;\n                el = el.parentElement\n            ) {\n                const toe = getTabsterOnElement(this._tabster, el);\n\n                if (toe) {\n                    if (toe.groupper && !ret.groupper) {\n                        ret.groupper = toe.groupper;\n                    }\n\n                    if (toe.mover) {\n                        ret.mover = toe.mover as Mover;\n                        break;\n                    }\n                }\n            }\n\n            return ret;\n        };\n\n        updateQueue.push({ element, type: _moverUpdateAdd });\n        requestUpdate();\n\n        observer.observe(element, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: [\"tabindex\"],\n        });\n\n        this._unobserve = () => {\n            observer.disconnect();\n        };\n    }\n\n    getState(element: HTMLElement): Types.MoverElementState | undefined {\n        const id = getElementUId(this._win, element);\n\n        if (id in this._visible) {\n            const visibility =\n                this._visible[id] || Types.Visibilities.Invisible;\n            const isCurrent = this._current\n                ? this._current.get() === element\n                : undefined;\n\n            return {\n                isCurrent,\n                visibility,\n            };\n        }\n\n        return undefined;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateMoverProps(props: Types.MoverProps): void {\n    // TODO: Implement validation.\n}\n\n/**\n * Calculates distance between two rectangles.\n *\n * @param ax1 first rectangle left\n * @param ay1 first rectangle top\n * @param ax2 first rectangle right\n * @param ay2 first rectangle bottom\n * @param bx1 second rectangle left\n * @param by1 second rectangle top\n * @param bx2 second rectangle right\n * @param by2 second rectangle bottom\n * @returns number, shortest distance between the rectangles.\n */\nfunction getDistance(\n    ax1: number,\n    ay1: number,\n    ax2: number,\n    ay2: number,\n    bx1: number,\n    by1: number,\n    bx2: number,\n    by2: number\n): number {\n    const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;\n    const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;\n\n    return xDistance === 0\n        ? yDistance\n        : yDistance === 0\n        ? xDistance\n        : Math.sqrt(xDistance * xDistance + yDistance * yDistance);\n}\n\nexport class MoverAPI implements Types.MoverAPI {\n    private _tabster: Types.TabsterCore;\n    private _initTimer: number | undefined;\n    private _win: Types.GetWindow;\n    private _movers: Record<string, Mover>;\n    private _ignoredInputTimer: number | undefined;\n    private _ignoredInputResolve: ((value: boolean) => void) | undefined;\n\n    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow) {\n        this._tabster = tabster;\n        this._win = getWindow;\n        this._initTimer = getWindow().setTimeout(this._init, 0);\n        this._movers = {};\n\n        tabster.focusedElement.subscribe(this._onFocus);\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        const win = this._win();\n\n        win.addEventListener(\"keydown\", this._onKeyDown, true);\n    };\n\n    dispose(): void {\n        const win = this._win();\n\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            delete this._initTimer;\n        }\n\n        this._ignoredInputResolve?.(false);\n\n        if (this._ignoredInputTimer) {\n            win.clearTimeout(this._ignoredInputTimer);\n            delete this._ignoredInputTimer;\n        }\n\n        win.removeEventListener(\"keydown\", this._onKeyDown, true);\n\n        Object.keys(this._movers).forEach((moverId) => {\n            if (this._movers[moverId]) {\n                this._movers[moverId].dispose();\n                delete this._movers[moverId];\n            }\n        });\n    }\n\n    createMover(element: HTMLElement, props: Types.MoverProps): Types.Mover {\n        if (__DEV__) {\n            validateMoverProps(props);\n        }\n\n        const newMover = new Mover(\n            this._tabster,\n            element,\n            this._onMoverDispose,\n            props\n        );\n        this._movers[newMover.id] = newMover;\n        return newMover;\n    }\n\n    private _onMoverDispose = (mover: Mover) => {\n        delete this._movers[mover.id];\n    };\n\n    private _onFocus = (e: HTMLElement | undefined): void => {\n        for (\n            let el: HTMLElement | null | undefined = e;\n            el;\n            el = el.parentElement\n        ) {\n            const mover = getTabsterOnElement(this._tabster, el)?.mover;\n\n            if (mover) {\n                mover.setCurrent(e);\n                break;\n            }\n        }\n    };\n\n    private _onKeyDown = async (e: KeyboardEvent): Promise<void> => {\n        if (this._ignoredInputTimer) {\n            this._win().clearTimeout(this._ignoredInputTimer);\n            delete this._ignoredInputTimer;\n        }\n\n        this._ignoredInputResolve?.(false);\n\n        let keyCode = e.keyCode;\n\n        switch (keyCode) {\n            case Keys.Down:\n            case Keys.Right:\n            case Keys.Up:\n            case Keys.Left:\n            case Keys.PageDown:\n            case Keys.PageUp:\n            case Keys.Home:\n            case Keys.End:\n                break;\n            default:\n                return;\n        }\n\n        const tabster = this._tabster;\n        const focused = tabster.focusedElement.getFocusedElement();\n\n        if (!focused || (await this._isIgnoredInput(focused, keyCode))) {\n            return;\n        }\n\n        const ctx = RootAPI.getTabsterContext(tabster, focused, {\n            checkRtl: true,\n        });\n\n        if (!ctx || !ctx.mover || ctx.isExcludedFromMover) {\n            return;\n        }\n\n        if (ctx.isGroupperFirst) {\n            if (ctx.groupper && ctx.groupper.isActive(true)) {\n                return;\n            }\n        }\n\n        const mover = ctx.mover;\n        const container = mover.getElement();\n\n        if (!container) {\n            return;\n        }\n\n        const focusable = tabster.focusable;\n        const moverProps = mover.getProps();\n        const direction = moverProps.direction || Types.MoverDirections.Both;\n        const isBoth = direction === Types.MoverDirections.Both;\n        const isVertical =\n            isBoth || direction === Types.MoverDirections.Vertical;\n        const isHorizontal =\n            isBoth || direction === Types.MoverDirections.Horizontal;\n        const isGrid = direction === Types.MoverDirections.Grid;\n        const isCyclic = moverProps.cyclic;\n\n        let next: HTMLElement | null | undefined;\n\n        let focusedElementRect: DOMRect;\n        let focusedElementX1 = 0;\n        let focusedElementX2 = 0;\n\n        if (isGrid) {\n            focusedElementRect = focused.getBoundingClientRect();\n            focusedElementX1 = Math.ceil(focusedElementRect.left);\n            focusedElementX2 = Math.floor(focusedElementRect.right);\n        }\n\n        if (\n            moverProps.disableHomeEndKeys &&\n            (keyCode === Keys.Home || keyCode === Keys.End)\n        ) {\n            return;\n        }\n\n        if (ctx.isRtl) {\n            if (keyCode === Keys.Right) {\n                keyCode = Keys.Left;\n            } else if (keyCode === Keys.Left) {\n                keyCode = Keys.Right;\n            }\n        }\n\n        if (\n            (keyCode === Keys.Down && isVertical) ||\n            (keyCode === Keys.Right && (isHorizontal || isGrid))\n        ) {\n            next = focusable.findNext({ currentElement: focused, container });\n\n            if (next && isGrid) {\n                const nextElementX1 = Math.ceil(\n                    next.getBoundingClientRect().left\n                );\n\n                if (focusedElementX2 > nextElementX1) {\n                    next = undefined;\n                }\n            } else if (!next && isCyclic) {\n                next = focusable.findFirst({ container });\n            }\n        } else if (\n            (keyCode === Keys.Up && isVertical) ||\n            (keyCode === Keys.Left && (isHorizontal || isGrid))\n        ) {\n            next = focusable.findPrev({ currentElement: focused, container });\n\n            if (next && isGrid) {\n                const nextElementX2 = Math.floor(\n                    next.getBoundingClientRect().right\n                );\n\n                if (nextElementX2 > focusedElementX1) {\n                    next = undefined;\n                }\n            } else if (!next && isCyclic) {\n                next = focusable.findLast({ container });\n            }\n        } else if (keyCode === Keys.Home) {\n            next = focusable.findFirst({ container });\n        } else if (keyCode === Keys.End) {\n            next = focusable.findLast({ container });\n        } else if (keyCode === Keys.PageUp) {\n            let prevElement = focusable.findPrev({\n                currentElement: focused,\n                container,\n            });\n            let pageUpElement: HTMLElement | null = null;\n\n            while (prevElement) {\n                pageUpElement = prevElement;\n\n                prevElement = isElementVerticallyVisibleInContainer(\n                    this._win,\n                    prevElement\n                )\n                    ? focusable.findPrev({\n                          currentElement: prevElement,\n                          container,\n                      })\n                    : null;\n            }\n\n            next = pageUpElement;\n\n            if (next) {\n                scrollIntoView(this._win, next, false);\n            }\n        } else if (keyCode === Keys.PageDown) {\n            let nextElement = focusable.findNext({\n                currentElement: focused,\n                container,\n            });\n            let pageDownElement: HTMLElement | null = null;\n\n            while (nextElement) {\n                pageDownElement = nextElement;\n\n                nextElement = isElementVerticallyVisibleInContainer(\n                    this._win,\n                    nextElement\n                )\n                    ? focusable.findNext({\n                          currentElement: nextElement,\n                          container,\n                      })\n                    : null;\n            }\n\n            next = pageDownElement;\n\n            if (next) {\n                scrollIntoView(this._win, next, true);\n            }\n        } else if (isGrid) {\n            const isBackward = keyCode === Keys.Up;\n            const ax1 = focusedElementX1;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const ay1 = Math.ceil(focusedElementRect!.top);\n            const ax2 = focusedElementX2;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const ay2 = Math.floor(focusedElementRect!.bottom);\n            let targetElement: HTMLElement | undefined;\n            let lastDistance: number | undefined;\n            let lastIntersection = 0;\n\n            focusable.findAll({\n                container,\n                currentElement: focused,\n                isBackward,\n                onElement: (el) => {\n                    // Find element which has maximal intersection with the focused element horizontally,\n                    // or the closest one.\n                    const rect = el.getBoundingClientRect();\n\n                    const bx1 = Math.ceil(rect.left);\n                    const by1 = Math.ceil(rect.top);\n                    const bx2 = Math.floor(rect.right);\n                    const by2 = Math.floor(rect.bottom);\n\n                    if (\n                        (isBackward && ay1 < by2) ||\n                        (!isBackward && ay2 > by1)\n                    ) {\n                        // Only consider elements which are below/above curretly focused.\n                        return true;\n                    }\n\n                    const xIntersectionWidth =\n                        Math.ceil(Math.min(ax2, bx2)) -\n                        Math.floor(Math.max(ax1, bx1));\n                    const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));\n\n                    if (\n                        xIntersectionWidth > 0 &&\n                        minWidth >= xIntersectionWidth\n                    ) {\n                        // Element intersects with the focused element on X axis.\n                        const intersection = xIntersectionWidth / minWidth;\n\n                        if (intersection > lastIntersection) {\n                            targetElement = el;\n                            lastIntersection = intersection;\n                        }\n                    } else if (lastIntersection === 0) {\n                        // If we didn't have intersection, try just the closest one.\n                        const distance = getDistance(\n                            ax1,\n                            ay1,\n                            ax2,\n                            ay2,\n                            bx1,\n                            by1,\n                            bx2,\n                            by2\n                        );\n\n                        if (\n                            lastDistance === undefined ||\n                            distance < lastDistance\n                        ) {\n                            lastDistance = distance;\n                            targetElement = el;\n                        }\n                    } else if (lastIntersection > 0) {\n                        // Element doesn't intersect, but we had intersection already, stop search.\n                        return false;\n                    }\n\n                    return true;\n                },\n            });\n\n            next = targetElement;\n        }\n\n        if (next) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n\n            nativeFocus(next);\n        }\n    };\n\n    private async _isIgnoredInput(\n        element: HTMLElement,\n        keyCode: number\n    ): Promise<boolean> {\n        if (element.getAttribute(\"aria-expanded\") === \"true\") {\n            return true;\n        }\n\n        if (matchesSelector(element, _inputSelector)) {\n            let selectionStart = 0;\n            let selectionEnd = 0;\n            let textLength = 0;\n            let asyncRet: Promise<boolean> | undefined;\n\n            if (element.tagName === \"INPUT\" || element.tagName === \"TEXTAREA\") {\n                const type = (element as HTMLInputElement).type;\n                const value = (element as HTMLInputElement).value;\n\n                textLength = (value || \"\").length;\n\n                if (type === \"email\" || type === \"number\") {\n                    // For these types Chromium doesn't provide selectionStart and selectionEnd.\n                    // Hence the ugly workaround to find if the caret position is changed with\n                    // the keypress.\n                    // TODO: Have a look at range, week, time, time, date, datetime-local.\n                    if (textLength) {\n                        const selection =\n                            element.ownerDocument.defaultView?.getSelection();\n\n                        if (selection) {\n                            const initialLength = selection.toString().length;\n                            const isBackward =\n                                keyCode === Keys.Left || keyCode === Keys.Up;\n\n                            selection.modify(\n                                \"extend\",\n                                isBackward ? \"backward\" : \"forward\",\n                                \"character\"\n                            );\n\n                            if (initialLength !== selection.toString().length) {\n                                // The caret is moved, so, we're not on the edge of the value.\n                                // Restore original selection.\n                                selection.modify(\n                                    \"extend\",\n                                    isBackward ? \"forward\" : \"backward\",\n                                    \"character\"\n                                );\n\n                                return true;\n                            } else {\n                                textLength = 0;\n                            }\n                        }\n                    }\n                } else {\n                    const selStart = (element as HTMLInputElement)\n                        .selectionStart;\n\n                    if (selStart === null) {\n                        // Do not ignore not text editable inputs like checkboxes and radios (but ignore hidden).\n                        return type === \"hidden\";\n                    }\n\n                    selectionStart = selStart || 0;\n                    selectionEnd =\n                        (element as HTMLInputElement).selectionEnd || 0;\n                }\n            } else if (element.contentEditable === \"true\") {\n                asyncRet = new (getPromise(this._win))((resolve) => {\n                    this._ignoredInputResolve = (value: boolean) => {\n                        delete this._ignoredInputResolve;\n                        resolve(value);\n                    };\n\n                    const win = this._win();\n\n                    if (this._ignoredInputTimer) {\n                        win.clearTimeout(this._ignoredInputTimer);\n                    }\n\n                    const {\n                        anchorNode: prevAnchorNode,\n                        focusNode: prevFocusNode,\n                        anchorOffset: prevAnchorOffset,\n                        focusOffset: prevFocusOffset,\n                    } = win.getSelection() || {};\n\n                    // Get selection gives incorrect value if we call it syncronously onKeyDown.\n                    this._ignoredInputTimer = win.setTimeout(() => {\n                        delete this._ignoredInputTimer;\n\n                        const {\n                            anchorNode,\n                            focusNode,\n                            anchorOffset,\n                            focusOffset,\n                        } = win.getSelection() || {};\n\n                        if (\n                            anchorNode !== prevAnchorNode ||\n                            focusNode !== prevFocusNode ||\n                            anchorOffset !== prevAnchorOffset ||\n                            focusOffset !== prevFocusOffset\n                        ) {\n                            this._ignoredInputResolve?.(false);\n                            return;\n                        }\n\n                        selectionStart = anchorOffset || 0;\n                        selectionEnd = focusOffset || 0;\n                        textLength = element.textContent?.length || 0;\n\n                        if (anchorNode && focusNode) {\n                            if (\n                                element.contains(anchorNode) &&\n                                element.contains(focusNode)\n                            ) {\n                                if (anchorNode !== element) {\n                                    let anchorFound = false;\n\n                                    const addOffsets = (\n                                        node: ChildNode\n                                    ): boolean => {\n                                        if (node === anchorNode) {\n                                            anchorFound = true;\n                                        } else if (node === focusNode) {\n                                            return true;\n                                        }\n\n                                        const nodeText = node.textContent;\n\n                                        if (nodeText && !node.firstChild) {\n                                            const len = nodeText.length;\n\n                                            if (anchorFound) {\n                                                if (focusNode !== anchorNode) {\n                                                    selectionEnd += len;\n                                                }\n                                            } else {\n                                                selectionStart += len;\n                                                selectionEnd += len;\n                                            }\n                                        }\n\n                                        let stop = false;\n\n                                        for (\n                                            let e = node.firstChild;\n                                            e && !stop;\n                                            e = e.nextSibling\n                                        ) {\n                                            stop = addOffsets(e);\n                                        }\n\n                                        return stop;\n                                    };\n\n                                    addOffsets(element);\n                                }\n                            }\n                        }\n\n                        this._ignoredInputResolve?.(true);\n                    }, 0);\n                });\n            }\n\n            if (asyncRet && !(await asyncRet)) {\n                return true;\n            }\n\n            if (selectionStart !== selectionEnd) {\n                return true;\n            }\n\n            if (\n                selectionStart > 0 &&\n                (keyCode === Keys.Left ||\n                    keyCode === Keys.Up ||\n                    keyCode === Keys.Home)\n            ) {\n                return true;\n            }\n\n            if (\n                selectionStart < textLength &&\n                (keyCode === Keys.Right ||\n                    keyCode === Keys.Down ||\n                    keyCode === Keys.End)\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getTabsterOnElement } from \"./Instance\";\nimport * as Types from \"./Types\";\nimport {\n    createElementTreeWalker,\n    getInstanceContext,\n    HTMLElementWithUID,\n    InstanceContext,\n    WeakHTMLElement,\n} from \"./Utils\";\n\nexport function observeMutations(\n    doc: HTMLDocument,\n    tabster: Types.TabsterCore,\n    updateTabsterByAttribute: (\n        tabster: Types.TabsterCore,\n        element: HTMLElementWithUID,\n        dispose?: boolean\n    ) => void,\n    syncState: boolean\n): () => void {\n    if (typeof MutationObserver === \"undefined\") {\n        return () => {\n            /* Noop */\n        };\n    }\n\n    const getWindow = tabster.getWindow;\n\n    let elementByUId: InstanceContext[\"elementByUId\"] | undefined;\n\n    const onMutation = (mutations: MutationRecord[]) => {\n        for (const mutation of mutations) {\n            const target = mutation.target;\n            const removed = mutation.removedNodes;\n            const added = mutation.addedNodes;\n\n            if (mutation.type === \"attributes\") {\n                if (mutation.attributeName === Types.TabsterAttributeName) {\n                    updateTabsterByAttribute(tabster, target as HTMLElement);\n                }\n            } else {\n                for (let i = 0; i < removed.length; i++) {\n                    updateTabsterElements(removed[i], true);\n                }\n\n                for (let i = 0; i < added.length; i++) {\n                    updateTabsterElements(added[i]);\n                }\n            }\n        }\n    };\n\n    function updateTabsterElements(node: Node, removed?: boolean): void {\n        if (!elementByUId) {\n            elementByUId = getInstanceContext(getWindow).elementByUId;\n        }\n\n        processNode(node as HTMLElement, removed);\n\n        const walker = createElementTreeWalker(\n            doc,\n            node,\n            (element: Node): number => {\n                return processNode(element as HTMLElement, removed);\n            }\n        );\n\n        if (walker) {\n            while (walker.nextNode()) {\n                /* Iterating for the sake of calling processNode() callback. */\n            }\n        }\n    }\n\n    function processNode(element: HTMLElement, removed?: boolean): number {\n        if (!element.getAttribute) {\n            // It might actually be a text node.\n            return NodeFilter.FILTER_SKIP;\n        }\n\n        const uid = (element as HTMLElementWithUID).__tabsterElementUID;\n\n        if (uid && elementByUId) {\n            if (removed) {\n                delete elementByUId[uid];\n            } else {\n                elementByUId[uid] ??= new WeakHTMLElement(getWindow, element);\n            }\n        }\n\n        if (\n            getTabsterOnElement(tabster, element) ||\n            element.hasAttribute(Types.TabsterAttributeName)\n        ) {\n            updateTabsterByAttribute(tabster, element, removed);\n        }\n\n        return NodeFilter.FILTER_SKIP;\n    }\n\n    const observer = new MutationObserver(onMutation);\n\n    if (syncState) {\n        updateTabsterElements(getWindow().document.body);\n    }\n\n    observer.observe(doc, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        attributeFilter: [Types.TabsterAttributeName],\n    });\n\n    return () => {\n        observer.disconnect();\n    };\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getTabsterOnElement } from \"../Instance\";\nimport * as Types from \"../Types\";\nimport {\n    documentContains,\n    getElementUId,\n    getPromise,\n    WeakHTMLElement,\n} from \"../Utils\";\nimport { Subscribable } from \"./Subscribable\";\n\nconst _conditionCheckTimeout = 100;\n\ninterface ObservedElementInfo {\n    element: WeakHTMLElement;\n    prevNames?: string[];\n}\n\ninterface ObservedWaiting {\n    timer?: number;\n    conditionTimer?: number;\n    request?: Types.ObservedElementAsyncRequest<HTMLElement | null>;\n    resolve?: (value: HTMLElement | null) => void;\n    reject?: () => void;\n}\n\nexport class ObservedElementAPI\n    extends Subscribable<HTMLElement, Types.ObservedElementDetails>\n    implements Types.ObservedElementAPI\n{\n    private _win: Types.GetWindow;\n    private _tabster: Types.TabsterCore;\n    private _initTimer: number | undefined;\n    private _waiting: Record<string, ObservedWaiting> = {};\n    private _lastRequestFocusId = 0;\n    private _observedById: { [uid: string]: ObservedElementInfo } = {};\n    private _observedByName: {\n        [name: string]: { [uid: string]: ObservedElementInfo };\n    } = {};\n    private _currentRequest:\n        | Types.ObservedElementAsyncRequest<HTMLElement | null>\n        | undefined;\n    private _currentRequestTimestamp = 0;\n\n    constructor(tabster: Types.TabsterCore) {\n        super();\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._initTimer = this._win().setTimeout(this._init, 0);\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n        this._tabster.focusedElement.subscribe(this._onFocus);\n    };\n\n    dispose(): void {\n        const win = this._win();\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        for (const key of Object.keys(this._waiting)) {\n            this._rejectWaiting(key);\n        }\n\n        this._observedById = {};\n        this._observedByName = {};\n    }\n\n    private _onFocus = (e: HTMLElement | undefined): void => {\n        if (e) {\n            const current = this._currentRequest;\n\n            if (current) {\n                const delta = Date.now() - this._currentRequestTimestamp;\n                const settleTime = 300;\n\n                if (delta >= settleTime) {\n                    // Giving some time for the focus to settle before\n                    // automatically cancelling the current request on focus change.\n                    delete this._currentRequest;\n                    current.cancel();\n                }\n            }\n        }\n    };\n\n    private _rejectWaiting(key: string, shouldResolve?: boolean): void {\n        const w = this._waiting[key];\n\n        if (w) {\n            const win = this._win();\n\n            if (w.timer) {\n                win.clearTimeout(w.timer);\n            }\n\n            if (w.conditionTimer) {\n                win.clearTimeout(w.conditionTimer);\n            }\n\n            if (!shouldResolve && w.reject) {\n                w.reject();\n            } else if (shouldResolve && w.resolve) {\n                w.resolve(null);\n            }\n\n            delete this._waiting[key];\n        }\n    }\n\n    private _isObservedNamesUpdated(cur: string[], prev?: string[]) {\n        if (!prev || cur.length !== prev.length) {\n            return true;\n        }\n        for (let i = 0; i < cur.length; ++i) {\n            if (cur[i] !== prev[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns existing element by observed name\n     *\n     * @param observedName An observed name\n     * @param accessibility Optionally, return only if the element is accessible or focusable\n     * @returns HTMLElement | null\n     */\n    getElement(\n        observedName: string,\n        accessibility?: Types.ObservedElementAccesibility\n    ): HTMLElement | null {\n        const o = this._observedByName[observedName];\n\n        if (o) {\n            for (const uid of Object.keys(o)) {\n                let el = o[uid].element.get() || null;\n                if (el) {\n                    if (\n                        (accessibility ===\n                            Types.ObservedElementAccesibilities.Accessible &&\n                            !this._tabster.focusable.isAccessible(el)) ||\n                        (accessibility ===\n                            Types.ObservedElementAccesibilities.Focusable &&\n                            !this._tabster.focusable.isFocusable(el, true))\n                    ) {\n                        el = null;\n                    }\n                } else {\n                    delete o[uid];\n                    delete this._observedById[uid];\n                }\n\n                return el;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Waits for the element to appear in the DOM and returns it.\n     *\n     * @param observedName An observed name\n     * @param timeout Wait no longer than this timeout\n     * @param accessibility Optionally, wait for the element to also become accessible or focusable before returning it\n     * @returns Promise<HTMLElement | null>\n     */\n    waitElement(\n        observedName: string,\n        timeout: number,\n        accessibility?: Types.ObservedElementAccesibility\n    ): Types.ObservedElementAsyncRequest<HTMLElement | null> {\n        const el = this.getElement(observedName, accessibility);\n\n        if (el) {\n            return {\n                result: getPromise(this._win).resolve(el),\n                cancel: () => {\n                    /**/\n                },\n            };\n        }\n\n        let prefix: string;\n\n        if (accessibility === Types.ObservedElementAccesibilities.Accessible) {\n            prefix = \"a\";\n        } else if (\n            accessibility === Types.ObservedElementAccesibilities.Focusable\n        ) {\n            prefix = \"f\";\n        } else {\n            prefix = \"_\";\n        }\n\n        const key = prefix + observedName;\n        let w = this._waiting[key];\n\n        if (w && w.request) {\n            return w.request;\n        }\n\n        w = this._waiting[key] = {\n            timer: this._win().setTimeout(() => {\n                if (w.conditionTimer) {\n                    this._win().clearTimeout(w.conditionTimer);\n                }\n\n                delete this._waiting[key];\n\n                if (w.resolve) {\n                    w.resolve(null);\n                }\n            }, timeout),\n        };\n\n        const promise = new (getPromise(this._win))<HTMLElement | null>(\n            (resolve, reject) => {\n                w.resolve = resolve;\n                w.reject = reject;\n            }\n        );\n\n        w.request = {\n            result: promise,\n            cancel: () => {\n                this._rejectWaiting(key, true);\n            },\n        };\n\n        if (accessibility && this.getElement(observedName)) {\n            // If the observed element is alread in DOM, but not accessible yet,\n            // we need to run the wait logic.\n            this._waitConditional(observedName);\n        }\n\n        return w.request;\n    }\n\n    requestFocus(\n        observedName: string,\n        timeout: number\n    ): Types.ObservedElementAsyncRequest<boolean> {\n        const requestId = ++this._lastRequestFocusId;\n        const currentRequestFocus = this._currentRequest;\n\n        if (currentRequestFocus) {\n            currentRequestFocus.cancel();\n        }\n\n        const request = this.waitElement(\n            observedName,\n            timeout,\n            Types.ObservedElementAccesibilities.Focusable\n        );\n\n        this._currentRequest = request;\n        this._currentRequestTimestamp = Date.now();\n\n        request.result.finally(() => {\n            if (this._currentRequest === request) {\n                delete this._currentRequest;\n            }\n        });\n\n        return {\n            result: request.result.then((element) =>\n                this._lastRequestFocusId === requestId && element\n                    ? this._tabster.focusedElement.focus(element, true)\n                    : false\n            ),\n            cancel: () => {\n                request.cancel();\n            },\n        };\n    }\n\n    onObservedElementUpdate = (element: HTMLElement): void => {\n        const observed = getTabsterOnElement(this._tabster, element)?.observed;\n        const uid = getElementUId(this._win, element);\n        let info: ObservedElementInfo | undefined = this._observedById[uid];\n\n        if (observed && documentContains(element.ownerDocument, element)) {\n            if (!info) {\n                info = this._observedById[uid] = {\n                    element: new WeakHTMLElement(this._win, element),\n                };\n            }\n\n            observed.names.sort();\n            const observedNames = observed.names;\n            const prevNames = info.prevNames; // prevNames are already sorted\n\n            if (this._isObservedNamesUpdated(observedNames, prevNames)) {\n                if (prevNames) {\n                    prevNames.forEach((prevName) => {\n                        const obn = this._observedByName[prevName];\n\n                        if (obn && obn[uid]) {\n                            if (Object.keys(obn).length > 1) {\n                                delete obn[uid];\n                            } else {\n                                delete this._observedByName[prevName];\n                            }\n                        }\n                    });\n                }\n\n                info.prevNames = observedNames;\n            }\n\n            observedNames.forEach((observedName) => {\n                let obn = this._observedByName[observedName];\n\n                if (!obn) {\n                    obn = this._observedByName[observedName] = {};\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                obn[uid] = info!;\n\n                this._waitConditional(observedName);\n            });\n        } else if (info) {\n            const prevNames = info.prevNames;\n\n            if (prevNames) {\n                prevNames.forEach((prevName) => {\n                    const obn = this._observedByName[prevName];\n\n                    if (obn && obn[uid]) {\n                        if (Object.keys(obn).length > 1) {\n                            delete obn[uid];\n                        } else {\n                            delete this._observedByName[prevName];\n                        }\n                    }\n                });\n            }\n\n            delete this._observedById[uid];\n        }\n    };\n\n    private _waitConditional(observedName: string): void {\n        const waitingElementKey = \"_\" + observedName;\n        const waitingAccessibleElementKey = \"a\" + observedName;\n        const waitingFocusableElementKey = \"f\" + observedName;\n        const waitingElement = this._waiting[waitingElementKey];\n        const waitingAccessibleElement =\n            this._waiting[waitingAccessibleElementKey];\n        const waitingFocusableElement =\n            this._waiting[waitingFocusableElementKey];\n        const win = this._win();\n\n        const resolve = (\n            element: HTMLElement,\n            key: string,\n            waiting: ObservedWaiting,\n            accessibility: Types.ObservedElementAccesibility\n        ) => {\n            const observed = getTabsterOnElement(\n                this._tabster,\n                element\n            )?.observed;\n\n            if (!observed || !observed.names.includes(observedName)) {\n                return;\n            }\n\n            if (waiting.timer) {\n                win.clearTimeout(waiting.timer);\n            }\n\n            delete this._waiting[key];\n\n            if (waiting.resolve) {\n                waiting.resolve(element);\n            }\n\n            this.trigger(element, {\n                names: [observedName],\n                details: observed.details,\n                accessibility,\n            });\n        };\n\n        if (waitingElement) {\n            const element = this.getElement(observedName);\n\n            if (element && documentContains(element.ownerDocument, element)) {\n                resolve(\n                    element,\n                    waitingElementKey,\n                    waitingElement,\n                    Types.ObservedElementAccesibilities.Any\n                );\n            }\n        }\n\n        if (\n            waitingAccessibleElement &&\n            !waitingAccessibleElement.conditionTimer\n        ) {\n            const resolveAccessible = () => {\n                const element = this.getElement(observedName);\n\n                if (\n                    element &&\n                    documentContains(element.ownerDocument, element) &&\n                    this._tabster.focusable.isAccessible(element)\n                ) {\n                    resolve(\n                        element,\n                        waitingAccessibleElementKey,\n                        waitingAccessibleElement,\n                        Types.ObservedElementAccesibilities.Accessible\n                    );\n                } else {\n                    waitingAccessibleElement.conditionTimer = win.setTimeout(\n                        resolveAccessible,\n                        _conditionCheckTimeout\n                    );\n                }\n            };\n\n            resolveAccessible();\n        }\n\n        if (\n            waitingFocusableElement &&\n            !waitingFocusableElement.conditionTimer\n        ) {\n            const resolveFocusable = () => {\n                const element = this.getElement(observedName);\n\n                if (\n                    element &&\n                    documentContains(element.ownerDocument, element) &&\n                    this._tabster.focusable.isFocusable(element, true)\n                ) {\n                    resolve(\n                        element,\n                        waitingFocusableElementKey,\n                        waitingFocusableElement,\n                        Types.ObservedElementAccesibilities.Focusable\n                    );\n                } else {\n                    waitingFocusableElement.conditionTimer = win.setTimeout(\n                        resolveFocusable,\n                        _conditionCheckTimeout\n                    );\n                }\n            };\n\n            resolveFocusable();\n        }\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { getTabsterOnElement } from \"./Instance\";\nimport * as Types from \"./Types\";\nimport { getBoundingRect } from \"./Utils\";\n\ninterface WindowWithOutlineStyle extends Window {\n    __tabsterOutline?: {\n        style?: HTMLStyleElement;\n        elements?: Types.OutlineElements;\n    };\n}\n\nconst defaultProps: Types.OutlineProps = {\n    areaClass: \"tabster-focus-outline-area\",\n    outlineClass: \"tabster-focus-outline\",\n    outlineColor: \"#ff4500\",\n    outlineWidth: 2,\n    zIndex: 2147483647,\n};\n\nlet _props: Types.OutlineProps = defaultProps;\n\nclass OutlinePosition {\n    public left: number;\n    public top: number;\n    public right: number;\n    public bottom: number;\n\n    constructor(left: number, top: number, right: number, bottom: number) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n\n    public equalsTo(other: OutlinePosition): boolean {\n        return (\n            this.left === other.left &&\n            this.top === other.top &&\n            this.right === other.right &&\n            this.bottom === other.bottom\n        );\n    }\n\n    public clone(): OutlinePosition {\n        return new OutlinePosition(\n            this.left,\n            this.top,\n            this.right,\n            this.bottom\n        );\n    }\n}\n\nexport class OutlineAPI implements Types.OutlineAPI {\n    private _tabster: Types.TabsterCore;\n    private _win: Types.GetWindow;\n    private _initTimer: number | undefined;\n    private _updateTimer: number | undefined;\n    private _outlinedElement: HTMLElement | undefined;\n    private _curPos: OutlinePosition | undefined;\n    private _isVisible = false;\n    private _curOutlineElements: Types.OutlineElements | undefined;\n    private _allOutlineElements: Types.OutlineElements[] = [];\n    private _fullScreenElement: HTMLElement | undefined;\n    private _fullScreenEventName: string | undefined;\n    private _fullScreenElementName: string | undefined;\n\n    constructor(tabster: Types.TabsterCore) {\n        this._tabster = tabster;\n        this._win = tabster.getWindow;\n        this._initTimer = this._win().setTimeout(this._init, 0);\n\n        if (typeof document !== \"undefined\") {\n            if (\"onfullscreenchange\" in document) {\n                this._fullScreenEventName = \"fullscreenchange\";\n                this._fullScreenElementName = \"fullscreenElement\";\n            } else if (\"onwebkitfullscreenchange\" in document) {\n                this._fullScreenEventName = \"webkitfullscreenchange\";\n                this._fullScreenElementName = \"webkitFullscreenElement\";\n            } else if (\"onmozfullscreenchange\" in document) {\n                this._fullScreenEventName = \"mozfullscreenchange\";\n                this._fullScreenElementName = \"mozFullScreenElement\";\n            } else if (\"onmsfullscreenchange\" in document) {\n                this._fullScreenEventName = \"msfullscreenchange\";\n                this._fullScreenElementName = \"msFullscreenElement\";\n            }\n        }\n    }\n\n    private _init = (): void => {\n        this._initTimer = undefined;\n\n        this._tabster.keyboardNavigation.subscribe(\n            this._onKeyboardNavigationStateChanged\n        );\n        this._tabster.focusedElement.subscribe(this._onFocus);\n\n        const win = this._win();\n\n        win.addEventListener(\"scroll\", this._onScroll, true); // Capture!\n\n        if (this._fullScreenEventName) {\n            win.document.addEventListener(\n                this._fullScreenEventName,\n                this._onFullScreenChanged\n            );\n        }\n    };\n\n    setup(props?: Partial<Types.OutlineProps>): void {\n        _props = { ..._props, ...props };\n\n        const win = this._win() as WindowWithOutlineStyle;\n\n        if (!win.__tabsterOutline) {\n            win.__tabsterOutline = {};\n        }\n\n        if (!win.__tabsterOutline.style) {\n            win.__tabsterOutline.style = appendStyles(win.document, _props);\n        }\n\n        if (!props || !props.areaClass) {\n            win.document.body.classList.add(defaultProps.areaClass);\n        } else {\n            win.document.body.classList.remove(defaultProps.areaClass);\n        }\n    }\n\n    dispose(): void {\n        const win = this._win();\n\n        if (this._initTimer) {\n            win.clearTimeout(this._initTimer);\n            this._initTimer = undefined;\n        }\n\n        if (this._updateTimer) {\n            win.clearTimeout(this._updateTimer);\n            this._updateTimer = undefined;\n        }\n\n        this._tabster.keyboardNavigation.unsubscribe(\n            this._onKeyboardNavigationStateChanged\n        );\n        this._tabster.focusedElement.unsubscribe(this._onFocus);\n\n        win.removeEventListener(\"scroll\", this._onScroll, true);\n\n        if (this._fullScreenEventName) {\n            win.document.removeEventListener(\n                this._fullScreenEventName,\n                this._onFullScreenChanged\n            );\n        }\n\n        this._allOutlineElements.forEach((outlineElements) =>\n            this._removeDOM(outlineElements.container)\n        );\n        this._allOutlineElements = [];\n\n        delete this._outlinedElement;\n        delete this._curPos;\n        delete this._curOutlineElements;\n        delete this._fullScreenElement;\n    }\n\n    private _onFullScreenChanged = (e: Event): void => {\n        if (!this._fullScreenElementName || !e.target) {\n            return;\n        }\n\n        const target = (e.target as Document).body || (e.target as HTMLElement);\n        const outlineElements = this._getDOM(target);\n\n        if (target.ownerDocument && outlineElements) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const fsElement: HTMLElement | null = (target.ownerDocument as any)[\n                this._fullScreenElementName\n            ];\n\n            if (fsElement) {\n                fsElement.appendChild(outlineElements.container);\n                this._fullScreenElement = fsElement;\n            } else {\n                target.ownerDocument.body.appendChild(\n                    outlineElements.container\n                );\n                this._fullScreenElement = undefined;\n            }\n        }\n    };\n\n    private _onKeyboardNavigationStateChanged = (): void => {\n        this._onFocus(this._tabster.focusedElement.getFocusedElement());\n    };\n\n    private _shouldShowCustomOutline(element: HTMLElement): boolean {\n        const tabsterOnElement = getTabsterOnElement(this._tabster, element);\n\n        if (\n            tabsterOnElement &&\n            tabsterOnElement.outline &&\n            tabsterOnElement.outline.isIgnored\n        ) {\n            return false;\n        }\n\n        for (let i: HTMLElement | null = element; i; i = i.parentElement) {\n            if (i.classList && i.classList.contains(_props.areaClass)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _onFocus = (e: HTMLElement | undefined): void => {\n        if (!this._updateElement(e) && this._isVisible) {\n            this._setVisibility(false);\n        }\n    };\n\n    private _updateElement(e: HTMLElement | undefined): boolean {\n        this._outlinedElement = undefined;\n\n        if (this._updateTimer) {\n            this._win().clearTimeout(this._updateTimer);\n            this._updateTimer = undefined;\n        }\n\n        this._curPos = undefined;\n\n        if (!this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n            return false;\n        }\n\n        if (e) {\n            // TODO: It's hard (and not necessary) to come up with every possible\n            // condition when there should be no outline, it's better to add an\n            // API to customize the ignores.\n            if (e.tagName === \"INPUT\") {\n                const inputType = (e as HTMLInputElement).type;\n                const outlinedInputTypes = {\n                    button: true,\n                    checkbox: true,\n                    file: true,\n                    image: true,\n                    radio: true,\n                    range: true,\n                    reset: true,\n                    submit: true,\n                };\n\n                if (!(inputType in outlinedInputTypes)) {\n                    return false;\n                }\n            } else if (\n                e.tagName === \"TEXTAREA\" ||\n                e.contentEditable === \"true\" ||\n                e.tagName === \"IFRAME\"\n            ) {\n                return false;\n            }\n\n            if (!this._shouldShowCustomOutline(e)) {\n                return false;\n            }\n\n            if (this._tabster.keyboardNavigation.isNavigatingWithKeyboard()) {\n                this._outlinedElement = e;\n                this._updateOutline();\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    private _onScroll = (e: UIEvent): void => {\n        if (\n            !this._outlinedElement ||\n            !OutlineAPI._isParentChild(\n                e.target as HTMLElement,\n                this._outlinedElement\n            )\n        ) {\n            return;\n        }\n\n        this._curPos = undefined;\n\n        this._setOutlinePosition();\n    };\n\n    private _updateOutline(): void {\n        this._setOutlinePosition();\n\n        if (this._updateTimer) {\n            this._win().clearTimeout(this._updateTimer);\n            this._updateTimer = undefined;\n        }\n\n        if (!this._outlinedElement) {\n            return;\n        }\n\n        this._updateTimer = this._win().setTimeout(() => {\n            this._updateTimer = undefined;\n            this._updateOutline();\n        }, 30);\n    }\n\n    private _setVisibility(visible: boolean): void {\n        this._isVisible = visible;\n\n        if (this._curOutlineElements) {\n            if (visible) {\n                this._curOutlineElements.container.classList.add(\n                    `${_props.outlineClass}_visible`\n                );\n            } else {\n                this._curOutlineElements.container.classList.remove(\n                    `${_props.outlineClass}_visible`\n                );\n                this._curPos = undefined;\n            }\n        }\n    }\n\n    private _setOutlinePosition(): void {\n        if (!this._outlinedElement) {\n            return;\n        }\n\n        let boundingRect = getBoundingRect(this._win, this._outlinedElement);\n\n        const position = new OutlinePosition(\n            boundingRect.left,\n            boundingRect.top,\n            boundingRect.right,\n            boundingRect.bottom\n        );\n\n        if (this._curPos && position.equalsTo(this._curPos)) {\n            return;\n        }\n\n        const outlineElements = this._getDOM(this._outlinedElement);\n        const win =\n            this._outlinedElement.ownerDocument &&\n            this._outlinedElement.ownerDocument.defaultView;\n\n        if (!outlineElements || !win) {\n            return;\n        }\n\n        if (this._curOutlineElements !== outlineElements) {\n            this._setVisibility(false);\n            this._curOutlineElements = outlineElements;\n        }\n\n        this._curPos = position;\n\n        const p = position.clone();\n        let hasAbsolutePositionedParent = false;\n        let hasFixedPositionedParent = false;\n\n        const container = outlineElements.container;\n        const scrollingElement =\n            container &&\n            container.ownerDocument &&\n            (container.ownerDocument.scrollingElement as HTMLElement);\n\n        if (!scrollingElement) {\n            return;\n        }\n\n        for (\n            let parent = this._outlinedElement.parentElement;\n            parent;\n            parent = parent.parentElement\n        ) {\n            // The element might be partially visible within its scrollable parent,\n            // reduce the bounding rect if this is the case.\n\n            if (parent === this._fullScreenElement) {\n                break;\n            }\n\n            boundingRect = getBoundingRect(this._win, parent);\n\n            const win =\n                parent.ownerDocument && parent.ownerDocument.defaultView;\n\n            if (!win) {\n                return;\n            }\n\n            const computedStyle = win.getComputedStyle(parent);\n            const position = computedStyle.position;\n\n            if (position === \"absolute\") {\n                hasAbsolutePositionedParent = true;\n            } else if (position === \"fixed\" || position === \"sticky\") {\n                hasFixedPositionedParent = true;\n            }\n\n            if (computedStyle.overflow === \"visible\") {\n                continue;\n            }\n\n            if (\n                (!hasAbsolutePositionedParent && !hasFixedPositionedParent) ||\n                computedStyle.overflow === \"hidden\"\n            ) {\n                if (boundingRect.left > p.left) {\n                    p.left = boundingRect.left;\n                }\n                if (boundingRect.top > p.top) {\n                    p.top = boundingRect.top;\n                }\n                if (boundingRect.right < p.right) {\n                    p.right = boundingRect.right;\n                }\n                if (boundingRect.bottom < p.bottom) {\n                    p.bottom = boundingRect.bottom;\n                }\n            }\n        }\n\n        const allRect = getBoundingRect(this._win, scrollingElement);\n        const allWidth = allRect.left + allRect.right;\n        const allHeight = allRect.top + allRect.bottom;\n        const ow = _props.outlineWidth;\n\n        p.left = p.left > ow ? p.left - ow : 0;\n        p.top = p.top > ow ? p.top - ow : 0;\n        p.right = p.right < allWidth - ow ? p.right + ow : allWidth;\n        p.bottom = p.bottom < allHeight - ow ? p.bottom + ow : allHeight;\n\n        const width = p.right - p.left;\n        const height = p.bottom - p.top;\n\n        if (width > ow * 2 && height > ow * 2) {\n            const leftBorderNode = outlineElements.left;\n            const topBorderNode = outlineElements.top;\n            const rightBorderNode = outlineElements.right;\n            const bottomBorderNode = outlineElements.bottom;\n            const sx =\n                this._fullScreenElement || hasFixedPositionedParent\n                    ? 0\n                    : win.pageXOffset;\n            const sy =\n                this._fullScreenElement || hasFixedPositionedParent\n                    ? 0\n                    : win.pageYOffset;\n\n            container.style.position = hasFixedPositionedParent\n                ? \"fixed\"\n                : \"absolute\";\n\n            container.style.background = _props.outlineColor;\n\n            leftBorderNode.style.width =\n                rightBorderNode.style.width =\n                topBorderNode.style.height =\n                bottomBorderNode.style.height =\n                    _props.outlineWidth + \"px\";\n\n            leftBorderNode.style.left =\n                topBorderNode.style.left =\n                bottomBorderNode.style.left =\n                    p.left + sx + \"px\";\n            rightBorderNode.style.left = p.left + sx + width - ow + \"px\";\n\n            leftBorderNode.style.top =\n                rightBorderNode.style.top =\n                topBorderNode.style.top =\n                    p.top + sy + \"px\";\n            bottomBorderNode.style.top = p.top + sy + height - ow + \"px\";\n\n            leftBorderNode.style.height = rightBorderNode.style.height =\n                height + \"px\";\n\n            topBorderNode.style.width = bottomBorderNode.style.width =\n                width + \"px\";\n\n            this._setVisibility(true);\n        } else {\n            this._setVisibility(false);\n        }\n    }\n\n    private _getDOM(\n        contextElement: HTMLElement\n    ): Types.OutlineElements | undefined {\n        const doc = contextElement.ownerDocument;\n        const win = (doc && doc.defaultView) as WindowWithOutlineStyle;\n\n        if (!doc || !win || !win.__tabsterOutline) {\n            return undefined;\n        }\n\n        if (!win.__tabsterOutline.style) {\n            win.__tabsterOutline.style = appendStyles(doc, _props);\n        }\n\n        if (!win.__tabsterOutline.elements) {\n            const outlineElements: Types.OutlineElements = {\n                container: doc.createElement(\"div\"),\n                left: doc.createElement(\"div\"),\n                top: doc.createElement(\"div\"),\n                right: doc.createElement(\"div\"),\n                bottom: doc.createElement(\"div\"),\n            };\n\n            outlineElements.container.className = _props.outlineClass;\n            outlineElements.left.className = `${_props.outlineClass}__left`;\n            outlineElements.top.className = `${_props.outlineClass}__top`;\n            outlineElements.right.className = `${_props.outlineClass}__right`;\n            outlineElements.bottom.className = `${_props.outlineClass}__bottom`;\n\n            outlineElements.container.appendChild(outlineElements.left);\n            outlineElements.container.appendChild(outlineElements.top);\n            outlineElements.container.appendChild(outlineElements.right);\n            outlineElements.container.appendChild(outlineElements.bottom);\n\n            doc.body.appendChild(outlineElements.container);\n\n            win.__tabsterOutline.elements = outlineElements;\n\n            // TODO: Make a garbage collector to remove the references\n            // to the outlines which are nowhere in the DOM anymore.\n            this._allOutlineElements.push(outlineElements);\n        }\n\n        return win.__tabsterOutline.elements;\n    }\n\n    private _removeDOM(contextElement: HTMLElement): void {\n        const win = (contextElement.ownerDocument &&\n            contextElement.ownerDocument.defaultView) as WindowWithOutlineStyle;\n        const outline = win && win.__tabsterOutline;\n\n        if (!outline) {\n            return;\n        }\n\n        if (outline.style && outline.style.parentNode) {\n            outline.style.parentNode.removeChild(outline.style);\n\n            delete outline.style;\n        }\n\n        const outlineElements = outline && outline.elements;\n\n        if (outlineElements) {\n            if (outlineElements.container.parentNode) {\n                outlineElements.container.parentNode.removeChild(\n                    outlineElements.container\n                );\n            }\n\n            delete outline.elements;\n        }\n    }\n\n    private static _isParentChild(\n        parent: HTMLElement,\n        child: HTMLElement\n    ): boolean {\n        return (\n            child === parent ||\n            // tslint:disable-next-line:no-bitwise\n            !!(\n                parent.compareDocumentPosition(child) &\n                document.DOCUMENT_POSITION_CONTAINED_BY\n            )\n        );\n    }\n}\n\nfunction appendStyles(\n    document: HTMLDocument,\n    props: Types.OutlineProps\n): HTMLStyleElement {\n    const style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    style.appendChild(document.createTextNode(getOutlineStyles(props)));\n    document.head.appendChild(style);\n    return style;\n}\n\nfunction getOutlineStyles(props: Types.OutlineProps): string {\n    return `\n.${props.areaClass} *, .${props.areaClass} *:focus {\noutline: none !important;\n}\n\n.${props.outlineClass} {\ndisplay: none;\nposition: absolute;\nwidth: 0;\nheight: 0;\nleft: 0;\ntop: 0;\nz-index: ${props.zIndex};\n}\n\n.${props.outlineClass}.${props.outlineClass}_visible {\ndisplay: block;\n}\n\n.${props.outlineClass}__left,\n.${props.outlineClass}__top,\n.${props.outlineClass}__right,\n.${props.outlineClass}__bottom {\nposition: absolute;\nbackground: inherit;\n}`;\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as Types from \"./Types\";\n\n/**\n * Allows default or user focus behaviour on the DOM subtree\n * i.e. Tabster will not control focus events within an uncontrolled area\n */\nexport class UncontrolledAPI implements Types.UncontrolledAPI {\n    constructor() {\n        /**/\n    }\n}\n","/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CrossOriginAPI } from \"./CrossOrigin\";\nimport { DeloserAPI } from \"./Deloser\";\nimport { FocusableAPI } from \"./Focusable\";\nimport { FocusedElementState } from \"./State/FocusedElement\";\nimport { GroupperAPI } from \"./Groupper\";\nimport { getTabsterOnElement, updateTabsterByAttribute } from \"./Instance\";\nimport { KeyboardNavigationState } from \"./State/KeyboardNavigation\";\nimport { ModalizerAPI } from \"./Modalizer\";\nimport { MoverAPI } from \"./Mover\";\nimport { observeMutations } from \"./MutationEvent\";\nimport { ObservedElementAPI } from \"./State/ObservedElement\";\nimport { OutlineAPI } from \"./Outline\";\nimport { RootAPI, WindowWithTabsterInstance } from \"./Root\";\nimport * as Types from \"./Types\";\nimport { UncontrolledAPI } from \"./Uncontrolled\";\nimport {\n    cleanupFakeWeakRefs,\n    clearElementCache,\n    createElementTreeWalker,\n    createWeakMap,\n    disposeInstanceContext,\n    startFakeWeakRefsCleanup,\n    stopFakeWeakRefsCleanupAndClearStorage,\n} from \"./Utils\";\n\nexport { Types };\n\nclass Tabster implements Types.Tabster {\n    keyboardNavigation: Types.KeyboardNavigationState;\n    focusedElement: Types.FocusedElementState;\n    focusable: Types.FocusableAPI;\n    root: Types.RootAPI;\n    uncontrolled: Types.UncontrolledAPI;\n    core: Types.TabsterCore;\n\n    constructor(tabster: Types.TabsterCore) {\n        this.keyboardNavigation = tabster.keyboardNavigation;\n        this.focusedElement = tabster.focusedElement;\n        this.focusable = tabster.focusable;\n        this.root = tabster.root;\n        this.uncontrolled = tabster.uncontrolled;\n        this.core = tabster;\n    }\n}\n\n/**\n * Extends Window to include an internal Tabster instance.\n */\nclass TabsterCore implements Types.TabsterCore {\n    private _storage: WeakMap<HTMLElement, Types.TabsterElementStorage>;\n    private _unobserve: (() => void) | undefined;\n    private _win: WindowWithTabsterInstance | undefined;\n    private _forgetMemorizedTimer: number | undefined;\n    private _forgetMemorizedElements: HTMLElement[] = [];\n    private _wrappers: Set<Tabster> = new Set<Tabster>();\n\n    _version: string = __VERSION__;\n    _noop = false;\n    controlTab: boolean;\n    rootDummyInputs: boolean;\n\n    // Core APIs\n    keyboardNavigation: Types.KeyboardNavigationState;\n    focusedElement: Types.FocusedElementState;\n    focusable: Types.FocusableAPI;\n    root: Types.RootAPI;\n    uncontrolled: Types.UncontrolledAPI;\n    internal: Types.InternalAPI;\n\n    // Extended APIs\n    groupper?: Types.GroupperAPI;\n    mover?: Types.MoverAPI;\n    outline?: Types.OutlineAPI;\n    deloser?: Types.DeloserAPI;\n    modalizer?: Types.ModalizerAPI;\n    observedElement?: Types.ObservedElementAPI;\n    crossOrigin?: Types.CrossOriginAPI;\n\n    constructor(win: Window, props?: Types.TabsterCoreProps) {\n        this._storage = createWeakMap(win);\n        this._win = win;\n\n        const getWindow = this.getWindow;\n\n        this.keyboardNavigation = new KeyboardNavigationState(getWindow);\n        this.focusedElement = new FocusedElementState(this, getWindow);\n        this.focusable = new FocusableAPI(this, getWindow);\n        this.root = new RootAPI(this, props?.autoRoot);\n        this.uncontrolled = new UncontrolledAPI();\n        this.controlTab = props?.controlTab ?? true;\n        this.rootDummyInputs = !!props?.rootDummyInputs;\n\n        this.internal = {\n            stopObserver: (): void => {\n                if (this._unobserve) {\n                    this._unobserve();\n                    delete this._unobserve;\n                }\n            },\n\n            resumeObserver: (syncState: boolean): void => {\n                if (!this._unobserve) {\n                    const doc = getWindow().document;\n                    this._unobserve = observeMutations(\n                        doc,\n                        this,\n                        updateTabsterByAttribute,\n                        syncState\n                    );\n                }\n            },\n        };\n\n        this.internal.resumeObserver(false);\n\n        startFakeWeakRefsCleanup(getWindow);\n    }\n\n    createTabster(noRefCount?: boolean): Types.Tabster {\n        const wrapper = new Tabster(this);\n\n        if (!noRefCount) {\n            this._wrappers.add(wrapper);\n        }\n\n        return wrapper;\n    }\n\n    disposeTabster(wrapper: Types.Tabster, allInstances?: boolean) {\n        if (allInstances) {\n            this._wrappers.clear();\n        } else {\n            this._wrappers.delete(wrapper);\n        }\n\n        if (this._wrappers.size === 0) {\n            this.dispose();\n        }\n    }\n\n    dispose(): void {\n        this.internal.stopObserver();\n\n        const win = this._win;\n\n        this._forgetMemorizedElements = [];\n\n        if (win && this._forgetMemorizedTimer) {\n            win.clearTimeout(this._forgetMemorizedTimer);\n            delete this._forgetMemorizedTimer;\n        }\n\n        this.outline?.dispose();\n        this.crossOrigin?.dispose();\n        this.deloser?.dispose();\n        this.groupper?.dispose();\n        this.mover?.dispose();\n        this.modalizer?.dispose();\n        this.observedElement?.dispose();\n\n        this.keyboardNavigation.dispose();\n        this.focusable.dispose();\n        this.focusedElement.dispose();\n        this.root.dispose();\n\n        stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);\n        clearElementCache(this.getWindow);\n\n        this._storage = new WeakMap();\n        this._wrappers.clear();\n\n        if (win) {\n            disposeInstanceContext(win);\n            delete win.__tabsterInstance;\n            delete this._win;\n        }\n    }\n\n    storageEntry(\n        element: HTMLElement,\n        addremove?: boolean\n    ): Types.TabsterElementStorageEntry | undefined {\n        const storage = this._storage;\n        let entry = storage.get(element);\n\n        if (entry) {\n            if (addremove === false && Object.keys(entry).length === 0) {\n                storage.delete(element);\n            }\n        } else if (addremove === true) {\n            entry = {};\n            storage.set(element, entry);\n        }\n\n        return entry;\n    }\n\n    getWindow = () => {\n        if (!this._win) {\n            throw new Error(\"Using disposed Tabster.\");\n        }\n\n        return this._win;\n    };\n\n    forceCleanup(): void {\n        if (!this._win) {\n            return;\n        }\n\n        this._forgetMemorizedElements.push(this._win.document.body);\n\n        if (this._forgetMemorizedTimer) {\n            return;\n        }\n\n        this._forgetMemorizedTimer = this._win.setTimeout(() => {\n            delete this._forgetMemorizedTimer;\n\n            for (\n                let el: HTMLElement | undefined =\n                    this._forgetMemorizedElements.shift();\n                el;\n                el = this._forgetMemorizedElements.shift()\n            ) {\n                clearElementCache(this.getWindow, el);\n                FocusedElementState.forgetMemorized(this.focusedElement, el);\n            }\n        }, 0);\n\n        cleanupFakeWeakRefs(this.getWindow, true);\n    }\n}\n\nexport function forceCleanup(tabster: Types.Tabster): void {\n    // The only legit case for calling this method is when you've completely removed\n    // the application DOM and not going to add the new one for a while.\n    const tabsterCore = tabster.core;\n    tabsterCore.forceCleanup();\n}\n\n/**\n * Creates an instance of Tabster, returns the current window instance if it already exists.\n */\nexport function createTabster(\n    win: Window,\n    props?: Types.TabsterCoreProps\n): Types.Tabster {\n    let tabster = getCurrentTabster(win as WindowWithTabsterInstance);\n\n    if (tabster) {\n        return tabster.createTabster();\n    }\n\n    tabster = new TabsterCore(win, props);\n    (win as WindowWithTabsterInstance).__tabsterInstance = tabster;\n    return tabster.createTabster();\n}\n\n/**\n * Returns an instance of Tabster if it was created before or null.\n */\nexport function getTabster(win: Window): Types.Tabster | null {\n    const tabster = getCurrentTabster(win as WindowWithTabsterInstance);\n\n    return tabster ? tabster.createTabster(true) : null;\n}\n\n/**\n * Creates a new groupper instance or returns an existing one\n * @param tabster Tabster instance\n */\nexport function getGroupper(tabster: Types.Tabster): Types.GroupperAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.groupper) {\n        tabsterCore.groupper = new GroupperAPI(\n            tabsterCore,\n            tabsterCore.getWindow\n        );\n    }\n\n    return tabsterCore.groupper;\n}\n\n/**\n * Creates a new mover instance or returns an existing one\n * @param tabster Tabster instance\n */\nexport function getMover(tabster: Types.Tabster): Types.MoverAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.mover) {\n        tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);\n    }\n\n    return tabsterCore.mover;\n}\n\nexport function getOutline(tabster: Types.Tabster): Types.OutlineAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.outline) {\n        tabsterCore.outline = new OutlineAPI(tabsterCore);\n    }\n\n    return tabsterCore.outline;\n}\n\n/**\n * Creates a new new deloser instance or returns an existing one\n * @param tabster Tabster instance\n * @param props Deloser props\n */\nexport function getDeloser(\n    tabster: Types.Tabster,\n    props?: { autoDeloser: Types.DeloserProps }\n): Types.DeloserAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.deloser) {\n        tabsterCore.deloser = new DeloserAPI(tabsterCore, props);\n    }\n\n    return tabsterCore.deloser;\n}\n\n/**\n * Creates a new modalizer instance or returns an existing one\n * @param tabster Tabster instance\n */\nexport function getModalizer(tabster: Types.Tabster): Types.ModalizerAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.modalizer) {\n        tabsterCore.modalizer = new ModalizerAPI(tabsterCore);\n    }\n\n    return tabsterCore.modalizer;\n}\n\nexport function getObservedElement(\n    tabster: Types.Tabster\n): Types.ObservedElementAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.observedElement) {\n        tabsterCore.observedElement = new ObservedElementAPI(tabsterCore);\n    }\n\n    return tabsterCore.observedElement;\n}\n\nexport function getCrossOrigin(tabster: Types.Tabster): Types.CrossOriginAPI {\n    const tabsterCore = tabster.core;\n    if (!tabsterCore.crossOrigin) {\n        getDeloser(tabster);\n        getModalizer(tabster);\n        getMover(tabster);\n        getGroupper(tabster);\n        getOutline(tabster);\n        getObservedElement(tabster);\n        tabsterCore.crossOrigin = new CrossOriginAPI(tabsterCore);\n    }\n\n    return tabsterCore.crossOrigin;\n}\n\nexport function getInternal(tabster: Types.Tabster): Types.InternalAPI {\n    const tabsterCore = tabster.core;\n    return tabsterCore.internal;\n}\n\nexport function disposeTabster(\n    tabster: Types.Tabster,\n    allInstances?: boolean\n): void {\n    tabster.core.disposeTabster(tabster, allInstances);\n}\n\nexport function getTabsterAttribute(\n    props: Types.TabsterAttributeProps\n): Types.TabsterDOMAttribute;\nexport function getTabsterAttribute(\n    props: Types.TabsterAttributeProps,\n    plain: true\n): string;\nexport function getTabsterAttribute(\n    props: Types.TabsterAttributeProps,\n    plain?: true\n): Types.TabsterDOMAttribute | string {\n    const attr = JSON.stringify(props);\n\n    if (plain === true) {\n        return attr;\n    }\n\n    return {\n        [Types.TabsterAttributeName]: attr,\n    };\n}\n\n/**\n * Sets or updates Tabster attribute of the element.\n * @param element an element to set data-tabster attribute on.\n * @param newProps new Tabster props to set.\n * @param update if true, newProps will be merged with the existing props.\n *  When true and the value of a property in newProps is undefined, the property\n *  will be removed from the attribute.\n */\nexport function setTabsterAttribute(\n    element: HTMLElement,\n    newProps: Types.TabsterAttributeProps,\n    update?: boolean\n): void {\n    let props: Types.TabsterAttributeProps | undefined;\n\n    if (update) {\n        const attr = element.getAttribute(Types.TabsterAttributeName);\n\n        if (attr) {\n            try {\n                props = JSON.parse(attr);\n            } catch (e) {\n                /**/\n            }\n        }\n    }\n\n    if (!update || !props) {\n        props = {};\n    }\n\n    for (const key of Object.keys(\n        newProps\n    ) as (keyof Types.TabsterAttributeProps)[]) {\n        const value = newProps[key];\n\n        if (value) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            props[key] = value as any;\n        } else {\n            delete props[key];\n        }\n    }\n\n    if (Object.keys(props).length > 0) {\n        element.setAttribute(\n            Types.TabsterAttributeName,\n            getTabsterAttribute(props, true)\n        );\n    } else {\n        element.removeAttribute(Types.TabsterAttributeName);\n    }\n}\n\n/**\n * Returns an instance of Tabster if it already exists on the window .\n * @param win window instance that could contain an Tabster instance.\n */\nexport function getCurrentTabster(win: Window): Types.TabsterCore | undefined {\n    return (win as WindowWithTabsterInstance).__tabsterInstance;\n}\n\n/**\n * Allows to make Tabster non operational. Intended for performance debugging (and other\n * kinds of debugging), you can switch Tabster off without changing the application code\n * that consumes it.\n * @param tabster a reference created by createTabster().\n * @param noop true if you want to make Tabster noop, false if you want to turn it back.\n */\nexport function makeNoOp(tabster: Types.Tabster, noop: boolean): void {\n    const core = tabster.core;\n\n    if (core._noop !== noop) {\n        core._noop = noop;\n\n        const processNode = (element: HTMLElement): number => {\n            if (!element.getAttribute) {\n                return NodeFilter.FILTER_SKIP;\n            }\n\n            if (\n                getTabsterOnElement(core, element) ||\n                element.hasAttribute(Types.TabsterAttributeName)\n            ) {\n                updateTabsterByAttribute(core, element);\n            }\n\n            return NodeFilter.FILTER_SKIP;\n        };\n\n        const doc = core.getWindow().document;\n        const body = doc.body;\n\n        processNode(body);\n\n        const walker = createElementTreeWalker(doc, body, processNode);\n\n        if (walker) {\n            while (walker.nextNode()) {\n                /* Iterating for the sake of calling processNode() callback. */\n            }\n        }\n    }\n}\n\nexport function isNoOp(tabster: Types.TabsterCore): boolean {\n    return (tabster as TabsterCore)._noop;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}